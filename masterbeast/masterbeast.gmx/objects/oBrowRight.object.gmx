<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBrowRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>mCollisionParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

depth = BrowLayer

OriginalX = x
OriginalY = y
BaseX = OriginalX
BaseY = OriginalY
OriginalXScale = image_xscale
OriginalYScale = image_yscale
OriginalRotation = image_angle
direction = image_angle
BaseDirection = direction

XLimit = 50
XLimitLeft = OriginalX - XLimit 
XLimitRight = OriginalX + XLimit
YLimit = 150
YLimitUp = OriginalY - YLimit
YLimitDown = OriginalY + (YLimit / 2)
XScaleLimitUp = OriginalXScale + 0.02
XScaleLimitDown = OriginalXScale - 0.02
YScaleLimitUp = OriginalYScale + 0.02
YScaleLimitDown = OriginalYScale - 0.02
RotateLimitUp = 30
RotateLimitDown = 30
UpModifier = 0
RotateModifier = 0
YDifference = 0
XDifference = 0

RotateDifferencePercentage = 0
UpDifferencePercentage = 0
InDifferencePercentage = 0
RotateDifference = 0
XScaleDifference = 0
YScaleDifference = 0
InAndRotatePercentage = 0
UpAndRotatePercentage = 0

BaseBrowWrinkleScale = 0
TopBrowWrinkleScale = 0.4

BaseMiddleWrinkleScale = 0
TopMiddleWrinkleScale = 0.3

BreathingMod = 0
RotateDifference = 0


PlayXAmount = 0
PlayYAmount = 0


Touching = false
XOffset = 0
YOffset = 0
LastXPos = 0
LastYPos = 0
ResetXY = true


// Fur Setup

FursToGenerate = 60
FursGenerated = 0
AreaFocus = mEyebrowRightFocus
BloodStained = false
TypeOfFur = "brow"
LowerScaleBound = 0.09
UpperScaleBound = 0.15
Tag = "browright"

//Find Bounds

GetBounds()

TwitchMod = 0


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move If Grabbed

if position_meeting(mouse_x,mouse_y,self)
and mouse_check_button_pressed(mb_any)
and AmountForward(70)
and instance_exists(mDebug) = false
and mInterfaceController.CurrentHandUse = "none"
and mInterfaceController.Cleaning = false and mInterfaceController.Healing = false
and Touching = false {
XOffset = mouse_x - x
YOffset = mouse_y - y
if ResetXY = true {
LastXPos = x
LastYPos = y
}
if mInterfaceController.GrabbingBodyPart = false {
mInterfaceController.GrabbingBodyPart = true
VocaliseChance(20 + ((20 / 100) * mCreatureController.Resistance))
}
WriteToLog("Grabbed right brow.")
Touching = true 
ex_audio_set_pitch("movebp",random_range(0.95,1.05),0)
ex_audio_play("movebp",1)
ResetXY = false
}

if Touching = true {
if mInterfaceController.DragSpeed &lt;= 0 {
if ex_audio_is_paused("movebp") = false {
ex_audio_pause("movebp")
}
} else {
if ex_audio_is_paused("movebp") {
ex_audio_resume("movebp")
}
}
x = mouse_x - XOffset
y = mouse_y - YOffset
if mouse_check_button_released(mb_any) {
ex_audio_stop("movebp")
mInterfaceController.GrabbingBodyPart = false 
Touching = false
XOffset = 0
YOffset = 0
StepdownX = abs(LastXPos - x) / 30
StepdownY = abs(LastYPos - y) / 30
}
}

if Touching = false {
if ResetXY = false {
if x &gt; LastXPos + 6
{
x -= 5
} else if x &lt; LastXPos - 6 {
x += 5
}
if y &gt; LastYPos + 6 {
y -= 5
} else if y &lt; LastYPos - 6 {
y += 5
}

if (x &gt; (LastXPos - 6)) and (x &lt; (LastXPos + 6))
and (y &gt; (LastYPos - 6)) and (y &lt; (LastYPos + 6))
{
ResetXY = true
}
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculating Differences &amp; Position


if instance_exists(mFrontLoading) = false {

if Touching = false and ResetXY = true {
Breathing()

BaseDirection = OriginalRotation + RotateModifier //+ ((10 / 100) * oCheekRight.UpPercentageDifference)
RotateModifier = clamp(RotateModifier, -60, 60)
direction = BaseDirection - oBrowLeft.SadModRotate + oBrowLeft.AngryModRotate - oBrowLeft.PainModRotate - oBrowLeft.FearModRotate + oBrowLeft.StressModRotate - oBrowLeft.ShameModRotate
direction = clamp(direction,300,360)
BaseY =  OriginalY + ((10 / 100) * oCheekRight.UpPercentageDifference) + UpModifier  - ((20 / 100) * BreathingMod)
UpModifier = clamp(UpModifier,0,YLimit)

y = BaseY - ((80/ 100) * oMouthCentre.PercentageDiff) - oBrowLeft.HappyModUp + oBrowLeft.SadModDown + oBrowLeft.AngryModDown + oBrowLeft.TiredModDown - oBrowLeft.PainModUp - oBrowLeft.FearModUp - oBrowLeft.SurpriseModUp - TwitchMod
x = BaseX + oBrowLeft.HappyModOut - oBrowLeft.SadModIn - oBrowLeft.AngryModIn + oBrowLeft.TiredModOut - oBrowLeft.PainModIn - oBrowLeft.FearModIn 

x = clamp(x,XLimitLeft,XLimitRight)
y = clamp(y,YLimitUp,YLimitDown)
image_xscale = clamp(image_xscale,XScaleLimitDown,XScaleLimitUp)
image_yscale = clamp(image_yscale,YScaleLimitDown,YScaleLimitUp)
} else {
x = clamp(x,XLimitLeft + 30,XLimitRight - 30)
y = clamp(y,YLimitUp + 100,YLimitDown - 40)
image_xscale = clamp(image_xscale,XScaleLimitDown,XScaleLimitUp)
image_yscale = clamp(image_yscale,YScaleLimitDown,YScaleLimitUp)
}


if direction &gt; OriginalRotation {
RotateDifferencePercentage = ((abs(direction - OriginalRotation)) / RotateLimitUp) * 100
} else if direction &lt; OriginalRotation {
RotateDifferencePercentage = ((abs(OriginalRotation - direction)) / RotateLimitDown) * 100
} else if direction = OriginalRotation {
RotateDifferencePercentage = 0
}

if y &lt;= OriginalY {
UpDifferencePercentage = ((OriginalY - y) / YLimit) * 100
} else {
UpDifferencePercentage = 0
}

if x &lt;= OriginalX {
InDifferencePercentage = ((OriginalX - x) / XLimit) * 100
} else {
InDifferencePercentage = 0
}

XDifference = x - OriginalX
YDifference = y - OriginalY
XScaleDifference = image_xscale - OriginalXScale
YScaleDifference = image_yscale - OriginalYScale
RotateDifference = direction - OriginalRotation

InAndRotatePercentage = (InDifferencePercentage / 2) + (RotateDifferencePercentage / 2) 
UpAndRotatePercentage = (UpDifferencePercentage / 2) + (RotateDifferencePercentage / 2)

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Staying Within Limits
direction = clamp(direction,300,360)
image_angle = direction

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self And Pores
draw_sprite_ext(sBrowRight,1,x + 8,y + 8,image_xscale,image_yscale,direction,c_black,0.5)
draw_self()

with mFurBrowParent {
if Tag = "browright" {
draw_sprite_ext(PoreSprite,0,x,y,image_xscale * 0.2,image_yscale * 0.2,90,c_white,1)
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
