<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSarahHead</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>mCellarParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

depth = OffObjectsLayer
OrigRotation = image_angle
OrigX = x
OrigY = y
PickedUp = false
FirstPickUp = false
Stasis = false
XDifference = 0
YDifference = 0
RootedXOffset = x - oCellarBase.x
RootedYOffset = y - oCellarBase.y
Rooted = true
RotateMod = 0
Noticing = true
NoticingTimer = 1000
CellarSniff = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement &amp; Manipulation

//Work out differences &amp; variables for later in step.
XDifference = x - OrigX
YDifference = y - OrigY

//Rotate self depending on Rotate Mod.
image_angle = OrigRotation + RotateMod
oCellarBase.Shade = clamp(oCellarBase.Shade,0,1)
Height = oBody.bbox_bottom - bbox_top


RotateMod = clamp(RotateMod,-10,10)

//Slowly rotate back towards centre if not picked up (with built-in redundancy for dithering).
if PickedUp = false {
if RotateMod &gt; 6 {
RotateMod += 3
} else if RotateMod &lt; -6 {
RotateMod -=3
}
}

//Movement Reactions
if oSarahHead.Rooted = true
and instance_exists(mFinger)
and place_meeting(mFinger.x,mFinger.y,self)
and mInterfaceController.DragBegun = true {
MoveCellarReaction()
}



//Shade

if oSarahHead.Rooted = true {
if oCellarBase.Shade &lt; 1 {
oCellarBase.Shade += 0.05
}
} else if oSarahHead.Rooted = false {
if oCellarBase.Shade &gt; 0 {
oCellarBase.Shade -= 0.05
}
}



//Taking Out
with oCellarBase {
if place_meeting(x,y,oBody) = false
and oBody.y &lt; y
and oSarahHead.Rooted = true 
and mInterfaceController.CurrentView = MicroView
{
WriteToLog("Removed the Cellar.")
oSarahHead.Rooted = false
}
}

//Putting Back

with oCellarBase {
TouchingNecks = place_meeting(x,y,oNecks)
TouchingSHead = place_meeting(x,y,oSarahHead)
TouchingJHead = place_meeting(x,y,oJosephHead)
}

with oReplaceDetect {
if oSarahHead.Rooted = false
and y &lt; oCellarBase.y
and oCellarBase.TouchingNecks = false
and oCellarBase.TouchingSHead = false
and oCellarBase.TouchingJHead = false
and place_meeting(x,y,oReplaceDock) 
and mInterfaceController.CurrentView = MicroView
{
oSarahHead.Rooted = true
PutCellarBackReactions()
}
}

//Spraying Blood If Rooted

if Rooted = true
and PickedUp = true
and mInterfaceController.DragBegun = true
and mInterfaceController.DragSpeed &gt; 0
{
ex_audio_set_position("cellarmove",mouse_x,mouse_y,1)
if ex_audio_is_paused("cellarmove") = true {

ex_audio_resume("cellarmove")
}
CreateParticleSplash(oNecks.x,oCellarBase.y,3,ps_shape_ellipse,ps_distr_gaussian,DebugRedTextColour,5,15,0.02,0.06,0,360,60,120,0.5,40)
} else {
if ex_audio_is_paused("cellarmove") = false {
ex_audio_pause("cellarmove")
}
}

//Picking Up

if 
position_meeting(mouse_x,mouse_y,oSarahHead)
and PickedUp = false
and mInterfaceController.CurrentHandUse != "knife"
and (instance_exists(oCellarTop) = false)
and mInterfaceController.CurrentView = MicroView
and mouse_check_button_pressed(mb_any) 
{
if FirstPickUp = false {
FirstPickUp = true
WriteToLog("Picked up the Cellar.")
}
PickedUp = true
XOffset = x - mouse_x
YOffset = y - mouse_y
}

if PickedUp = true {
//If picked up, move with mouse and increase shame.
x = mouse_x + XOffset
y = mouse_y + YOffset
mEmotionSubController.ShameBaseActivation += 0.02

//Rotate the head slightly when moving left and right.
if mInterfaceController.HMove = "left" {
RotateMod += (10 / mInterfaceController.SpeedMax) * mInterfaceController.CurrentSpeed
} else if mInterfaceController.HMove = "right" {
RotateMod -= (10 / mInterfaceController.SpeedMax) * mInterfaceController.CurrentSpeed
}

//Dropping

if mouse_check_button_released(mb_any) {
PickedUp = false
WriteToLog("Dropped the Cellar.")
}
}

if PickedUp = false and FirstPickUp = true and Stasis = false and Rooted = false{
speed = 30
direction = 270
}

//Falling below room height, entering stasis, picking a new location for the Cellar, resetting everything.

if y &gt; room_height and Stasis = false {
speed = 0
Stasis = true
x = room_width + 200
y = room_height + 200
StasisTimer = irandom_range(900,6000)
}

if Stasis = true {
if StasisTimer &gt; 0 {
StasisTimer -= 1
} else if StasisTimer &lt;= 0 {

XRand = 1017
YRand = 3734

if mInterfaceController.CurrentView = MicroView
and (XRand &lt; view_xview[1] or XRand &gt; (view_xview[1] + view_wview[1]))
and (YRand &lt; view_yview[1] or YRand &gt; (view_yview[1] + view_hview[1]))
{
oCellarBase.x = XRand
oCellarBase.y = YRand
oCellarBase.Uncovered = false
oCellarBase.DripTimer = 200
instance_create(x,y,oCellarTop)
x = oCellarBase.x + RootedXOffset
y = oCellarBase.y + RootedYOffset
Stasis = false
FirstPickUp = false
Rooted = true
}
}
}

//Keeping within the hole if rooted.

if Rooted = true {
x = clamp(x,oCellarBase.x - 20,oCellarBase.x + 40)
y = clamp(y,oCellarBase.y - 400,oCellarBase.y + 10)
} 

ChangeSpriteWithZoom(0.5,0.5,image_xscale,image_yscale)

//Reactions

CellarProximityReactions()




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Don't Draw Sprite

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
