<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sHairNormal1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>mFurSuperParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

OriginalX = x
OriginalY = y
OriginalRotation = 0
depth = choose(FurLayer1,FurLayer2,FurLayer3)
XDifference = 0
YDifference = 0
AmountGrown = 100
CurrentXScale = 0
CurrentYScale = 0
image_alpha = 1

Wettening = false
WindMod = 0
Touched = false
LowerRotateModBound = irandom_range(-10,-50)
UpperRotateModBound = irandom_range(10,50)
TouchRotateMod = 0
TouchMouseRotateMod = 0
RotateChange = 3
HoldRotateMod = 0
Colour = c_white
Stained = false
Plucking = false
CurrentWetBlend = c_black
WetAmount = 0
WetScaleAmount = 0
WetMod = 0
WetteningTimer = 0
WetTouchPercent = 0
PluckYMod = 0
ShaveBoundary = 40
RotateLimit = 50
Distance = 0
Direction = 0

Sprite = choose(sHairNormal1,sHairNormal2,sHairNormal3,sHairNormal4,sHairNormal5,sHairNormal6)
PoreSprite = choose(sPore1,sPore2,sPore3)

Shed = false

Tag = "none"
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Being Shaved

if Shed = false {
if position_meeting(mouse_x,mouse_y,self)
and mInterfaceController.CurrentHandUse = "shave"
and mInterfaceController.DragStatus = "dragging"
and mInterfaceController.DragSpeed &gt; 10
and AmountGrown &gt;= ShaveBoundary
and mBehavioursDeliberative.PercentForward &gt;= 70
{
//Shaving Sound Placeholder
WriteToLog("Shaved some hair.")
FurShaveReaction()
if ex_audio_is_playing("snip1") = false
and ex_audio_is_playing("snip2") = false
and ex_audio_is_playing("snip3") = false
{
SnipSound = choose("snip1","snip2","snip3")
ex_audio_set_volume(SnipSound,BothVolMod(0.025))
ex_audio_set_pitch(SnipSound,random_range(0.9,1.1))
ex_audio_set_position(SnipSound,mouse_x,mouse_y,1)
ex_audio_play(SnipSound,0)
}
part_emitter_region(mFurController.FurPartSys,mFurController.FurPartEmit,x - 3,x + 3,y - 3,y + 3,ps_shape_ellipse,ps_distr_gaussian)
part_emitter_burst(mFurController.FurPartSys,mFurController.FurPartEmit,mFurController.FurPart,80)
AmountGrown = 0
Plucking = false
Shaved = true
WetAmount = 0
WetScaleAmount = 0
} 

if AmountGrown &lt; 100 {
AmountGrown += mFurController.FurRegrowRate
}

AmountGrown = clamp(AmountGrown,0,100)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Being Touched

if Shed = false {
if Wettening != true {

if (Plucking = false 
and mouse_check_button(mb_any)
and instance_exists(mDebug) = false
and place_meeting(x,y,mFinger)
and mBehavioursDeliberative.PercentForward &gt;= 70)
or
(place_meeting(x,y,oMoleHerd))
{
if Touched = false {
Touched = true
}
} else {
Touched = false
}




if Touched = true and Plucking = false  {
//Rotate To One Side Slowly
if x &lt; (mouse_x) {
TouchRotateMod -= (2 - ((1 / 100) * WetTouchPercent))
} else if x &gt; (mouse_x) {
TouchRotateMod += (2 - ((1 / 100) * WetTouchPercent))
}

} else if Touched = false {

//Slowly Return To Normal Rotation

ChangeOrNot = choose(-1,-1,-1,-1,-1,1)

if ChangeOrNot = 1 {
RotateChange = random_range(3,6)
}

if TouchRotateMod &gt; 0 {
TouchRotateMod -= RotateChange 
}

if TouchRotateMod &lt; 0 {
TouchRotateMod += RotateChange
}

}
}

TouchRotateMod = clamp(TouchRotateMod,-30,30)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Maintain Position

direction = OriginalRotation + WindMod + TouchRotateMod + HoldRotateMod + WetMod
direction = clamp(direction, OriginalRotation - RotateLimit, OriginalRotation + RotateLimit)
image_angle = direction

//Moving With Head Segments And Other Body Parts

if position_meeting(x,y,oThroat) {
ThroatXMod = oThroat.XDifference
ThroatYMod = round(oThroat.YDifference / 4)
} else {
ThroatXMod = 0
ThroatYMod = 0
}

if Tag = "toptrunk" {
MouthMod = (130 / 100) * oMouthCentre.PercentageDiff
} else {
MouthMod = 0
}

if Tag = "browleft" {
StepDistance = Distance
StepDirection = Direction - oBrowLeft.RotateDifference
x = oBrowLeft.x + lengthdir_x(StepDistance,StepDirection)
y = oBrowLeft.x + lengthdir_y(StepDistance,StepDirection)
} else if Tag = "browright" {
StepDistance = Distance
StepDirection = Direction - oBrowRight.RotateDifference
x = oBrowRight.x + lengthdir_x(StepDistance,StepDirection)
y = oBrowRight.x + lengthdir_y(StepDistance,StepDirection)
} else {
x = OriginalX + ThroatXMod 
y = OriginalY + ThroatYMod + MouthMod
}

//Scale Changes For Growing Back
CurrentXScale = ((BaseXScale + PluckYMod) / 100) * AmountGrown 
CurrentYScale = ((BaseYScale - WetScaleAmount ) / 100) * AmountGrown



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy If Touch Cut

if position_meeting(x,y,oStabWound) or position_meeting(x,y,oWound) {
part_emitter_region(mFurController.FurPartSys,mFurController.FurPartEmit,x - 3,x + 3,y - 3,y + 3,ps_shape_ellipse,ps_distr_gaussian)
part_emitter_burst(mFurController.FurPartSys,mFurController.FurPartEmit,mFurController.FurPart,50)
instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprite

if Shed = false {
draw_sprite_ext(Sprite,0,x,y,CurrentXScale,CurrentYScale,image_angle,c_white,image_alpha)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
