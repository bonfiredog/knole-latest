<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEyeballRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>mEyeRightParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

depth = EyeLayer
OriginalX = x
OriginalY = y
OriginalXScale = 1
BaseXScale = OriginalXScale
OriginalYScale = 1
BaseYScale = OriginalYScale
image_xscale = BaseXScale
image_yscale = BaseYScale
Parent = oBrowRight
Touched = false

XLimitRight = OriginalX + 0
XLimitLeft = OriginalX - 0
YLimitUp = OriginalY - Parent.YLimit
BrowLimit = 50
HalfBrowLimit = BrowLimit / 2
YLimitDown = OriginalY + 0
XScaleLimitTop = OriginalXScale + 0.08 
XScaleLimitBottom = OriginalXScale - 0.08

SpeedOfEyelid = 0
TargetIndex = 0
CurrentIndex = 0
Changing = false
MaxOpenIndex = 9
TiredIndex = 9
EyesTired = false

LowerWrinkleScale = 0.3
LowerWrinkleAlpha = 1
LowerWrinkleRotation = 0

Light = false
GlowSizeBase = 0.9
GlowSize = GlowSizeBase * 3

BreathingMod = 0
Redness = 0
BaseBlackness = 0
Blackness = 0
TargetBlackness = 0

BlackenedSizeMod = 0
BlackenedIndexMod = 0
BlackenedAlphaMod = 0

OuterWrinkleAlpha = 0
OuterWrinkleScale = 0
InnerWrinkleAlpha = 0
InnerWrinkleScale = 0

Resetting = false

//Floater Stuff

EyeSurface = surface_create(sprite_width,sprite_height)
XOffset = sprite_width / 2
YOffset = sprite_width / 2
FloaterTimer = 100
FloaterDistance = 100

TearsMod = 0

SetSound = false
CutUp = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Y Position Tied To Parent

//Work Out Half Of The Y Translation Based on Brow Rotation

RotateHalf = (25 / 100) * Parent.RotateDifferencePercentage

//Work Out Half Of The Y Translation Based on Brow Up 

UpHalf = (25 / 100) * Parent.UpDifferencePercentage

//Apply to the Y value

y = OriginalY - (RotateHalf + UpHalf) 

Blackness = clamp(Blackness,0,1)
Redness = clamp(Redness,0,1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eye Size And Closed Value Tied To Blackness

if CutUp = false {
BlackenedSizeMod = (0.06 / 100) * (Blackness * 100)
BlackenedIndexMod = round((4/100) * (Blackness * 100))
BlackenedAlphaMod = ((0.9 / 100) * mCreatureController.Tiredness) + ((0.4 / 100) * (Blackness * 100))
Redness = ((0.6 / 100) * mCreatureController.Tiredness) + ((0.4 / 100) * mEmotionSubController.SadActivation) + ((0.5 / 100) * mDriveCollectionMaster.RitualTolerance)
TearsMod = clamp(TearsMod,0,1)
} else {
BlackenedSizeMod = 0.06
BlackenedIndexMod = 4
BlackenedAlphaMod = 0.9
Redness = 1
}

//Touching Black Eye

if instance_exists(mFinger) and (
(position_meeting(mFinger.x,mFinger.y,oEyelidUpperRight) or 
position_meeting(mFinger.x,mFinger.y,oEyelidLowerRight))
)
and Blackness &gt; 20
{
TouchBlackEyeReactions(oEyeballLeft,"right")
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade &amp; Raise Blackness

if CutUp = false {
if TargetBlackness &gt; 0 {
if BaseBlackness != TargetBlackness {
if BaseBlackness &lt; TargetBlackness {
BaseBlackness += 0.0005
} else if BaseBlackness &gt; TargetBlackness {
BaseBlackness += 0.0005
}
} else {
TargetBlackness = 0
}
}

if BaseBlackness &gt; 0 {
BaseBlackness -= 0.00001 / ((3 / 100) * mCreatureController.Alive)
}

Blackness = BaseBlackness + ((0.3 / 100) * (100 - mCreatureController.Alive)) + ((0.3 / 100) * mCreatureController.Pain)
} else {
Blackness = 0.6
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Work Out Image Alpha &amp; Scale For Wrinkles

if mCreatureController.Tiredness &lt;= 30 {
OuterWrinkleAlpha = 0
OuterWrinkleScale = 0

InnerWrinkleAlpha = (1 / 30) * mCreatureController.Tiredness
InnerWrinkleScale = (0.3 / 30) * mCreatureController.Tiredness


} else if mCreatureController.Tiredness &gt; 30 and mCreatureController.Tiredness &lt;= 60 {

InnerWrinkleAlpha = 1
InnerWrinkleScale = 0.3

OuterWrinkleAlpha = (1 / 30) * (mCreatureController.Tiredness - 30)
OuterWrinkleAlpha = (0.3 / 30) * (mCreatureController.Tiredness - 30)

} else {

InnerWrinkleAlpha = 1
InnerWrinkleScale = 0.3
OuterWrinkleAlpha = 1
OuterWrinkleScale = 0.3

}

if mCreatureController.Tiredness &lt; 50 {
LowerWrinkleAlpha = 0
LowerWrinkleScale = 0
} else if mCreatureController.Tiredness &gt;= 50 and mCreatureController.Tiredness &lt;= 80 {
LowerWrinkleAlpha = (1 / 30) * (mCreatureController.Tiredness - 50)
LowerWrinkleScale = (0.3 / 30) * (mCreatureController.Tiredness - 50)
} else {
LowerWrinkleAlpha = 1
LowerWrinkleScale = 0.3
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Working Out Differences


XScaleTopPercentage = ((image_xscale - OriginalXScale) / 0.08) * 100


XScaleDifference = image_xscale - OriginalXScale
YScaleDifference = image_yscale - OriginalYScale
XDifference = x - OriginalX
YDifference = y - OriginalY

UpPercentage = (YDifference / Parent.YLimit) * 100
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Max Y Scale &amp; Max Open Index Tied To Cheek Position

if CutUp = false {
if mCreatureController.Alive &gt; 0 {
if mBehavioursReactive.Sleeping = false and mDriveCollectionMaster.Dozing = false  {
if mBehavioursReactive.SquintingActive = false {
MaxOpenIndex = 8 - (round((4 / 100) * oCheekRight.UpPercentageDifference)) - oEyeballLeft.HappySquintMod + oEyeballLeft.SadSquintModDown + oEyeballLeft.AngrySquintModDown + oEyeballLeft.SurpriseSquintModDown - oEyeballLeft.ShameSquintMod - oEyeballLeft.TirednessSquintMod - oEyeballLeft.PainSquintMod + oEyeballLeft.FearSquintModDown - BlackenedIndexMod - mDriveCollectionMaster.PainShutMod
MaxOpenIndex = clamp(MaxOpenIndex,2,9)
}
} else {
MaxOpenIndex = 0
}
} else {
MaxOpenIndex = 0
}
} else {
MaxOpenIndex = 1
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Glow Calculations

ToggleLightWithAmbientAlpha()


GlowSizeBase = (0.1 * oEyelidUpperRight.image_index)//  / ((10 / 100) * (100 - mCreatureController.Alive))
GlowSize = GlowSizeBase * 3.1

Difference = choose(0.1,-0.1,0)
GlowSize += Difference

GlowSize = clamp(GlowSize,
GlowSizeBase * 3.1,
GlowSizeBase * 4.1
)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Staying Within Limits

image_angle = direction
x = clamp(x,XLimitLeft,XLimitRight)
y = clamp(y,YLimitUp,YLimitDown)
image_xscale = clamp(image_xscale,XScaleLimitBottom,XScaleLimitTop)
image_yscale = clamp(image_yscale,XScaleLimitBottom,XScaleLimitTop)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawning Floaters

if mInterfaceController.CurrentView = MicroView
and PlayerViewOverObject(self)
{
if FloaterTimer &gt; 0 {
FloaterTimer -= 1 
} else if FloaterTimer &lt;= 0 {
FloaterDirection = random(360)
PosX = x + lengthdir_x(FloaterDistance,FloaterDirection)
PosY = y + lengthdir_y(FloaterDistance,FloaterDirection)

ThisFloater = instance_create(PosX,PosY,oFloaterRight)
ThisFloater.Parent = self.id
if IsInRitual() {
if mDriveCollectionMaster.MotesMoving = false {
FloaterTimer = irandom_range(5,30)
} else {
FloaterTimer = 1
}
} else {
FloaterTimer = irandom_range(100,300)
}
}
}

//If Eye is shut, destroy all floaters.

if MaxOpenIndex = 0 {
with oFloaterRight {
instance_destroy()
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If Not Alive, Close Eye With Press

if mCreatureController.Alive &lt;= 0 
and place_meeting(x,y,mFinger)
and Resetting = false
{ 
if mInterfaceController.DragDirection &gt;= 0 and mInterfaceController.DragDirection &lt;= 180 {
StartOpenEyeBehaviour("right",1)
} else if mInterfaceController.DragDirection &gt; 180 and mInterfaceController.DragDirection &lt;= 360 {
StartCloseEyeBehaviour("right",1)
}
Resetting = true
}

if Resetting = true {
if place_meeting(x,y,mFinger) = false {
Resetting = false
}
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Touching And Sound

if place_meeting(x,y,mFinger)
and Touched = false 
and mInterfaceController.CurrentHandUse != "knife"
and AmountForward(55)
and EyesNotClosed()
{
SmearSound = choose("touchwet1","touchwet2","touchwet3")
ex_audio_set_position(SmearSound,mouse_x,mouse_y,1)
ex_audio_set_volume(SmearSound,BothVolMod(0.006),0)
ex_audio_set_pitch(SmearSound,random_range(2.3,2.7),0)
ex_audio_play(SmearSound,0)
WriteToLog("Touched right eye.")
TouchLiquid("tear")
Touched = true 
}

if place_meeting(x,y,mFinger) = false
and Touched = true {
Touched = false 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eye Pond Sound

if SetSound = false {
ex_audio_play("eyepondright",1)
ex_audio_set_position("eyepondright",oEyeballRight.x,oEyeballRight.y,1)
SetSound = true
} else {
ex_audio_set_volume("eyepondright",InVolMod(
(0.075 / 9) * MaxOpenIndex),0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing Black Eye, Surface And Floaters

draw_sprite_ext(sBlackEyeLeft,0,x - 20,y + 20,0.25,0.25,image_angle + 270,c_white,BlackenedAlphaMod)


if CutUp = false {
SurfaceOffsetX = x - (sprite_width / 2)
SurfaceOffsetY = y - (sprite_height / 2)

if (!surface_exists(EyeSurface)) {
EyeSurface = surface_create(sprite_width,sprite_height)
}
surface_set_target(EyeSurface)
draw_clear_alpha(c_black,0)
draw_sprite_ext(sEyeballRight,0,XOffset,YOffset,image_xscale,image_yscale,image_angle,c_white,1)
draw_set_colour_write_enable(1,1,1,0)
with oFloaterRight {
if place_meeting(x,y,other) {
draw_sprite_ext(sprite_index,0,x - other.SurfaceOffsetX,y - other.SurfaceOffsetY,1,1,image_angle,c_white,image_alpha)
}
}
draw_set_colour_write_enable(1,1,1,1)
surface_reset_target()
draw_surface(EyeSurface,x - XOffset,y - YOffset)
} else {
draw_sprite_ext(sEyeballRight,0,XOffset,YOffset,image_xscale,image_yscale,image_angle,c_red,1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
