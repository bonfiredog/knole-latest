<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sThroat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>mTabooParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup


depth = ThroatLayerBottom
OriginalX = x
OriginalY = y 
BaseY = y
BaseX = x
YLimit = OriginalY + 100
OriginalXScale = image_xscale
OriginalYScale = image_yscale
ScaleLimitUp = OriginalXScale + 0.2
TouchThroatTimer = 0
ScaleLimitDown = OriginalXScale - 0.2
PressThroatTimer = 0
ClosestWound = noone

SwallowTrackPos = 0
SwallowTrackMod = 0

Cut = false

BreathingMod = 0
VocMod = 0
Touching = false
ResetXY = true
VocDir = "left"
PitchMod = 0
TouchingThroat = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keep Within Limits

image_angle = direction

x = clamp(x,OriginalX - 40,OriginalX + 40)
y = clamp(y,YLimit,OriginalY)
image_xscale = clamp(image_xscale,ScaleLimitDown,ScaleLimitUp)
image_yscale = image_xscale

Breathing()

if Touching = false and ResetXY = true {
y = BaseY + BreathingMod
x = BaseX + VocMod 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Work Out Differences

XDifference = x - OriginalX
YDifference = y - OriginalY
XScaleDifference = image_xscale - OriginalXScale
YScaleDifference = image_yscale - OriginalYScale
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swallow Track

SwallowTrackPos = clamp(SwallowTrackPos,0,100)

if mBehavioursReactive.SwallowingActive = true {
if SwallowTrackPos &lt;= 50 {
SwallowTrackMod = SwallowTrackPos * 2
} else if SwallowTrackPos &gt;= 50 {
SwallowTrackMod = (50 - (SwallowTrackPos - 50)) * 2
}
} else {
if SwallowTrackPos &gt; 0 {
SwallowTrackPos -= 5
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shaking When Vocalising

if Touching = false and ResetXY = true {
if mBehavioursDeliberative.Vocalising = true {
if VocDir = "left" {
VocMod -= 4
VocDir = "right"
} else if VocDir = "right" {
VocMod += 4
VocDir = "left"
}
} else {
if VocMod != 0 {
if VocMod &lt; 0 {
VocMod += 1
} else if VocMod &gt; 0 {
VocMod -= 1
}
}
}
} else {
if VocMod != 0 {
if VocMod &lt; 0 {
VocMod += 1
} else if VocMod &gt; 0 {
VocMod -= 1
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Moving When Grabbed

if 
position_meeting(mouse_x,mouse_y,self)
and mouse_check_button_pressed(mb_any)
and instance_exists(mDebug) = false
and mInterfaceController.Cleaning = false and mInterfaceController.Healing = false
and AmountForward(70)
and mInterfaceController.CurrentHandUse = "none"
and Touching = false {
XOffset = mouse_x - x
YOffset = mouse_y - y
if ResetXY = true {
LastXPos = x
LastYPos = y
}
if mInterfaceController.GrabbingBodyPart = false {
mInterfaceController.GrabbingBodyPart = true
}
WriteToLog("Grabbing throat.")
mBehavioursReactive.SwallowingActive = false
Touching = true 
ResetXY = false
}

if Touching = true {
x = mouse_x - XOffset
y = mouse_y - YOffset
if mouse_check_button_released(mb_any) {
mInterfaceController.GrabbingBodyPart = false
Touching = false
XOffset = 0
YOffset = 0
XDiff = abs(x - LastXPos)
YDiff = abs(y - LastYPos)
}
}

if Touching = false {
if ResetXY = false {
if x &gt; LastXPos + 6
{
x -= 5
} else if x &lt; LastXPos - 6 {
x += 5
}
if y &gt; LastYPos + 6 {
y -= 5
} else if y &lt; LastYPos - 6 {
y += 5
}

if (x &gt; (LastXPos - 6)) and (x &lt; (LastXPos + 6))
and (y &gt; (LastYPos - 6)) and (y &lt; (LastYPos + 6))
ResetXY = true
}
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PitchMod

if PitchMod &gt; 0 {
PitchMod -= 0.0001
}

PitchMod = clamp(PitchMod,0,0.2)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Touching

if place_meeting(x,y,mFinger) and instance_exists(mDebug) = false {
PressThroatReaction()
} else {
if TouchThroatTimer &gt; 0 {
TouchThroatTimer -= 0.4
}
if PressThroatTimer &gt; 0 {
PressThroatTimer -= 0.05
}
}

TouchThroatTimer = clamp(TouchThroatTimer,0,200)
PressThroatTimer = clamp(PressThroatTimer,0,200)




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make MMM when Vocalising

if mBehavioursDeliberative.Vocalising = true {
if mInterfaceController.CurrentView = MicroView
and (view_yview[1] &gt; 3696 and view_yview[1] &lt; 4062)
and (view_xview[1] &gt; 461 and view_xview[1] &lt; 962)
{
if audio_is_playing(mMMM) = false {
audio_play_sound(mMMM,1,1)
}
} else {
if audio_is_playing(mMMM) {
audio_stop_sound(mMMM)
}
}
} else {
if audio_is_playing(mMMM) {
audio_stop_sound(mMMM)
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cutting Changes Pitch

if Cut = false {
if mouse_check_button(mb_any)
and position_meeting(mouse_x,mouse_y,self)
and mInterfaceController.CurrentHandUse = "knife" {
Cut = true
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Don't Draw Sprite

draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
