<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>mDropperParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

WelledX = 0
WelledY = 0
image_xscale = 0
image_yscale = 0
GrownToSize = false
ReadyToGrow = false
depth = LiquidLayer
Status = "welling"
image_alpha = 0.7
Colour = c_white
GrowToSizeRate = 0
WellingWobbleAmount = 0
StartSmear = false
CurrentAlpha = image_alpha
SmearExtent = 0
TrickleMod = 0
NoseMod = 0
LidMod = 0
BrowRightMod = 0
BrowLeftMod = 0
ThroatMod = 0
CheekLeftMod = 0
CheekRightMod = 0
DesiredXScale = 0
DesiredYScale = 0
Destroying = false
DestroyTimer = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Splash On Destroy

CreateParticleSplash(x,y,1,ps_shape_ellipse,ps_distr_gaussian,image_blend,15,30,0.05,0.1,0,360,30,80,5,20)
if Status = "welling" {
Parent.NumberPresent -= 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Grow To Size

if ReadyToGrow = true {
if GrownToSize = false {
if image_xscale &lt; TopXScale {
image_xscale += GrowToSizeRate
image_yscale = image_xscale
} else if image_xscale &gt;= TopXScale {
CurrentXScaleBase = image_xscale
CurrentYScaleBase = image_yscale
GrownToSize = true
}
}
}

DestroyIfLeaveBottomOfRoom()


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Welling

if Status = "welling" {
if object_get_name(self) != "mSnot" {
x = WelledX + Parent.XDifference + WellingWobbleAmount
y = WelledY + Parent.YDifference
}
} else if Status = "dripping" {
speed = 30
direction = 270
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Evaporating

if GrownToSize = true {
if Status = "welling" {
CurrentXScaleBase -= 0.000006
CurrentYScaleBase -= 0.000006
}

if CurrentXScaleBase &lt;= 0 {
instance_destroy()
}
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement Modifiers

if GrownToSize = true {

//Destroy if touching fur.
if place_meeting(x,y,mFurParent) and Destroying = false  {
Destroying = true
DestroyTimer = 20
}

if Destroying = true {
if DestroyTimer &gt; 0 {
DestroyTimer -= 1
} else if DestroyTimer &lt;= 0 {
instance_destroy()
}
}

//Offsets and scale differences for if on anatomy parts.
if place_meeting(x,y,oNose1) {
XScaleOffset = oNose1.XScaleDifference
YScaleOffset = oNose1.YScaleDifference
} else if place_meeting(x,y,oBrowLeft) {
XScaleOffset = oBrowLeft.XScaleDifference
YScaleOffset = oBrowLeft.YScaleDifference
} else if place_meeting(x,y,oBrowRight) {
XScaleOffset = oBrowRight.XScaleDifference
YScaleOffset = oBrowRight.YScaleDifference
} else if place_meeting(x,y,oCheekRight) {
XScaleOffset = oCheekRight.XScaleDifference
YScaleOffset = oCheekRight.YScaleDifference
} else if place_meeting(x,y,oCheekLeft) {
XScaleOffset = oCheekLeft.XScaleDifference
YScaleOffset = oCheekLeft.YScaleDifference
}  else if place_meeting(x,y,oThroat) {
XScaleOffset = oThroat.XScaleDifference
YScaleOffset = oThroat.YScaleDifference
} else {
XScaleOffset = oHead1.XScaleDifference
YScaleOffset = oHead1.YScaleDifference
}

//----------------------------------------------------------------------------------------

//Contextual Rules For Contact With Other Objects (Will Need To Be Updated)


//Throat Parts 

if place_meeting(x,y,oThroat) {
ThroatMod = 0.05
} else {
ThroatMod = 0
}

//Brows 
if place_meeting(x,y,oBrowRight) {
if place_meeting(x,y,oNose1) = false and place_meeting(x,y,oBrowLeft) = false {
BrowRightMod = 0.06
} else {
BrowRightMod = 0
}
} else {
BrowRightMod = 0
}

if place_meeting(x,y,oBrowLeft) {
if place_meeting(x,y,oNose1) = false and place_meeting(x,y,oBrowRight) = false {
BrowLeftMod = 0.06
} else {
BrowLeftMod = 0
}
} else {
BrowLeftMod = 0
}

//Cheeks
if place_meeting(x,y,oCheekLeft) {
CheekLeftMod = 0.04
} else {
CheekLeftMod = 0
}

if place_meeting(x,y,oCheekRight) {
CheekRightMod = 0.04
} else {
CheekRightMod = 0
}


//Nose
if place_meeting(x,y,oNose1) {
NoseMod = 0.06
} else {
NoseMod = 0
}


image_xscale = CurrentXScaleBase 
image_yscale = CurrentYScaleBase 

}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wobbling

if mLiquidSubController.WobbleTimer &gt; 0 {
if mLiquidSubController.WobbleDirection = "left" {
WellingWobbleAmount -= 1
} else if mLiquidSubController.WobbleDirection = "right" {
WellingWobbleAmount += 1
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dripping


DestroyIfLeaveBottomOfRoom()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Colour Is Image Blend

image_blend = Colour
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do Not Draw Sprite
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
