<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

x = ControllerObjectX
y = ControllerObjectY
depth = WeatherLayer

//---------------------------------------Weather Values

CurrentWeatherMod = 0
NextWeatherMod = 0 

SimpleWindD = 0
SimpleWindS = 0
TopWindS = 18
CurrentWindSound = "light"
WeatherOn = true


//---------------------------------------Cloud, Fog &amp; Mist

CloudEmitterRate = 2000
CloudEmitterNextRate = 2000
Emitter = instance_create(x,y,oCloudEmitter)


FogMistInProgress = false
NextFogMistInProgress = false
SetMistMinute = false
CurrentMistMinute = 0
MistSet = false
MorningMist = false

//Thunder &amp; Lightning

ThunderCountdown = 7 * 60 * room_speed
FlashInProgress = false
FlashTimer = 20
WaitingForNoise = false
NoiseTimer = random_range(120,600)

//--------------------------------------Particles

PartGravity = 270 + ((SimpleWindS * 2) * SimpleWindD)
if PartGravity &lt; 230 {
PartGravity = 230
}
if PartGravity &gt; 310 {
PartGravity = 310
}


RainPartSys = part_system_create()
RainPart = part_type_create()
SleetPart = part_type_create()
HailPart = part_type_create()
SnowPart = part_type_create()


part_type_sprite(RainPart,sRain,false,false,false)
part_type_size(RainPart,0.4,0.6,0,0)
part_type_colour1(RainPart,c_white)
part_type_alpha2(RainPart,0.5,0.1)
part_type_gravity(RainPart,0.15,PartGravity)
part_type_speed(RainPart,(0.4 * SimpleWindS),(0.4 * SimpleWindS),0,0)
part_type_direction(RainPart,PartGravity - 30,PartGravity + 30,0,1)
part_type_orientation(RainPart,PartGravity,PartGravity,0,0,0)
part_type_life(RainPart,480,600);


part_type_sprite(SleetPart,sSleet,false,false,false)
part_type_size(SleetPart,0.5,0.8,0,0)
part_type_colour1(SleetPart,c_white)
part_type_alpha2(SleetPart,0.5,0.1)
part_type_gravity(SleetPart,0.15,PartGravity)
part_type_speed(SleetPart,(0.3 * SimpleWindS),(0.3 * SimpleWindS),0.03,0)
part_type_direction(SleetPart,PartGravity - 10,PartGravity + 10,0,1)
part_type_orientation(SleetPart,PartGravity,PartGravity,0,0,0)
part_type_life(SleetPart,480,600);


part_type_sprite(HailPart,sHail,false,false,false)
part_type_size(HailPart,0.4,1.1,0,0)
part_type_colour1(HailPart,c_white)
part_type_alpha1(HailPart,0.7)
part_type_gravity(HailPart,3,PartGravity)
part_type_speed(HailPart,(20 * SimpleWindS),(20 * SimpleWindS),0,0)
part_type_direction(HailPart,PartGravity,PartGravity,0,0)
part_type_orientation(HailPart,PartGravity,PartGravity,0,0,0)
part_type_life(HailPart,480,600);


part_type_sprite(SnowPart,sSnow,false,false,false)
part_type_size(SnowPart,0.6,1.2,0,0)
part_type_colour1(SnowPart,c_white)
part_type_alpha2(SnowPart,0.7,0.1)
part_type_gravity(SnowPart,0.6,PartGravity)
part_type_speed(SnowPart,(0.1 * SimpleWindS),(0.1 * SimpleWindS),-0.5,0)
part_type_direction(SnowPart,PartGravity - 60,PartGravity + 60,choose(-1,1),3)
part_type_orientation(SnowPart,PartGravity,PartGravity,0,0,0)
part_type_life(SnowPart,480,600);



//Current System Setup

CurrentPartSys = part_system_create()
CurrentPartEmitTop = part_emitter_create(CurrentPartSys)
CurrentPartEmitRight = part_emitter_create(CurrentPartSys)
CurrentPartEmitLeft = part_emitter_create(CurrentPartSys)
part_system_depth(CurrentPartSys,WeatherLayer - 0.03)

//Next System Setup

NextPartSys = part_system_create()
NextPartEmitTop = part_emitter_create(CurrentPartSys)
NextPartEmitRight = part_emitter_create(CurrentPartSys)
NextPartEmitLeft = part_emitter_create(CurrentPartSys)
repeat(room_speed * 3){part_system_update(CurrentPartSys)}
part_system_depth(NextPartSys,WeatherLayer - 0.03)


EmitterTopXMin = -500
EmitterTopXMax = room_width + 500
EmitterTopYMin = -500
EmitterTopYMax = 0

EmitterLeftXMin = -500
EmitterLeftXMax = 0
EmitterLeftYMin = 0
EmitterLeftYMax = room_height

EmitterRightXMin = room_width
EmitterRightXMax = room_width + 500
EmitterRightYMin = 0
EmitterRightYMax = room_height

//Simple Decider For Morning Mist At Boot

if mWorldController.ThisPeriodWT != 5 and mWorldController.ThisPeriodWT != 6 {
Mist = choose(-1,1)
if Mist = 1 {
MorningMist = true
instance_create(x,y,oFogMistController)
} else {
MorningMist = false
}
} else {
MorningMist = false
}

MistSet = true

MorningMistMinutes = 90
CurrentMistMinute = 0

CurrentTimer = 0
NextTimer = 0

RitualWeather = "none"
RitualWindS = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Working Out Current &amp; Next Weather Mods, Based On CurrentWTMod

CurrentWeatherMod = 180 - mWorldController.CurrentWTMod
NextWeatherMod = 0 + mWorldController.CurrentWTMod

if mWorldController.CurrentWindD &lt;= 90 {
SimpleWindD = 1
} else if mWorldController.CurrentWindD &gt; 90 and mWorldController.CurrentWindD &lt;= 270 {
SimpleWindD = -1
} else if mWorldController.CurrentWindD &gt; 270 {
SimpleWindD = 1
}

SimpleWindS = mWorldController.CurrentWindS + RitualWindS
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Displaying Current Weather

//Reset the particle gravity every step.
PartGravity = 270 + ((SimpleWindS * 5) * SimpleWindD)
if PartGravity &lt; 230 {
PartGravity = 230
}
if PartGravity &gt; 310 {
PartGravity = 310
}


if WeatherOn = true {
//----------------------------------------------- Weather Types

switch mWorldController.ThisPeriodWT {
case 0: //Clear Night
//No weather or modifiers required.
FogMistInProgress = false
CurrentFurWetAmount = 0 
break;

case 1: //Sunny Day
//No weather or modifiers required.
FogMistInProgress = false
break;

case 2: //Partly Cloudy (Night)
CloudEmitterRate = 1400
FogMistInProgress = false
break;

case 3: //Partly Cloudy (Day)
CloudEmitterRate = 1400
FogMistInProgress = false
break;

case 5: //Mist
if FogMistInProgress = false {
FogMistInProgress = true
}
if instance_exists(oFogMistController) = false {
instance_create(x,y,oFogMistController)
}
break;

case 6: //Fog
if FogMistInProgress = false {
FogMistInProgress = true
}
if instance_exists(oFogMistController) = false {
instance_create(x,y,oFogMistController)
}
break;

case 7: //Cloudy
CloudEmitterRate = 1200
FogMistInProgress = false

break;


case 8: //Overcast
CloudEmitterRate = 700
FogMistInProgress = false
break;

case 9: //Light Rain 
case 10:
case 11:
case 12:


if IsInRitual() = false or (IsInRitual() and RitualWeather != "calm") {

CloudEmitterRate = 1200

part_type_gravity(RainPart,0.8,PartGravity)
part_type_speed(RainPart,(3 * SimpleWindS),(3 * SimpleWindS),0,0)
part_type_direction(RainPart,PartGravity - 30,PartGravity + 30,0,1)
part_type_orientation(RainPart,PartGravity,PartGravity,0,0,0)
if mInterfaceController.CurrentView = MacroView {
part_type_size(RainPart,0.4,0.6,0,0)
} else if mInterfaceController.CurrentView = MicroView {
part_type_size(RainPart,0.1,0.3,0,0)
}

part_emitter_region(CurrentPartSys,CurrentPartEmitTop,EmitterTopXMin,EmitterTopXMax,EmitterTopYMin,EmitterTopYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitTop,RainPart,round(CurrentWeatherMod / 60))
part_emitter_region(CurrentPartSys,CurrentPartEmitLeft,EmitterLeftXMin,EmitterLeftXMax,EmitterLeftYMin,EmitterLeftYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitLeft,RainPart,round(CurrentWeatherMod / 60))
part_emitter_region(CurrentPartSys,CurrentPartEmitRight,EmitterRightXMin,EmitterRightXMax,EmitterRightYMin,EmitterRightYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitRight,RainPart,round(CurrentWeatherMod / 60))
WeatherLiquid("current","lightrain")
FogMistInProgress = false
} else {
FogMistInProgress = false
}
break;

case 13: //Heavy Rain
case 14:
case 15:

if IsInRitual() = false or (IsInRitual() and RitualWeather != "calm") {
CloudEmitterRate = 700
part_type_gravity(RainPart,0.8,PartGravity)
part_type_speed(RainPart,(3 * SimpleWindS),(3 * SimpleWindS),0,0)
part_type_direction(RainPart,PartGravity - 30,PartGravity + 30,0,1)
part_type_orientation(RainPart,PartGravity,PartGravity,0,0,0)
if mInterfaceController.CurrentView = MacroView {
part_type_size(RainPart,0.4,0.7,0,0)
} else if mInterfaceController.CurrentView = MicroView {
part_type_size(RainPart,0.1,0.4,0,0)
}

part_emitter_region(CurrentPartSys,CurrentPartEmitTop,EmitterTopXMin,EmitterTopXMax,EmitterTopYMin,EmitterTopYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitTop,RainPart,round(CurrentWeatherMod / 10))
part_emitter_region(CurrentPartSys,CurrentPartEmitLeft,EmitterLeftXMin,EmitterLeftXMax,EmitterLeftYMin,EmitterLeftYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitLeft,RainPart,round(CurrentWeatherMod / 10))
part_emitter_region(CurrentPartSys,CurrentPartEmitRight,EmitterRightXMin,EmitterRightXMax,EmitterRightYMin,EmitterRightYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitRight,RainPart,round(CurrentWeatherMod / 10))
WeatherLiquid("current","heavyrain")
FogMistInProgress = false
} else {
FogMistInProgress = false
}
break;

case 16: //Sleet
case 17:
case 18:

if IsInRitual() = false or (IsInRitual() and RitualWeather != "calm") {
CloudEmitterRate = 700
part_type_gravity(SleetPart,0.15,PartGravity)
part_type_speed(SleetPart,(2 * SimpleWindS),(2 * SimpleWindS),0.03,0)
part_type_direction(SleetPart,PartGravity - 10,PartGravity + 10,0,1)
part_type_orientation(SleetPart,PartGravity,PartGravity,0,0,0)
if mInterfaceController.CurrentView = MacroView {
part_type_size(SleetPart,0.5,0.8,0,0)
} else if mInterfaceController.CurrentView = MicroView {
part_type_size(SleetPart,0.2,0.5,0,0)
}

part_emitter_region(CurrentPartSys,CurrentPartEmitTop,EmitterTopXMin,EmitterTopXMax,EmitterTopYMin,EmitterTopYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitTop,SleetPart,round(CurrentWeatherMod / 30))
part_emitter_region(CurrentPartSys,CurrentPartEmitLeft,EmitterLeftXMin,EmitterLeftXMax,EmitterLeftYMin,EmitterLeftYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitLeft,SleetPart,round(CurrentWeatherMod / 30))
part_emitter_region(CurrentPartSys,CurrentPartEmitRight,EmitterRightXMin,EmitterRightXMax,EmitterRightYMin,EmitterRightYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitRight,SleetPart,round(CurrentWeatherMod / 30))
WeatherLiquid("current","lightrain")
FogMistInProgress = false
} else {
FogMistInProgress = false
}
break;

case 19: //Hail
case 20:
case 21:
if IsInRitual() = false or (IsInRitual() and RitualWeather != "calm") {
CloudEmitterRate = 700
part_type_gravity(HailPart,3,PartGravity)
part_type_speed(HailPart,(16 * SimpleWindS),(16 * SimpleWindS),0,0)
part_type_direction(HailPart,PartGravity,PartGravity,0,0)
part_type_orientation(HailPart,PartGravity,PartGravity,0,0,0)
if mInterfaceController.CurrentView = MacroView {
part_type_size(HailPart,0.4,1.1,0,0)
} else if mInterfaceController.CurrentView = MicroView {
part_type_size(HailPart,0.2,0.6,0,0)
}

part_emitter_region(CurrentPartSys,CurrentPartEmitTop,EmitterTopXMin,EmitterTopXMax,EmitterTopYMin,EmitterTopYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitTop,HailPart,round(CurrentWeatherMod / 40))
part_emitter_region(CurrentPartSys,CurrentPartEmitLeft,EmitterLeftXMin,EmitterLeftXMax,EmitterLeftYMin,EmitterLeftYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitLeft,HailPart,round(CurrentWeatherMod / 40))
part_emitter_region(CurrentPartSys,CurrentPartEmitRight,EmitterRightXMin,EmitterRightXMax,EmitterRightYMin,EmitterRightYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitRight,HailPart,round(CurrentWeatherMod / 40))
FogMistInProgress = false
} else {
FogMistInProgress = false
}
break;

case 22: //Light Snow
case 23:
case 24:
if IsInRitual() = false or (IsInRitual() and RitualWeather != "calm") {
CloudEmitterRate = 1300
part_type_life(SnowPart,200,600);
part_type_gravity(SnowPart,0.7,PartGravity)
part_type_speed(SnowPart,(1 * SimpleWindS),(1 * SimpleWindS),-0.7,0)
part_type_direction(SnowPart,PartGravity - 100,PartGravity + 100,choose(-3,3),5)
part_type_orientation(SnowPart,PartGravity,PartGravity,0,0,0)
if mInterfaceController.CurrentView = MacroView {
part_type_size(SnowPart,0.6,1.2,0,0)
} else if mInterfaceController.CurrentView = MicroView {
part_type_size(SnowPart,0.2,0.6,0,0)
}

part_emitter_region(CurrentPartSys,CurrentPartEmitTop,EmitterTopXMin,EmitterTopXMax,EmitterTopYMin,EmitterTopYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitTop,SnowPart,round(CurrentWeatherMod / 70))
part_emitter_region(CurrentPartSys,CurrentPartEmitLeft,EmitterLeftXMin,EmitterLeftXMax,EmitterLeftYMin,EmitterLeftYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitLeft,SnowPart,round(CurrentWeatherMod / 70))
part_emitter_region(CurrentPartSys,CurrentPartEmitRight,EmitterRightXMin,EmitterRightXMax,EmitterRightYMin,EmitterRightYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitRight,SnowPart,round(CurrentWeatherMod / 70))
FogMistInProgress = false
} else {
FogMistInProgress = false
}
break;

case 25: //Heavy Snow
case 26:
case 27:
if IsInRitual() = false or (IsInRitual() and RitualWeather != "calm") {
CloudEmitterRate = 700
part_type_life(SnowPart,200,600);
part_type_gravity(SnowPart,0.7,PartGravity)
part_type_speed(SnowPart,(1 * SimpleWindS),(1 * SimpleWindS),-0.7,0)
part_type_direction(SnowPart,PartGravity - 100,PartGravity + 100,choose(-3,3),5)
part_type_orientation(SnowPart,PartGravity,PartGravity,0,0,0)
if mInterfaceController.CurrentView = MacroView {
part_type_size(SnowPart,0.6,1.2,0,0)
} else if mInterfaceController.CurrentView = MicroView {
part_type_size(SnowPart,0.2,0.6,0,0)
}

part_emitter_region(CurrentPartSys,CurrentPartEmitTop,EmitterTopXMin,EmitterTopXMax,EmitterTopYMin,EmitterTopYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitTop,SnowPart,round(CurrentWeatherMod / 35))
part_emitter_region(CurrentPartSys,CurrentPartEmitLeft,EmitterLeftXMin,EmitterLeftXMax,EmitterLeftYMin,EmitterLeftYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitLeft,SnowPart,round(CurrentWeatherMod / 35))
part_emitter_region(CurrentPartSys,CurrentPartEmitRight,EmitterRightXMin,EmitterRightXMax,EmitterRightYMin,EmitterRightYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitRight,SnowPart,round(CurrentWeatherMod / 35))
FogMistInProgress = false
} else {
FogMistInProgress = false
}
break;

case 28: //Thunder &amp; Lightning
case 29:
case 30:
if IsInRitual() = false or (IsInRitual() and RitualWeather != "calm") {
CloudEmitterRate = 700
part_type_gravity(RainPart,0.8,PartGravity)
part_type_speed(RainPart,(3 * SimpleWindS),(3 * SimpleWindS),0,0)
part_type_direction(RainPart,PartGravity - 30,PartGravity + 30,0,1)
part_type_orientation(RainPart,PartGravity,PartGravity,0,0,0)
if mInterfaceController.CurrentView = MacroView {
part_type_size(RainPart,0.4,0.7,0,0)
} else if mInterfaceController.CurrentView = MicroView {
part_type_size(RainPart,0.1,0.4,0,0)
}

part_emitter_region(CurrentPartSys,CurrentPartEmitTop,EmitterTopXMin,EmitterTopXMax,EmitterTopYMin,EmitterTopYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitTop,RainPart,round(CurrentWeatherMod / 10))
part_emitter_region(CurrentPartSys,CurrentPartEmitLeft,EmitterLeftXMin,EmitterLeftXMax,EmitterLeftYMin,EmitterLeftYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitLeft,RainPart,round(CurrentWeatherMod / 10))
part_emitter_region(CurrentPartSys,CurrentPartEmitRight,EmitterRightXMin,EmitterRightXMax,EmitterRightYMin,EmitterRightYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitRight,RainPart,round(CurrentWeatherMod / 10))
WeatherLiquid("current","heavyrain")
ThunderLightAndSound()
FogMistInProgress = false
} else {
FogMistInProgress = false
}
break;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Displaying Next Weather


//----------------------------------------------- Weather Types
if WeatherOn = true {
switch mWorldController.NextPeriodWT {
case 0: //Clear Night
//No weather or modifiers required.
NextFurWetAmount = 0
NextFogMistInProgress = false
break;

case 1: //Sunny Day
//No weather or modifiers required.
NextNextFogMistInProgress = false
NextFurWetAmount = 0
break;

case 2: //Partly Cloudy (Night)
CloudEmitterNextRate = 1400
NextFogMistInProgress = false
break;

case 3: //Partly Cloudy (Day)
CloudEmitterNextRate = 1400
NextFogMistInProgress = false
NextFurWetAmount = 0
break;

case 5: //Mist
if NextFogMistInProgress = false {
if NextFogMistInProgress = false {
}
NextFogMistInProgress = true
}
NextFurWetAmount = 0
break;

case 6: //Fog
if NextFogMistInProgress = false {
if NextFogMistInProgress = false {
}
NextFogMistInProgress = true
}
NextFurWetAmount = 0
break;

case 7: //Cloudy
CloudEmitterNextRate = 1200
NextFogMistInProgress = false
NextFurWetAmount = 0
break;


case 8: //Overcast
CloudEmitterNextRate = 700
NextFogMistInProgress = false
NextFurWetAmount = 0
break;

case 9: //Light Rain 
case 10:
case 11:
case 12:
if IsInRitual() = false or (IsInRitual() and RitualWeather != "calm") {
NextFurWetAmount = 20
CloudEmitterNextRate = 1200
part_type_gravity(RainPart,0.8,PartGravity)
part_type_speed(RainPart,(3 * SimpleWindS),(3 * SimpleWindS),0,0)
part_type_direction(RainPart,PartGravity - 30,PartGravity + 30,0,1)
part_type_orientation(RainPart,PartGravity,PartGravity,0,0,0)
if mInterfaceController.CurrentView = MacroView {
part_type_size(RainPart,0.4,0.6,0,0)
} else if mInterfaceController.CurrentView = MicroView {
part_type_size(RainPart,0.1,0.3,0,0)
}

part_emitter_region(NextPartSys,NextPartEmitTop,EmitterTopXMin,EmitterTopXMax,EmitterTopYMin,EmitterTopYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitTop,RainPart,round(NextWeatherMod / 120))
part_emitter_region(NextPartSys,NextPartEmitLeft,EmitterLeftXMin,EmitterLeftXMax,EmitterLeftYMin,EmitterLeftYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitLeft,RainPart,round(NextWeatherMod / 120))
part_emitter_region(NextPartSys,NextPartEmitRight,EmitterRightXMin,EmitterRightXMax,EmitterRightYMin,EmitterRightYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitRight,RainPart,round(NextWeatherMod / 120))
WeatherLiquid("next","lightrain")
NextFogMistInProgress = false
} else {
NextFogMistInProgress = false 
}
break;

case 13: //Heavy Rain
case 14:
case 15:
if IsInRitual() = false or (IsInRitual() and RitualWeather != "calm") {
NextFurWetAmount = 40
CloudEmitterNextRate = 700
part_type_gravity(RainPart,0.8,PartGravity)
part_type_size(RainPart,0.4,0.7,0,0)
part_type_speed(RainPart,(3 * SimpleWindS),(3 * SimpleWindS),0,0)
part_type_direction(RainPart,PartGravity - 30,PartGravity + 30,0,1)
part_type_orientation(RainPart,PartGravity,PartGravity,0,0,0)
if mInterfaceController.CurrentView = MacroView {
part_type_size(RainPart,0.4,0.7,0,0)
} else if mInterfaceController.CurrentView = MicroView {
part_type_size(RainPart,0.1,0.4,0,0)
}


part_emitter_region(NextPartSys,NextPartEmitTop,EmitterTopXMin,EmitterTopXMax,EmitterTopYMin,EmitterTopYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitTop,RainPart,round(NextWeatherMod / 32))
part_emitter_region(NextPartSys,NextPartEmitLeft,EmitterLeftXMin,EmitterLeftXMax,EmitterLeftYMin,EmitterLeftYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitLeft,RainPart,round(NextWeatherMod / 32))
part_emitter_region(NextPartSys,NextPartEmitRight,EmitterRightXMin,EmitterRightXMax,EmitterRightYMin,EmitterRightYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitRight,HailPart,round(NextWeatherMod / 32))
WeatherLiquid("next","heavyrain")
NextFogMistInProgress = false
} else {
NextFogMistInProgress = false 
}
break;

case 16: //Sleet
case 17:
case 18:
if IsInRitual() = false or (IsInRitual() and RitualWeather != "calm") {
NextFurWetAmount = 40
CloudEmitterNextRate = 700
part_type_gravity(SleetPart,0.15,PartGravity)
part_type_speed(SleetPart,(2 * SimpleWindS),(2 * SimpleWindS),0.03,0)
part_type_direction(SleetPart,PartGravity - 10,PartGravity + 10,0,1)
part_type_orientation(SleetPart,PartGravity,PartGravity,0,0,0)
if mInterfaceController.CurrentView = MacroView {
part_type_size(SleetPart,0.5,0.8,0,0)
} else if mInterfaceController.CurrentView = MicroView {
part_type_size(SleetPart,0.2,0.5,0,0)
}


part_emitter_region(NextPartSys,NextPartEmitTop,EmitterTopXMin,EmitterTopXMax,EmitterTopYMin,EmitterTopYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitTop,SleetPart,round(NextWeatherMod /90))
part_emitter_region(NextPartSys,NextPartEmitLeft,EmitterLeftXMin,EmitterLeftXMax,EmitterLeftYMin,EmitterLeftYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitLeft,SleetPart,round(NextWeatherMod / 90))
part_emitter_region(NextPartSys,NextPartEmitRight,EmitterRightXMin,EmitterRightXMax,EmitterRightYMin,EmitterRightYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitRight,SleetPart,round(NextWeatherMod / 90))
WeatherLiquid("next","lightrain")
NextFogMistInProgress = false
} else {
NextFogMistInProgress = false 
}
break;

case 19: //Hail
case 20:
case 21:
if IsInRitual() = false or (IsInRitual() and RitualWeather != "calm") {
NextFurWetAmount = 40
CloudEmitterNextRate = 700
part_type_gravity(HailPart,3,PartGravity)
part_type_speed(HailPart,(16 * SimpleWindS),(16 * SimpleWindS),0,0)
part_type_direction(HailPart,PartGravity,PartGravity,0,0)
part_type_orientation(HailPart,PartGravity,PartGravity,0,0,0)
if mInterfaceController.CurrentView = MacroView {
part_type_size(HailPart,0.4,1.1,0,0)
} else if mInterfaceController.CurrentView = MicroView {
part_type_size(HailPart,0.2,0.6,0,0)
}


part_emitter_region(NextPartSys,NextPartEmitTop,EmitterTopXMin,EmitterTopXMax,EmitterTopYMin,EmitterTopYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitTop,HailPart,round(NextWeatherMod /200))
part_emitter_region(NextPartSys,NextPartEmitLeft,EmitterLeftXMin,EmitterLeftXMax,EmitterLeftYMin,EmitterLeftYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitLeft,HailPart,round(NextWeatherMod / 200))
part_emitter_region(NextPartSys,NextPartEmitRight,EmitterRightXMin,EmitterRightXMax,EmitterRightYMin,EmitterRightYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitRight,HailPart,round(NextWeatherMod / 200))
NextFogMistInProgress = false
} else {
NextFogMistInProgress = false 
}
break;

case 22: //Light Snow
case 23:
case 24:
if IsInRitual() = false or (IsInRitual() and RitualWeather != "calm") {
NextFurWetAmount = 0
CloudEmitterNextRate = 1000
part_type_life(SnowPart,200,600);
part_type_gravity(SnowPart,0.7,PartGravity)
part_type_speed(SnowPart,(1 * SimpleWindS),(1 * SimpleWindS),-0.7,0)
part_type_direction(SnowPart,PartGravity - 100,PartGravity + 100,choose(-3,3),5)
part_type_orientation(SnowPart,PartGravity,PartGravity,0,0,0)
if mInterfaceController.CurrentView = MacroView {
part_type_size(SnowPart,0.6,1.2,0,0)
} else if mInterfaceController.CurrentView = MicroView {
part_type_size(SnowPart,0.2,0.6,0,0)
}

part_emitter_region(NextPartSys,NextPartEmitTop,EmitterTopXMin,EmitterTopXMax,EmitterTopYMin,EmitterTopYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitTop,SnowPart,round(NextWeatherMod / 150))
part_emitter_region(NextPartSys,NextPartEmitLeft,EmitterLeftXMin,EmitterLeftXMax,EmitterLeftYMin,EmitterLeftYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitLeft,SnowPart,round(NextWeatherMod / 150))
part_emitter_region(NextPartSys,NextPartEmitRight,EmitterRightXMin,EmitterRightXMax,EmitterRightYMin,EmitterRightYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitRight,SnowPart,round(NextWeatherMod / 150))
NextFogMistInProgress = false
} else {
NextFogMistInProgress = false 
}
break;

case 25: //Heavy Snow
case 26:
case 27:
if IsInRitual() = false or (IsInRitual() and RitualWeather != "calm") {
NextFurWetAmount = 0
CloudEmitterNextRate = 700
part_type_life(SnowPart,200,600);
part_type_gravity(SnowPart,0.7,PartGravity)
part_type_speed(SnowPart,(1 * SimpleWindS),(1 * SimpleWindS),-0.7,0)
part_type_direction(SnowPart,PartGravity - 100,PartGravity + 100,choose(-3,3),5)
part_type_orientation(SnowPart,PartGravity,PartGravity,0,0,0)
if mInterfaceController.CurrentView = MacroView {
part_type_size(SnowPart,0.6,1.2,0,0)
} else if mInterfaceController.CurrentView = MicroView {
part_type_size(SnowPart,0.2,0.6,0,0)
}

part_emitter_region(NextPartSys,NextPartEmitTop,EmitterTopXMin,EmitterTopXMax,EmitterTopYMin,EmitterTopYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitTop,SnowPart,round(NextWeatherMod /90))
part_emitter_region(NextPartSys,NextPartEmitLeft,EmitterLeftXMin,EmitterLeftXMax,EmitterLeftYMin,EmitterLeftYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitLeft,SnowPart,round(NextWeatherMod / 90))
part_emitter_region(NextPartSys,NextPartEmitRight,EmitterRightXMin,EmitterRightXMax,EmitterRightYMin,EmitterRightYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitRight,SnowPart,round(NextWeatherMod / 90))
NextFogMistInProgress = false
} else {
NextFogMistInProgress = false 
}
break;

case 28: //Thunder &amp; Lightning
if IsInRitual() = false or (IsInRitual() and RitualWeather != "calm") {
NextFurWetAmount = 60
CloudEmitterNextRate = 700
if mWorldController.ThisPeriodWT != 28 and mWorldController.ThisPeriodWT != 29 and mWorldController.ThisPeriodWT != 30 {
ThunderLightAndSound()
}
part_type_gravity(RainPart,0.8,PartGravity)
part_type_size(RainPart,0.4,0.7,0,0)
part_type_speed(RainPart,(3 * SimpleWindS),(3 * SimpleWindS),0,0)
part_type_direction(RainPart,PartGravity - 30,PartGravity + 30,0,1)
part_type_orientation(RainPart,PartGravity,PartGravity,0,0,0)
if mInterfaceController.CurrentView = MacroView {
part_type_size(RainPart,0.4,0.7,0,0)
} else if mInterfaceController.CurrentView = MicroView {
part_type_size(RainPart,0.1,0.4,0,0)
}

part_emitter_region(NextPartSys,NextPartEmitTop,EmitterTopXMin,EmitterTopXMax,EmitterTopYMin,EmitterTopYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitTop,RainPart,round(NextWeatherMod / 32))
part_emitter_region(NextPartSys,NextPartEmitLeft,EmitterLeftXMin,EmitterLeftXMax,EmitterLeftYMin,EmitterLeftYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitLeft,RainPart,round(NextWeatherMod / 32))
part_emitter_region(NextPartSys,NextPartEmitRight,EmitterRightXMin,EmitterRightXMax,EmitterRightYMin,EmitterRightYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(NextPartSys,NextPartEmitRight,RainPart,round(NextWeatherMod / 32))
WeatherLiquid("next","heavyrain")
NextFogMistInProgress = false
} else {
NextFogMistInProgress = false 
}
break;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Displaying Ritual Weather

if IsInRitual() {

switch RitualWeather {
case "storm":
RitualWindS = 20
CloudEmitterRate = 700
part_type_gravity(RainPart,0.8,PartGravity)
part_type_speed(RainPart,(3 * SimpleWindS),(3 * SimpleWindS),0,0)
part_type_direction(RainPart,PartGravity - 30,PartGravity + 30,0,1)
part_type_orientation(RainPart,PartGravity,PartGravity,0,0,0)
if mInterfaceController.CurrentView = MacroView {
part_type_size(RainPart,0.4,0.7,0,0)
} else if mInterfaceController.CurrentView = MicroView {
part_type_size(RainPart,0.1,0.4,0,0)
}

part_emitter_region(CurrentPartSys,CurrentPartEmitTop,EmitterTopXMin,EmitterTopXMax,EmitterTopYMin,EmitterTopYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitTop,RainPart,round(CurrentWeatherMod / 15))
part_emitter_region(CurrentPartSys,CurrentPartEmitLeft,EmitterLeftXMin,EmitterLeftXMax,EmitterLeftYMin,EmitterLeftYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitLeft,RainPart,round(CurrentWeatherMod / 15))
part_emitter_region(CurrentPartSys,CurrentPartEmitRight,EmitterRightXMin,EmitterRightXMax,EmitterRightYMin,EmitterRightYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitRight,RainPart,round(CurrentWeatherMod / 15))
WeatherLiquid("current","heavyrain")

ThunderLightAndSound()
FogMistInProgress = false
NextFogMistInProgress = false
break;

//---------------------------------------------------

case "calm":
RitualWindS = 0
CloudEmitterRate = 0
CloudEmitterNextRate = 0
FogMistInProgress = false
NextFogMistInProgress = false
break;

//---------------------------------------------------

case "hail":
RitualWindS = 0
CloudEmitterRate = 700
part_type_gravity(HailPart,3,PartGravity)
part_type_speed(HailPart,(16 * SimpleWindS),(16 * SimpleWindS),0,0)
part_type_direction(HailPart,PartGravity,PartGravity,0,0)
part_type_orientation(HailPart,PartGravity,PartGravity,0,0,0)
if mInterfaceController.CurrentView = MacroView {
part_type_size(HailPart,0.4,1.1,0,0)
} else if mInterfaceController.CurrentView = MicroView {
part_type_size(HailPart,0.2,0.6,0,0)
}

part_emitter_region(CurrentPartSys,CurrentPartEmitTop,EmitterTopXMin,EmitterTopXMax,EmitterTopYMin,EmitterTopYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitTop,HailPart,round(CurrentWeatherMod / 80))
part_emitter_region(CurrentPartSys,CurrentPartEmitLeft,EmitterLeftXMin,EmitterLeftXMax,EmitterLeftYMin,EmitterLeftYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitLeft,HailPart,round(CurrentWeatherMod / 80))
part_emitter_region(CurrentPartSys,CurrentPartEmitRight,EmitterRightXMin,EmitterRightXMax,EmitterRightYMin,EmitterRightYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitRight,HailPart,round(CurrentWeatherMod / 80))
break;
//---------------------------------------------------

case "rain":
RitualWindS = 0
CloudEmitterRate = 700
part_type_gravity(RainPart,0.8,PartGravity)
part_type_speed(RainPart,(3 * SimpleWindS),(3 * SimpleWindS),0,0)
part_type_direction(RainPart,PartGravity - 30,PartGravity + 30,0,1)
part_type_orientation(RainPart,PartGravity,PartGravity,0,0,0)
if mInterfaceController.CurrentView = MacroView {
part_type_size(RainPart,0.4,0.7,0,0)
} else if mInterfaceController.CurrentView = MicroView {
part_type_size(RainPart,0.1,0.4,0,0)
}

part_emitter_region(CurrentPartSys,CurrentPartEmitTop,EmitterTopXMin,EmitterTopXMax,EmitterTopYMin,EmitterTopYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitTop,RainPart,round(CurrentWeatherMod / 15))
part_emitter_region(CurrentPartSys,CurrentPartEmitLeft,EmitterLeftXMin,EmitterLeftXMax,EmitterLeftYMin,EmitterLeftYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitLeft,RainPart,round(CurrentWeatherMod / 15))
part_emitter_region(CurrentPartSys,CurrentPartEmitRight,EmitterRightXMin,EmitterRightXMax,EmitterRightYMin,EmitterRightYMax,ps_shape_line,ps_distr_linear)
part_emitter_burst(CurrentPartSys,CurrentPartEmitRight,RainPart,round(CurrentWeatherMod / 15))
WeatherLiquid("current","heavyrain")
break;
//---------------------------------------------------

case "windy":
RitualWindS = 20
break;
//---------------------------------------------------
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controlling Morning Mist

if WeatherOn = true {
//If at midnight exactly, reset the mist decider for today.
if MistSet = true and current_hour = 0 and current_minute = 0 and current_second = 0 {
MistSet = false
}

//If we haven't yet decided on mist for today (i.e. if an entire day has passed between boot and now)...
if MistSet = false 
//And it is just before dawn...
and current_hour = ThisMorningTwilightStartHour
{
//Decide on the morning mist. It will only trigger if the next two weather periods are not misty or foggy.
if mWorldController.ThisPeriodWT != 5 and mWorldController.ThisPeriodWT != 6
and mWorldController.NextPeriodWT != 5 and mWorldController.NextPeriodWT != 6
{
Mist = choose(-1,1)
if Mist = 1 {
MorningMist = true
} else {
MorningMist = false
}
} else {
MorningMist = false
}
MorningMistMinutes = 90
CurrentMistMinute = 0
SetMistMinute = false
MistSet = true
instance_create(x,y,oFogMistController)
}

//If Morning Mist Is True, run it as a weather ON TOP OF the current weather, with its variables tied to sunrise.

if MistSet = true and MorningMist = true and instance_exists(oFogMistController){

//Count up the minutes

if current_second = 59 and SetMistMinute = false {
CurrentMistMinute += 1
SetMistMinute = true
}
else if current_second != 59 {
SetMistMinute = false
}

}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controlling Weather Sound

//Wind Sound

//Start the wind at start of game.
if ex_audio_is_playing("wind") = false {
ex_audio_set_volume("wind", 0, 0)
ex_audio_play("wind", true)
}

//Modulate the volume of the light wind sound to suit the current speed.
ex_audio_set_volume("wind", 0.2 + ((0.2 / 100) * ((SimpleWindS/TopWindS) * 100)) - (0.1 * mBehavioursReactive.SleepingActive))

    
//Weather Sounds

//Current

switch mWorldController.CurrentWeatherSound {

case "lightrain":

//Fade out and stop all other sounds, as long as they are not playing as part of the next period.

if ex_audio_is_playing("heavyrain") and mWorldController.NextWeatherSound != "heavyrain" {
ex_audio_set_volume("heavyrain", 0, 300)
if ex_audio_get_volume("heavyrain") = 0 {
ex_audio_stop("heavyrain")
}
}

if ex_audio_is_playing("hail") and mWorldController.NextWeatherSound != "hail" {
ex_audio_set_volume("hail", 0, 300)
if ex_audio_get_volume("hail") = 0 {
ex_audio_stop("hail")
}
}

//Set initial volume to 0 and begin playing sound.

if ex_audio_is_playing("lightrain") = false {
ex_audio_set_volume("lightrain",0,0)
ex_audio_play("lightrain", true)
} 
//Set volume programatically depending on current weather mod: before 50%, it is going up; after 50%, its going down.

else {
if CurrentWeatherMod &gt;= 90 {
if mWorldController.NextWeatherSound = "lightrain" {
ex_audio_set_volume("lightrain", (0.2 + ((0.05 / 90) * CurrentWeatherMod) + ((0.05 / 90) * NextWeatherMod)) - (0.2 * mBehavioursReactive.SleepingActive), 0)
} else {
ex_audio_set_volume("lightrain", (0.2 + ((0.05 / 90) * CurrentWeatherMod)) - (0.2 * mBehavioursReactive.SleepingActive), 0)
}
} else if CurrentWeatherMod &lt; 90 {
if mWorldController.NextWeatherSound = "lightrain" {
ex_audio_set_volume("lightrain", (0.2 - ((0.05 / 90) * (CurrentWeatherMod - 90)) + ((0.05 /90) * (NextWeatherMod / 2))) - (0.2 * mBehavioursReactive.SleepingActive), 0)
} else {
ex_audio_set_volume("lightrain", (0.2 - ((0.05 / 90) * (CurrentWeatherMod - 90)))  - (0.2 * mBehavioursReactive.SleepingActive), 0)
}
}
}

break;

case "heavyrain":

//Fade out and stop all other sounds, as long as they are not playing as part of the next period.

if ex_audio_is_playing("lightrain") and mWorldController.NextWeatherSound != "lightrain" {
ex_audio_set_volume("lightrain", 0, 300)
if ex_audio_get_volume("lightrain") = 0 {
ex_audio_stop("lightrain")
}
}

if ex_audio_is_playing("hail") and mWorldController.NextWeatherSound != "hail" {
ex_audio_set_volume("hail", 0, 300)
if ex_audio_get_volume("hail") = 0 {
ex_audio_stop("hail")
}
}

//Set initial volume to 0 and begin playing sound.

if ex_audio_is_playing("heavyrain") = false {
ex_audio_set_volume("heavyrain",0,0)
ex_audio_play("heavyrain", true)
} 
//Set volume programatically depending on current weather mod: before 50%, it is going up; after 50%, its going down.

else {
if CurrentWeatherMod &gt;= 90 {
if mWorldController.NextWeatherSound = "heavyrain" {
ex_audio_set_volume("heavyrain", (0.3 + ((0.1 / 90) * CurrentWeatherMod) + ((0.1 / 90) * NextWeatherMod)) - (0.2 * mBehavioursReactive.SleepingActive) , 0)
} else {
ex_audio_set_volume("heavyrain", (0.3 + ((0.1 / 90) * CurrentWeatherMod))  - (0.2 * mBehavioursReactive.SleepingActive), 0)
}
} else if CurrentWeatherMod &lt; 90 {
if mWorldController.NextWeatherSound = "heavyrain" {
ex_audio_set_volume("heavyrain", (0.3 - ((0.1 / 90) * (CurrentWeatherMod - 90)) + ((0.1 /90) * (NextWeatherMod / 2)))  - (0.2 * mBehavioursReactive.SleepingActive), 0)
} else {
ex_audio_set_volume("heavyrain", (0.3 - ((0.1 / 90) * (CurrentWeatherMod - 90))) - (0.2 * mBehavioursReactive.SleepingActive), 0)
}
}
}
break;

case "hail":

//Fade out and stop all other sounds, as long as they are not playing as part of the next period.

if ex_audio_is_playing("heavyrain") and mWorldController.NextWeatherSound != "heavyrain" {
ex_audio_set_volume("heavyrain", 0, 300)
if ex_audio_get_volume("heavyrain") = 0 {
ex_audio_stop("heavyrain")
}
}

if ex_audio_is_playing("lightrain") and mWorldController.NextWeatherSound != "lightrain" {
ex_audio_set_volume("lightrain", 0, 300)
if ex_audio_get_volume("lightrain") = 0 {
ex_audio_stop("lightrain")
}
}

//Set initial volume to 0 and begin playing sound.

if ex_audio_is_playing("hail") = false {
ex_audio_set_volume("hail",0,0)
ex_audio_play("hail", true)
} 
//Set volume programatically depending on current weather mod: before 50%, it is going up; after 50%, its going down.

else {
if CurrentWeatherMod &gt;= 90 {
if mWorldController.NextWeatherSound = "hail" {
ex_audio_set_volume("hail", (0.2 + ((0.2 / 90) * CurrentWeatherMod) + ((0.1 / 90) * NextWeatherMod)) - (0.2 * mBehavioursReactive.SleepingActive), 0)
} else {
ex_audio_set_volume("hail", (0.2 + ((0.2 / 90) * CurrentWeatherMod)) - (0.2 * mBehavioursReactive.SleepingActive), 0)
}
} else if CurrentWeatherMod &lt; 90 {
if mWorldController.NextWeatherSound = "hail" {
ex_audio_set_volume("hail", (0.2 - ((0.2 / 90) * (CurrentWeatherMod - 90)) + ((0.1 /90) * (NextWeatherMod / 2))) - (0.2 * mBehavioursReactive.SleepingActive), 0)
} else {
ex_audio_set_volume("hail", (0.2 - ((0.2 / 90) * (CurrentWeatherMod - 90))) - (0.2 * mBehavioursReactive.SleepingActive), 0)
}
}
}
break;

default:
break;
}

//Next (Only If Not Part Of Current Sound)

switch mWorldController.NextWeatherSound {

case "lightrain":
if mWorldController.CurrentWeatherSound != "lightrain" {
//If the sound isn't already playing, set initial volume to 0 and begin playing sound.

if ex_audio_is_playing("lightrain") = false {
ex_audio_set_volume("lightrain",0,0)
ex_audio_play("lightrain", true)
} 

//Set volume programatically depending on current weather mod: before 50%, it is going up; after 50%, its going down.

else {
ex_audio_set_volume("lightrain", (0 + ((0.1 / 180) * NextWeatherMod)) - (0.2 * mBehavioursReactive.SleepingActive), 0)
}
}
break;


case "heavyrain":
if mWorldController.CurrentWeatherSound != "heavyrain" {
//If the sound isn't already playing, set initial volume to 0 and begin playing sound.

if ex_audio_is_playing("heavyrain") = false {
ex_audio_set_volume("heavyrain",0,0)
ex_audio_play("heavyrain", true)
} 

//Set volume programatically depending on current weather mod: before 50%, it is going up; after 50%, its going down.

else {
ex_audio_set_volume("HeavheavyrainyRainSound", (0 + ((0.1 / 180) * NextWeatherMod))  - (0.2 * mBehavioursReactive.SleepingActive), 0)
}
}
break;

case "hail":
if mWorldController.CurrentWeatherSound != "hail" {
//If the sound isn't already playing, set initial volume to 0 and begin playing sound.

if ex_audio_is_playing("hail") = false {
ex_audio_set_volume("hail",0,0)
ex_audio_play("hail", true)
} 

//Set volume programatically depending on current weather mod: before 50%, it is going up; after 50%, its going down.

else {
ex_audio_set_volume("hail", (0 + ((0.1 / 180) * NextWeatherMod)) - (0.2 * mBehavioursReactive.SleepingActive), 0)
}
}

break;

default:
break;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
