<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCaulLip</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>mCaulParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

event_inherited()
OriginalX = x
OriginalY = y
OriginalXScale = image_xscale
OriginalYScale = image_yscale
XDifference = 0
YDifference = 0
XScaleDifference = 0
YScaleDifference = 0

depth = CaulLayer - 0.04

Redness = 0
AgonyRedness = 0
TouchingTwitch = false
LoweringSound = false
VolumeRaise = false

LipSurface = surface_create(sprite_width,sprite_height)
SurfaceX = 0
SurfaceY = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Positions &amp; Scales &amp; Clampings

event_inherited()

if instance_exists(oCaulJug) {
x = OriginalX + oCaulJug.ShakeDiff
y = OriginalY - MouthYDiff + ((27.5 / 100) * oMouthCentre.PercentageDiff) + ((27.5 / 100) * oCaulJug.EngorgedPercentage)
image_xscale = OriginalXScale + ((0.015 / 100) * oMouthCentre.PercentageDiff) + ((0.015 / 100) * oCaulJug.EngorgedPercentage)
image_yscale = OriginalYScale + ((0.015 / 100) * oMouthCentre.PercentageDiff) + ((0.015 / 100) * oCaulJug.EngorgedPercentage)
}
TotalRedness = Redness + ((0.5 / 80) * oCaulLiquid.LiquidHeight)  + ((0.5 / 100) * mDriveCollectionMaster.RitualTolerance)
AgonyRedness = clamp(AgonyRedness,0,0.5)
TotalRedness = clamp(TotalRedness,0,1)
XDifference = x - OriginalX
YDifference = y - OriginalY
SurfaceX = x - (sprite_width / 2)
SurfaceY = y - (sprite_height / 2)
XScaleDifference = image_xscale - OriginalXScale
YScaleDifference = image_yscale - OriginalYScale
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Redness Going Up If Touched

if place_meeting(x,y,mFinger) and AmountForward(80) and instance_exists(mDebug) = false {
Redness += 0.01
} else {
if Redness &gt; 0 {
Redness -= 0.001
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cutting

if place_meeting(x,y,mFinger) and AmountForward(80)
and mInterfaceController.CurrentHandUse = "knife" {
CreateParticleSplash(mouse_x,mouse_y,
mFinger.sprite_width,
ps_shape_ellipse,
ps_distr_gaussian,
BloodLiquidColour,
10,
20,
0.05,
0.1,
0,
360,
30,
80,
0.5,
10
)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rubbing For Sound

//If touching the lip and dragging...

BaseLipPitch = 1 + ((0.1 / 73) * oCaulLiquid.LiquidY)

if position_meeting(mouse_x,mouse_y,self) and AmountForward(80)
and mInterfaceController.DragBegun = true and instance_exists(mDebug) = false {
LoweringSound = false
ex_audio_set_position("liptouch",mouse_x,mouse_y,1)

ex_audio_set_pitch("liptouch",BaseLipPitch,0)
if ex_audio_is_playing("liptouch") = false {
ex_audio_play("liptouch",1)
}

if VolumeRaise = false {
ex_audio_set_volume("liptouch",0.00005,80)
VolumeRaise = true
}

} else {
VolumeRaise = false
if LoweringSound = false {
ex_audio_set_volume("liptouch",0,200)
LoweringSound = true
}
if ex_audio_get_volume("liptouch") &lt;= 0 {
ex_audio_stop("liptouch")
}
}






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self And Shadow And Surface

draw_sprite_ext(sCaulLip,1,x,y + 15,image_xscale,image_yscale,image_angle,c_black,0.4)
draw_self()
draw_sprite_ext(sCaulLipRed,1,x,y,image_xscale,image_yscale,image_angle,c_white,TotalRedness)

if (!surface_exists(LipSurface)) { LipSurface = surface_create(sprite_width,sprite_height) }
CleanableSurface(oCaulLip.LipSurface,oCaulLip,1)
draw_surface_ext(LipSurface,x - (sprite_width / 2),y - (sprite_height / 2),1 + XScaleDifference,1 + YScaleDifference,0,c_white,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
