<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

//---------------------Initial Values

depth = MetaLayer
x = ControllerObjectX
y = ControllerObjectY

//---------------------Mood Setup

BaseGoodMood = 0
BaseBadMood = 75
GoodMoodPercentageActivation = 0
BadMoodPercentageActivation = 75
TotalCurrentMood = -75

//---------------------Emotions Setup

//Emotion Variables

HappyValence = 1
HappyBaseActivation = 0
HappyActivation = 0
HappyGradual = false
HappyGradualDir = "non"
HappyGradualAmount = 0
HappyGradualRate = 0

SadValence = -1
SadBaseActivation = 0//40
SadActivation = 0
SadGradual = false
SadGradualDir = "non"
SadGradualAmount = 0
SadGradualRate = 0

AngerValence = -1
AngerBaseActivation = 0//30
AngerActivation = 0
AngerGradual = false
AngerGradualDir = "non"
AngerGradualAmount = 0
AngerGradualRate = 0

SurpriseValence = 0
SurpriseBaseActivation = 0
SurpriseActivation = 0
SurpriseGradual = false
SurpriseGradualDir = "non"
SurpriseGradualAmount = 0
SurpriseGradualRate = 0


FearValence = -1
FearBaseActivation = 0
FearActivation = 0
FearGradual = false
FearGradualDir = "non"
FearGradualAmount = 0
FearGradualRate = 0

ShameValence = -1
ShameBaseActivation = 0
ShameActivation = 0
ShameGradual = false
ShameGradualDir = "non"
ShameGradualAmount = 0
ShameGradualRate = 0

BaseGoodMoodDecayRate = 1000                
BaseBadMoodDecayRate = 900

//Good Mood Decay Alarm
alarm[1] = BaseGoodMoodDecayRate
//Bad Mood Decay Alarm
alarm[2] = BaseBadMoodDecayRate
//Emotion Decay Alarm
alarm[3] = 2
//Mods Alarm
alarm[4] = 0

GoodMoodWeatherMod = 0
BadMoodWeatherMod = 0
HappyWeatherMod = 0
SadWeatherMod = 0
AngerWeatherMod = 0
FearWeatherMod = 0
ShameWeatherMod = 0
GoodMoodMoonMod = 0
BadMoodMoonMod = 0
HappyMoonMod = 0
SadMoonMod = 0
AngerMoonMod = 0
FearMoonMod = 0
HappySeasonMod = 0
SadSeasonMod = 0
ShameSeasonMod = 0
FearSeasonMod = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Work Out Mood &amp; Emotion Mods

switch mWorldController.ThisPeriodWT {
//Clear Night
case 0:
GoodMoodWeatherMod = 0
BadMoodWeatherMod = 0
HappyWeatherMod = 0
SadWeatherMod = 0
AngerWeatherMod = 0
FearWeatherMod = 0
ShameWeatherMod = 0
break;

//Sunny
case 1:
GoodMoodWeatherMod = 0
BadMoodWeatherMod = 0
HappyWeatherMod = 0
SadWeatherMod = 0
AngerWeatherMod = 0
FearWeatherMod = 0
ShameWeatherMod = 0
break;

//Partly Cloudy (Night)
case 2:
GoodMoodWeatherMod = 10
BadMoodWeatherMod = -10
HappyWeatherMod = 10
SadWeatherMod = -5
AngerWeatherMod = -5
FearWeatherMod = -5
ShameWeatherMod = -5
break;

//Partly Cloudy (Day)
case 3:
GoodMoodWeatherMod = 10
BadMoodWeatherMod = -10
HappyWeatherMod = 10
SadWeatherMod = -10
AngerWeatherMod = -10
FearWeatherMod = -10
ShameWeatherMod = -10
break;

//Mist
case 5:
GoodMoodWeatherMod = 15
BadMoodWeatherMod = -15
HappyWeatherMod = 15
SadWeatherMod = -10
AngerWeatherMod = -10
FearWeatherMod = -10
ShameWeatherMod = -10
break;

//Fog
case 6:
GoodMoodWeatherMod = 15
BadMoodWeatherMod = -15
HappyWeatherMod = 15
SadWeatherMod = -10
AngerWeatherMod = -10
FearWeatherMod = -10
ShameWeatherMod = -10
break;

//Cloudy
case 7:
GoodMoodWeatherMod = 20
BadMoodWeatherMod = -20
HappyWeatherMod = 20
SadWeatherMod = -10
AngerWeatherMod = -10
FearWeatherMod = -10
ShameWeatherMod = -10
break;

//Overcast
case 8:
GoodMoodWeatherMod = 20
BadMoodWeatherMod = -20
HappyWeatherMod = 20
SadWeatherMod = -10
AngerWeatherMod = -10
FearWeatherMod = -10
ShameWeatherMod = 10
break;

//Light Rain
case 9:
case 10:
case 11:
case 12:
GoodMoodWeatherMod = -10
BadMoodWeatherMod = 10
HappyWeatherMod = -10
SadWeatherMod = 0
AngerWeatherMod = 20
FearWeatherMod = 0
ShameWeatherMod = 0
break;

//Heavy Rain
case 13:
case 14:
case 15:
GoodMoodWeatherMod = -20
BadMoodWeatherMod = 20
HappyWeatherMod = -20
SadWeatherMod = 10
AngerWeatherMod = 30
FearWeatherMod = 0
ShameWeatherMod = 0
break;

//Sleet
case 16:
case 17:
case 18:
GoodMoodWeatherMod = -10
BadMoodWeatherMod = 10
HappyWeatherMod = -10
SadWeatherMod = 0
AngerWeatherMod = 20
FearWeatherMod = 10
ShameWeatherMod = 0
break;

//Hail
case 19:
case 20:
case 21:
GoodMoodWeatherMod = -10
BadMoodWeatherMod = 10
HappyWeatherMod = -10
SadWeatherMod = 0
AngerWeatherMod = 20
FearWeatherMod = 10
ShameWeatherMod = 0
break;

//Light Snow
case 22:
case 23:
case 24:
GoodMoodWeatherMod = -10
BadMoodWeatherMod = 10
HappyWeatherMod = -10
SadWeatherMod = 10
AngerWeatherMod = 10
FearWeatherMod = 10
ShameWeatherMod = 0
break;

//Heavy Snow
case 25:
case 26:
case 27:
GoodMoodWeatherMod = -20
BadMoodWeatherMod = 20
HappyWeatherMod = -20
SadWeatherMod = 10
AngerWeatherMod = 10
FearWeatherMod = 10
ShameWeatherMod = 0
break;

//Thunder
case 28:
case 29:
case 30:
GoodMoodWeatherMod = -30
BadMoodWeatherMod = 30
HappyWeatherMod = -30
SadWeatherMod = 10
AngerWeatherMod = 0
FearWeatherMod = 30
ShameWeatherMod = 0
break;
}


switch mWorldController.TonightMoonPhase {

case "Full Moon":
GoodMoodMoonMod = 20
BadMoodMoonMod = -20
HappyMoonMod = 0
SadMoonMod = 0
AngerMoonMod = 0
FearMoonMod = 0
break;

case "New Moon":
GoodMoodMoonMod = -20
BadMoodMoonMod = 20
HappyMoonMod = 0
SadMoonMod = 0
AngerMoonMod = 20
FearMoonMod = 0
break;

case "Waning Gibbous":
GoodMoodMoonMod = -20
BadMoodMoonMod = 20
SadMoonMod = 0
AngerMoonMod = 0
FearMoonMod = 30
break;

case "Waxing Gibbous":
GoodMoodMoonMod = -20
BadMoodMoonMod = 20
SadMoonMod = 0
AngerMoonMod = 0
FearMoonMod = 30
break;

case "Waning Crescent":
GoodMoodMoonMod = 0
BadMoodMoonMod = 0
SadMoonMod = 30
AngerMoonMod = 0
FearMoonMod = 0
break;

case "Waxing Crescent":
GoodMoodMoonMod = 0
BadMoodMoonMod = 0
SadMoonMod = 30
AngerMoonMod = 0
FearMoonMod = 0
break;

case "First Quarter":
GoodMoodMoonMod = 20
BadMoodMoonMod = -20
SadMoonMod = 0
AngerMoonMod = 0
FearMoonMod = 0
break;

case "Third Quarter":
GoodMoodMoonMod = 20
BadMoodMoonMod = -20
SadMoonMod = 0
AngerMoonMod = 0
FearMoonMod = 0
break;
}

switch mWorldController.CurrentTOY {
case "Spring":
HappySeasonMod = 0
SadSeasonMod = 0
ShameSeasonMod = 0
FearSeasonMod = 0
break;

case "Summer":
HappySeasonMod = -20
SadSeasonMod = 0
ShameSeasonMod = 30
FearSeasonMod = 0
break;

case "Autumn":
HappySeasonMod = 0
SadSeasonMod = 20
ShameSeasonMod = 0
FearSeasonMod = 20
break;

case "Winter":
HappySeasonMod = 20
SadSeasonMod = -30
ShameSeasonMod = 0
FearSeasonMod = 20
break;
}

alarm[4] = 60

alarm[4] = 600
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decay All Emotions By Their Rate

HappyBaseActivation -= HappyDecayRate
SadBaseActivation -= SadDecayRate
AngerBaseActivation -= AngerDecayRate
SurpriseBaseActivation -= SurpriseDecayRate
FearBaseActivation -= FearDecayRate
ShameBaseActivation -= ShameDecayRate

alarm[3] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bad Mood Decaying

BaseBadMood -= 1

alarm[2] = BadMoodDecayRate
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Good Mood Decaying

BaseGoodMood -= 1

alarm[1] = GoodMoodDecayRate
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mood Modifiers

GoodMoodPercentageActivation = BaseGoodMood + GoodMoodWeatherMod - (mWorldController.LightLevelInRL / 10) + (mWorldController.LightLevelInMB * 10) + GoodMoodMoonMod - (mCreatureController.Dirt / 20) - (mWeatherSubController.SimpleWindS / 3)
BadMoodPercentageActivation = BaseBadMood + BadMoodWeatherMod + BadMoodMoonMod + (mWorldController.LightLevelInRL / 10) - (mWorldController.LightLevelInMB * 10) + (mCreatureController.Dirt / 20) + (mWeatherSubController.SimpleWindS / 3)




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Working Out The Current Total Mood

TotalCurrentMood = clamp(TotalCurrentMood,0,100)

BadMoodAdjustment = BadMoodPercentageActivation / 2
GoodMoodAdjustment = GoodMoodPercentageActivation / 2

TotalCurrentMood = 50 - BadMoodAdjustment + GoodMoodAdjustment

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Adapting The Decay Rates Of Moods
//(Other factors to be added as features added.

GoodMoodDecayRateMod = 0

//Good mood decay greater if in pain.

+ mCreatureController.Pain 

//Good mood decay greater if stressed.

+ mCreatureController.Stress 

//Good mood decay greater if tired.

+ mCreatureController.Tiredness

//Good mood decay lesser if lusty.

+ mCreatureController.Lust

//Good mood decay greater if thirsty.

+ mCreatureController.Thirst

//Good mood decay lesser if warmer.

- mCreatureController.Temperature

//Good mood decay greater if dirty.

- mCreatureController.Dirt / 2

//Good mood decay greater if windy.

- mWeatherSubController.SimpleWindS * 10

+ GoodMoodWeatherMod

+ GoodMoodMoonMod


//Good mood decay affected by emotions.

- HappyActivation
+ SadActivation / 100
+ AngerActivation / 100
+ FearActivation / 100


//Mist or fog decays more, cloud decays less, clear decays more, rain decays more,
//heavy rain decays more, sleet more, snow more, heavy snow more, thunder more.

//Good mood decay lesser as closer to full moon.


GoodMoodDecayRate = BaseGoodMoodDecayRate + GoodMoodDecayRateMod


BadMoodDecayRateMod = 0

//Bad mood decay greater when lusty.

+ mCreatureController.Lust

//Bad mood decay greater when warmer.

+ mCreatureController.Temperature

//Bad mood decay affected by emotions.

+ HappyActivation
- SadActivation / 100
- AngerActivation / 100
- FearActivation / 100
- ShameActivation / 100

//Bad Mood Decay lesser if dirty.

+ (mCreatureController.Dirt / 2)

//Bad mood decay lesser if windy.

+ (mWeatherSubController.SimpleWindS * 10)

+ BadMoodWeatherMod

+ BadMoodMoonMod

if mCreatureController.Stress &lt; 30 {
StressMod = 40
} else {
StressMod = 0
}

if mCreatureController.Tiredness &lt; 30 {
TirednessMod = 40
} else {
TirednessMod = 0
}

if mCreatureController.Thirst &lt; 30 {
ThirstMod = 40
} else {
ThirstMod = 0
}

if mCreatureController.Pain &lt; 30 {
PainMod = 2
} else {
PainMod = 0
}

BadMoodDecayRate = BaseBadMoodDecayRate + BadMoodDecayRateMod - PainMod - TirednessMod - ThirstMod - StressMod
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Emotions Decaying
//Emotions decaying are affected by pain, tiredness, stress, aliveness, and other emotions and current mood.

if mBehavioursReactive.Sleeping = true and 
mBehavioursReactive.Dreaming = true 
{
HappyDecayRate = 0.05
SadDecayRate = 0.5
AngerDecayRate = 0.7
SurpriseDecayRate = 2
FearDecayRate = 0.08
ShameDecayRate = 0.08 
} else {
HappyDecayRate = HappyDecayRateModifiers()
SadDecayRate = SadDecayRateModifiers()
AngerDecayRate = AngerDecayRateModifiers()
SurpriseDecayRate = SurpriseDecayRateModifiers()
FearDecayRate = FearDecayRateModifiers()
ShameDecayRate = ShameDecayRateModifiers()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Emotion Modifiers

HappyActivation = HappyBaseActivation 
+ HappyWeatherMod - (mWorldController.LightLevelInRL / 10) + (mWorldController.LightLevelInMB * 10) + HappySeasonMod + mDriveCollectionMaster.RitualInternalMod - mDriveCollectionMaster.SatMod

//- (mCreatureController.Tiredness / 10) - (mCreatureController.Pain / 10) - (mCreatureController.Stress / 10) + ((100 - mCreatureController.Alive) / 10) + (mCreatureController.Trust / 10) + (mCreatureController.BaseSubIntent * 10)

SadActivation = SadBaseActivation + SadWeatherMod + SadMoonMod + SadSeasonMod - mDriveCollectionMaster.RitualInternalMod 
//+ (mCreatureController.Pain / 10) - (mCreatureController.BaseSubIntent * 10)

AngerActivation = AngerBaseActivation + AngerWeatherMod + AngerMoonMod + (mCreatureController.Dirt / 10) + ((20 / 10000) * mCreatureController.LustIrriTimer) - mDriveCollectionMaster.RitualInternalMod + mDriveCollectionMaster.SatMod
//+ (mCreatureController.Tiredness / 10) + (mCreatureController.Pain / 10) + (mCreatureController.Stress / 10) - ((100 - mCreatureController.Alive) / 10) + (mCreatureController.Resistance / 10) + (mCreatureController.Trust / 10) 
//- (mCreatureController.BaseSubIntent * 10)

FearActivation = FearBaseActivation + mWorldController.NightMod + FearWeatherMod + FearMoonMod + FearSeasonMod - (mWorldController.LightLevelInMB * 10) - mDriveCollectionMaster.RitualInternalMod
//- (mCreatureController.Tiredness / 10) + (mCreatureController.Pain / 10) - (mCreatureController.Trust / 10)
//- (mCreatureController.BaseSubIntent * 10)

ShameActivation = ShameBaseActivation + (mCreatureController.Dirt / 5) + ShameSeasonMod + ShameWeatherMod - mDriveCollectionMaster.RitualInternalMod
//+ (mCreatureController.Pain / 10) - (mCreatureController.Resistance / 10)

SurpriseActivation = SurpriseBaseActivation - mDriveCollectionMaster.RitualInternalMod
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keeping Moods &amp; Emotions Within Limits

BadMoodPercentageActivation = clamp(BadMoodPercentageActivation,0,100)
GoodMoodPercentageActivation = clamp(GoodMoodPercentageActivation,0,100)

HappyBaseActivation = clamp(HappyBaseActivation,0,100)
HappyActivation = clamp(HappyActivation,0,100)

SadBaseActivation = clamp(SadBaseActivation,0,100)
SadActivation = clamp(SadActivation,0,100)

AngerBaseActivation = clamp(AngerBaseActivation,0,100)
AngerActivation = clamp(AngerActivation,0,100)

SurpriseBaseActivation = clamp(SurpriseBaseActivation,0,100)
SurpriseActivation = clamp(SurpriseActivation,0,100)

FearBaseActivation = clamp(FearBaseActivation,0,100)
FearActivation = clamp(FearActivation,0,100)

ShameBaseActivation = clamp(ShameBaseActivation,0,100)
ShameActivation = clamp(ShameActivation,0,100)


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Raise Or Lower Or Currently 'Gradual' Emotions

if HappyGradual = true {
if HappyGradualAmount &gt; 0 {
if HappyGradualDir = "up" {
HappyBaseActivation += HappyGradualRate
} else if HappyGradualDir = "down" {
HappyBaseActivation -= HappyGradualRate
}
HappyGradualAmount -= HappyGradualRate
} else if HappyGradualAmount &lt;= 0 {
HappyGradualDir = "none"
HappyGradualAmount = 0
HappyGradualRate = 0
HappyGradual = false
}
}

if SadGradual = true {
if SadGradualAmount &gt; 0 {
if SadGradualDir = "up" {
SadBaseActivation += SadGradualRate
} else if SadGradualDir = "down" {
SadBaseActivation -= SadGradualRate
}
SadGradualAmount -= SadGradualRate
} else if SadGradualAmount &lt;= 0 {
SadGradualDir = "none"
SadGradualAmount = 0
SadGradualRate = 0
SadGradual = false
}
}

if AngerGradual = true {
if AngerGradualAmount &gt; 0 {
if AngerGradualDir = "up" {
AngerBaseActivation += AngerGradualRate
} else if AngerGradualDir = "down" {
AngerBaseActivation -= AngerGradualRate
}
AngerGradualAmount -= AngerGradualRate
} else if AngerGradualAmount &lt;= 0 {
AngerGradualDir = "none"
AngerGradualAmount = 0
AngerGradualRate = 0
AngerGradual = false
}
}

if SurpriseGradual = true {
if SurpriseGradualAmount &gt; 0 {
if SurpriseGradualDir = "up" {
SurpriseBaseActivation += SurpriseGradualRate
} else if SurpriseGradualDir = "down" {
SurpriseBaseActivation -= SurpriseGradualRate
}
SurpriseGradualAmount -= SurpriseGradualRate
} else if SurpriseGradualAmount &lt;= 0 {
SurpriseGradualDir = "none"
SurpriseGradualAmount = 0
SurpriseGradualRate = 0
SurpriseGradual = false
}
}

if FearGradual = true {
if FearGradualAmount &gt; 0 {
if FearGradualDir = "up" {
FearBaseActivation += FearGradualRate
} else if FearGradualDir = "down" {
FearBaseActivation -= FearGradualRate
}
FearGradualAmount -= FearGradualRate
} else if FearGradualAmount &lt;= 0 {
FearGradualDir = "none"
FearGradualAmount = 0
FearGradualRate = 0
FearGradual = false
}
}

if ShameGradual = true {
if ShameGradualAmount &gt; 0 {
if ShameGradualDir = "up" {
ShameBaseActivation += ShameGradualRate
} else if ShameGradualDir = "down" {
ShameBaseActivation -= ShameGradualRate
}
ShameGradualAmount -= ShameGradualRate
} else if ShameGradualAmount &lt;= 0 {
ShameGradualDir = "none"
ShameGradualAmount = 0
ShameGradualRate = 0
ShameGradual = false
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
