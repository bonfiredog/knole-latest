<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSigilMoleSmall1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>mMoleParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

OriginalX = x
OriginalY = y
Status = "whole"
ZoomedOutSprite = choose(sSigilMoleSmall1,sSigilMoleSmall2,sSigilMoleSmall3,sSigilMoleSmall4,sSigilMoleSmall5,sSigilMoleSmall6,sSigilMoleSmall7,sSigilMoleSmall8)
ZoomedOutDirection = random(360)
direction = 0
ZoomedOutXScale = image_xscale
ZoomedOutYScale = image_yscale
ZoomedInScale = random_range(0.02, 0.05)

ZoomedInSprite = sTempleMole1
switch ZoomedInSprite {
case sTempleMole1:
Red = sTempleMoleRed1
break;
case sTempleMole2:
Red = sTempleMoleRed2
break;
case sTempleMole3:
Red = sTempleMoleRed3
break;
}

ZoomedInDirection = 0
UnoccupiedRotation = random(360)

Touched = false
TouchedSizeMod = 0
Redness = 0
Occupied = true
ID = 0
ChangeMultiplier = 0
XDir = 0
depth = MoleLayer

CutAmount = 0
Cutting = false

ShakeModX = 0
ShakeDirection = "out"
ShakeTimer = 0
Ripped = false
DripTimer = irandom_range(30,120)

NumberPresent = 0
ThresholdNumber = 1
WellTimer = irandom_range(80,400)
CandidateLiquidFound = false

XDifference = 0
YDifference = 0
UpAmount = 60

BaseRedness = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cutting Out


//Cutting Begin

if position_meeting(mouse_x,mouse_y,self)
and instance_exists(mDebug) = false
and mInterfaceController.CurrentHandUse = "knife"
and mInterfaceController.CurrentView = MicroView
and Occupied = true
and mInterfaceController.DragStatus = "dragging"
and mInterfaceController.DragSpeed &gt; 10
{
CreateParticleSplash(x,y,3,ps_shape_ellipse,ps_distr_gaussian,DebugRedTextColour,5,15,0.04,0.07,0,360,70,125,0.5,30)
CreateStain(10,0,360,5,10,0.2,0.3,0.5,0.05,0.06,BloodLiquidColour,x,y)
WriteToLog("Cut out sigil mole.")
Ripped = true
Occupied = false
ShakeModX = 0
ShakeModY = 0
ShakeModMod = 0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Being Touched

if Occupied = true {
if Touched = true {
if mCreatureController.Alive &gt; 0 {

//Redness go up
if BaseRedness &lt; 0.5 {
BaseRedness += 0.03
}

//SizeMod goes up

if TouchedSizeMod &lt; 0.01 {
TouchedSizeMod += 0.0003
}


//Shaking
if ShakeTimer &gt; 0 {
ShakeTimer -= 1
} else if ShakeTimer &lt;= 0 {
if ShakeDirection = "out" {
ShakeDirection = "in" 
ShakeTimer = 2
} else if ShakeDirection = "in" {
ShakeDirection = "out"
ShakeTimer = 2
}
}

if ShakeDirection = "out" {
ShakeModX -= 0.3
} else if ShakeDirection = "in" {
ShakeModX += 0.3
}

}
} else if Touched = false and Cutting = false {

//If not touched, redness go down and reset values
ShakeModX = 0
ShakeTimer = 0
if BaseRedness &gt; 0 {
BaseRedness -= 0.03
}
if TouchedSizeMod &gt; 0 {
TouchedSizeMod -= 0.0003
}

}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///In Line With Head

x = OriginalX + ShakeModX
y = OriginalY

Redness = BaseRedness
BaseRedness = clamp(BaseRedness,0,1)

if Occupied = true {
sprite_index = ZoomedInSprite
image_xscale = ZoomedInScale + TouchedSizeMod 
image_yscale = ZoomedInScale + TouchedSizeMod
} else if Occupied = false {
if mInterfaceController.CurrentView = MicroView {
sprite_index = sSigilMoleBottom
image_xscale = ZoomedInScale - 0.01 
image_yscale = ZoomedInScale - 0.01 
}
}

ChangeSpriteWithZoom(ZoomedOutXScale,ZoomedOutYScale,ZoomedInScale + TouchedSizeMod,ZoomedInScale + TouchedSizeMod)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing Sprite Depending On View
if Occupied = true {
ChangeDrawingWithZoom(ZoomedOutSprite,ZoomedInSprite,UnoccupiedRotation)
} else {
draw_self()
}

if mInterfaceController.CurrentView = MicroView and Occupied = true {
draw_sprite_ext(Red,0,x,y,ZoomedInScale + TouchedSizeMod,ZoomedInScale + TouchedSizeMod,0,DebugRedTextColour,Redness)
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
