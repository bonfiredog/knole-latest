<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initial Values

depth = MetaLayer
x = ControllerObjectX
y = ControllerObjectY

//--------------- Global Variables
BaseAlive = 100
BaseTiredness = 0
BasePain = 0
BaseThirst = 0
BaseLust = 0
BaseStress = 0
BaseTemperature = 0

EarsPulled = 0

Alive = 100
Tiredness = BaseTiredness
Pain = BasePain
Thirst = BaseThirst
Temperature = BaseTemperature
Lust = BaseLust
Stress = BaseStress

//Create Internal Systems SubControllers

//Concepts
BaseTrust = 50
Trust = 50
BaseSubIntent = 0
BaseResistance = 30
Resistance = 30
CloseToAnne = 50
BaseAnneIntent = -1
AnneIntent = -1
Triad = 0
Dirt = 0

//Inputs 
//-------

//Face Detection

Faces = "0"
PreviousFaces = "0"

//------ Variables For Recognitions

global.LatestRecognisedPhrase = "nothing"
global.LastRecognisedPhrase = "nothing"

CurrentEmotionX = "none"
CurrentEmotionY = "none"
CurrentEmotionW = "none"
CurrentEmotionH = "none"
CurrentEmotionMain = "none"
CurrentEmotionSecondary = "none"

CurrentColourForeground1 = "none"
CurrentColourBackground1 = "none"
CurrentColourAccentR1 = 0
CurrentColourAccentG1 = 0
CurrentColourAccentB1 = 0

CurrentColourForeground2 = "none"
CurrentColourBackground2 = "none"
CurrentColourAccentR2 = 0
CurrentColourAccentG2 = 0
CurrentColourAccentB2 = 0

MotionDetected1 = false
MotionDetected2 = false
MotionReact1 = false
MotionReact2 = false
MotionCounter1 = 0
MotionCounter2 = 0

OCRResult = "none"

Hearing = 100

alarm[4] = 700

CurrentVisionTags1 = ds_list_create()
ds_list_add(CurrentVisionTags1,"none")

CurrentVisionTags2 = ds_list_create()
ds_list_add(CurrentVisionTags2,"none")


alarm[0] = 60
LatestPhraseTimer = 0

WenMax = 700
BaseWenRateLower = 2500
WenRateLower = 2500
BaseWenRateHigher = 3000
WenRateHigher = 3000
alarm[1] = 600

HeardSound = false
HeardLoudSound = false
HeardLoudSoundConf = false
HeardSoundTimer = 0
HeardLoudSoundReset = false
HeardSoundReset = false

PewterWeight = 0

HeardSoundConf = false
HighVolumeTimer = 0
NewTouch = false
NewTouchConf = false
NewTouchTimer = 0

HairDropRate = 80000
alarm[2] = HairDropRate

alarm[3] = 50

NewPhrase = false
CankerPullTimer = 0


PartBreathSys = part_system_create()

//Define Different Particles Based On Liquid Type
BreathPart = part_type_create()
part_type_shape(BreathPart,pt_shape_cloud)
part_type_size(BreathPart,0.4,1.5,0.2,0)
part_type_colour1(BreathPart,make_colour_rgb(255,255,204))
part_type_alpha2(BreathPart,1,0)
part_type_speed(BreathPart,1,3,0,0)
part_type_direction(BreathPart,0,359,0,0)
part_type_gravity(BreathPart,0.01,90)
part_type_blend(BreathPart,0)
part_type_life(BreathPart,20,30)

CoughPart = part_type_create()
part_type_sprite(CoughPart,sSleet,0,0,0)
part_type_size(CoughPart,0.1,0.2,0.01,0)
part_type_alpha1(CoughPart,1)
part_type_speed(CoughPart,40,80,0,0)
part_type_direction(CoughPart,0,359,0,0)
part_type_gravity(CoughPart,0.001,90)
part_type_blend(CoughPart,0)
part_type_life(CoughPart,5,10)
part_type_orientation(CoughPart,0,359,0,0,true)


BreathEmit = part_emitter_create(PartBreathSys)

MotionCounter = 0
MotionCounter2 = 0

TouchingFavouredPlace = false
TouchingUnfavouredPlace = false

CryingRate = 5000
alarm[4] = CryingRate

BTLower = 40
BTHigher = 120
TOYRate = 0

alarm[3] = 60

FaceFile = 5
ZeroFaceCount = 0
RequestMade = false

PreviousEmotion = "none"
NewPhrase = false
MoveSurpriseTimer1 = 0
MoveSurpriseTimer2 = 0
FaceCooldown = 0

HornsPulled = 0

Taps = 0
CankerTaps = 0
FurTaps = 0

HornTouchTimer = 0

LERipped = false
RERipped = false
TimeSinceLastMotion = 0
NewTouchReacted = false

LustIrriTimer = 0

HearingMB = 0
CloseToAnneTemp = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Thirst Gradually Goes Up Throughout Day
if Alive &gt; 0 {
BaseThirst = (100 / 24) * current_hour
}

alarm[4] = 700
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Internal State Natural Decay

if Alive &gt; 0 {
BasePain -= 0.001 // (over course of day)
BaseLust -= 0.03 // over course of hour)
BaseStress -= 0.03 // over course of hour
BaseResistance -= 0.06 // over course of half hour)
BaseSubIntent += 0.00003
}

alarm[3] = fps
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fur Shedding

CandidateFur = noone
FurShedding()
alarm[2] = HairDropRate
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wen Spawn

if Alive &gt; 0 {
Location = choose("grave","finger","random","finger",)

switch Location {
case "grave":
Len = random_range(230,430)
Dir = random(360)
PosX = oCellarBase.x + lengthdir_x(Len,Dir)
PosY = oCellarBase.y + lengthdir_y(Len,Dir)
instance_create(PosX,PosY,oWen)
break;

case "random":
PosX = irandom_range(oHead1.x - (sprite_width /2), oHead1.x + (sprite_width / 2))
PosY = irandom_range(oHead1.y - (sprite_height / 2), oHead3.y + (sprite_height / 2))

while (position_meeting(PosX,PosY,mCreatureParent) = false
or position_meeting(PosX,PosY,mTopOfHeadTemplate)
or position_meeting(PosX,PosY,oNose1)
or position_meeting(PosX,PosY,oEyeballRight)
or position_meeting(PosX,PosY,oEyeballLeft)
or position_meeting(PosX,PosY,oCheekLeft)
or position_meeting(PosX,PosY,oCheekRight)
or position_meeting(PosX,PosY,oMouthCentre)
or position_meeting(PosX,PosY,oMouthTop)
or position_meeting(PosX,PosY,oMouthLeft)
or position_meeting(PosX,PosY,oMouthRight)
) {
PosX = irandom_range(oHead1.x - (sprite_width /2), oHead1.x + (sprite_width / 2))
PosY = irandom_range(oHead1.y - (sprite_height / 2), oHead3.y + (sprite_height / 2))
}
ClusterOrSingle = choose(-1,-1,1)
if ClusterOrSingle = -1 {
instance_create(PosX,PosY,oWen)
} else if ClusterOrSingle = 1 {
GenerateWenCluster(irandom_range(10,40),PosX,PosY,irandom_range(5,15))
}
break;

case "finger":
GenerateWenRing(irandom_range(25,45),mInterfaceController.LastPressX,mInterfaceController.LastPressY,irandom_range(20,40))
break;
}
}

alarm[1] = random_range(WenRateLower,WenRateHigher)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Face Detection

if Alive &gt; 0 and EyesNotClosed() and Seen() and
(mInterfaceController.CurrentView = MacroView and mBehavioursDeliberative.PercentForward &gt; 0
or 
(mInterfaceController.CurrentView = MicroView and (PlayerViewOverObject(oEyeballLeft) or PlayerViewOverObject(oEyeballRight))
))
and mDriveCollectionMaster.Dozing = false
and mBehavioursReactive.Sleeping = false
and mBehavioursDeliberative.PercentForward &gt; 10
and mBehavioursReactive.YawningActive = false
and mBehavioursDeliberative.XYMove = false
{
DetectFaces()
}

alarm[0] = 10
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hearing Noise


if Alive &gt; 0 {

if HeardSound = true {
if HeardSoundReset = false {
HearNoiseReactions()
}
HeardSoundReset = true
HeardSound = false
}


if HeardSoundReset = true {

if HeardSoundTimer &gt; 0 {
HeardSoundTimer -= 1
}

if HeardSoundTimer &lt;= 0 {
HeardSoundTimer = 0
HeardSound = false
HeardSoundConf = false
HeardSoundReset = false
LatestMicVolume = 0
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hearing Loud Noise

if Alive &gt; 0 {

if HeardLoudSound = true {
if HeardLoudSoundReset = false {
HearLoudNoiseReactions()
mDriveCollectionMaster.NoInteractionTimer = 0
HeardLoudSoundReset = true
}
}

if HeardLoudSoundReset = true {

if HighVolumeTimer &gt; 0 {
HighVolumeTimer -= 1
}

if HighVolumeTimer &lt;= 0 {
HighVolumeTimer = 0
HeardLoudSound = false
HeardLoudSoundConf = false
HeardLoudSoundReset = false
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Voice Recognition

if FaceCooldown &gt; 0 {
FaceCooldown -= 1
}

if file_exists("new speech result.txt") {
if Alive &gt; 0 and Heard() {
if Chance(Alive + 70) {
ReadLastRecognitionResult()
WriteToLog("New Recognition Result - '" + global.LatestRecognisedPhrase + "'")
NewPhrase = true
mDriveCollectionMaster.TimeSinceLastSpeech = 0
LatestPhraseTimer = 30
mDriveCollectionMaster.NoInteractionTimer = 0
}
}
file_delete("new speech result.txt")
}

if global.LatestRecognisedPhrase != "" {
if LatestPhraseTimer &gt; 0 {
LatestPhraseTimer -= 1
} else if LatestPhraseTimer &lt;= 0 {
LatestPhraseTimer = 0
if global.LatestRecognisedPhrase != "" {
//global.LastRecognisedPhrase = global.LatestRecognisedPhrase
}
global.LatestRecognisedPhrase = ""
}
}


if NewPhrase = true {

NewPhraseReactions()
NewPhrase = false

}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Motion Detection (#1 and #2)

if Alive &gt; 0 and EyesNotClosed() and Seen() and
(
(mInterfaceController.CurrentView = MacroView and mBehavioursDeliberative.PercentForward &gt; 0)
or 
(mInterfaceController.CurrentView = MicroView and (PlayerViewOverObject(oEyeballLeft) or PlayerViewOverObject(oEyeballRight))
)
)
{
RecogniseMotion1()
RecogniseMotion2()
}




if MotionDetected1 = true {
if MotionReact1 = false
ReactMotion1()
}

if MotionCounter1 &gt; 0 {
MotionCounter1 -= 1
} else if MotionCounter1 &lt;= 0 {
MotionDetected1 = false
MotionReact1 = false
}


//----------------------------------------------


if MotionDetected2 = true {
if MotionReact2 = false
ReactMotion2()
}


if MotionCounter2 &gt; 0 {
MotionCounter2 -= 1
} else if MotionCounter2 &lt;= 0 {
MotionDetected2 = false
MotionReact2 = false
}



//---------------------------------------------

if MoveSurpriseTimer1 &gt; 0 {
MoveSurpriseTimer1 -= 1
}

if MoveSurpriseTimer2 &gt; 0 {
MoveSurpriseTimer2 -= 1
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Internal State Modifiers

if instance_exists(mEmotionSubController) {

Pain = PainModifiers()
Stress = StressModifiers()
Tiredness = TirednessModifiers()
Thirst = ThirstModifiers()
Lust = LustModifiers()
Alive = AliveModifiers()
Temperature = TemperatureModifiers()


//If above maximum or below minimum, equalise.

RoundInternalStates()

//Updated values made public.
}











</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pulling In Image Results &amp; ColourResults

PullInImageResult1()
PullInImageResult2()

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cappings

Dirt = clamp(Dirt,0,100)

if instance_number(oWen) &gt; WenMax {
ThisWen = instance_find(oWen,random(instance_number(oWen)))
with ThisWen 
{
instance_destroy()
}
}

WenRateLower = (BaseWenRateLower / ((2 / 100) * (100 - Alive))) + mWorldController.SeasonWenRate - (3000 * mDriveCollectionMaster.InRitual)
WenRateHigher = (BaseWenRateHigher / ((2 / 100) * (100 - Alive))) + mWorldController.SeasonWenRate  - (3000 * mDriveCollectionMaster.InRitual)
HairDropRate = 10000 - (mWorldController.CurrentWindS * 100) - ((1000 / 100) * Stress) - ((1000 / 100) * mEmotionSubController.FearActivation) - ((2000 / 100) * (100 - Alive))  - (2000 * mDriveCollectionMaster.InRitual)
Hearing = clamp(Hearing,0,100)
mDriveCollectionMaster.TimeSinceLastSpeech += 1

HairDropRate = 
80000 + (8000 * TOYRate) - ((50000 / 100) * Alive) - ((10000 / 100) * mEmotionSubController.HappyActivation)
+ ((10000 / 100) * mEmotionSubController.ShameActivation)
+ ((10000 / 100) * mCreatureController.Stress)
- ((10000 / 100) * mCreatureController.Lust)
+ ((10000 / 100) * mCreatureController.Tiredness)
+ mWorldController.SeasonShedRate
 - (2000 * mDriveCollectionMaster.InRitual)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Emotion Recognition
if Alive &gt; 0 and EyesNotClosed() and Seen() and
(mInterfaceController.CurrentView = MacroView and mBehavioursDeliberative.PercentForward &gt; 0
or 
(mInterfaceController.CurrentView = MicroView and (PlayerViewOverObject(oEyeballLeft) or PlayerViewOverObject(oEyeballRight))
))
{
PullInEmotionResult()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///New Touches

if mDriveCollectionMaster.RealReactionsOn = true {
if position_meeting(mouse_x,mouse_y,mCreatureParent)
and Alive &gt; 0 
and NewTouch = false 
and mBehavioursDeliberative.PercentForward &gt;= 70
and mouse_check_button_pressed(mb_any)
and instance_exists(mDebug) = false
{
NewTouch = true
NewTouchTimer = random_range(1000,2000)
NewTouchReacted = false
}

//React To New Touches
if NewTouch = true and NewTouchReacted = false {

WinkRun(1)
ChanceToWake(irandom_range(5,8))
TwitchIfNearBP(mouse_x,mouse_y,200)
if Lust &gt; 60 and Chance(10) {
TwitchRun(irandom_range(3,25))
}
ShiverChance(10)
if IsAsleep() = false {
StartBlinkBehaviour()
if Lust &gt; 45 {
ShakeCaul(3,40)
StartCaulVibrateBehaviour(irandom_range(25,50))
}

if IsInRitual() {
if Triad &lt; 0 or Lust &gt; 50 {
HoldBreathFor(25)
mDriveCollectionMaster.BaseBreathRate += 0.0003
}

if Chance(40 * ReactChance()) {MoveToXY(mouse_x,mouse_y,25,mInterfaceController.CurrentView,10)}
mCreatureController.BaseLust += 3  * mPlotController.ISModifier
ChangeEmotion("happy","up",0.3,10)
ChangeEmotion("fear","down",0.3,10)
} else {
if Chance(25 * ReactChance()) {
choose(
LittleJump(),
NumberOfBlinks(irandom_range(2,5)),
VocaliseChance(80)
)
}

if Triad &gt; 0 {
mCreatureController.BaseLust += 3  * mPlotController.ISModifier
ChangeEmotion("happy","up",0.3,10)
ChangeEmotion("fear","down",0.3,10)
} else {
ChangeEmotion("fear","up",0.3,15)
mCreatureController.BaseStress += 5 * mDriveCollectionMaster.ISModifier
if Chance(30  * ReactChance()){EmotionRequest()}
}
}
}



//Cheeks 
if position_meeting(mouse_x,mouse_y,oCheekLeft) {
StartCheekTwitchLeftBehaviour()
HoldBreathFor(8)
if mDriveCollectionMaster.InRitual = true {
ChangeEmotion("happy","up",0.02,5)
} else {
if Triad &lt; 0 {
ChangeEmotion("anger","up",0.3,5) 
mCreatureController.BaseStress += 4 * mPlotController.ISModifier
mCreatureController.BaseResistance += 4 * mPlotController.ISModifier
}
mCreatureController.BaseSubIntent -= 0.05 * mPlotController.ISModifier
}
}
if position_meeting(mouse_x,mouse_y,oCheekRight) {
StartCheekTwitchRightBehaviour()
HoldBreathFor(8)
if mDriveCollectionMaster.InRitual = true {
ChangeEmotion("happy","up",0.02,5)
} else {
if Triad &lt; 0 {
ChangeEmotion("anger","up",0.3,5) 
mCreatureController.BaseStress += 4 * mPlotController.ISModifier
mCreatureController.BaseResistance += 4 * mPlotController.ISModifier
}
mCreatureController.BaseSubIntent -= 0.05 * mPlotController.ISModifier
}
}

//Nose
if position_meeting(mouse_x,mouse_y,oNose1) {
Choose = choose(1,2)
if Choose = 1 {
StartTwitchBehaviour(2,2,1)
} else if Choose = 2 {
StartTwitchNoseSideBehaviour(irandom_range(20,40))
}
HoldBreathFor(8)
if mDriveCollectionMaster.InRitual = true {
ChangeEmotion("happy","up",0.02,4)
} else {
if Triad &lt; 0 {
ChangeEmotion("anger","up",0.3,4) 
mCreatureController.BaseStress += 4 * mPlotController.ISModifier
mCreatureController.BaseResistance += 4 * mPlotController.ISModifier
}
mCreatureController.BaseSubIntent -= 0.04 * mPlotController.ISModifier
} 
}

//Brows
if position_meeting(mouse_x,mouse_y,oBrowLeft) {
StartEyebrowTwitchLeftBehaviour()
HoldBreathFor(8)
if mDriveCollectionMaster.InRitual = true {
ChangeEmotion("happy","up",0.02,4)
} else {
if Triad &lt; 0 {
ChangeEmotion("anger","up",0.3,4) 
mCreatureController.BaseStress += 4 * mPlotController.ISModifier
mCreatureController.BaseResistance += 4 * mPlotController.ISModifier
}
mCreatureController.BaseSubIntent -= 0.04 * mPlotController.ISModifier
}
}
if position_meeting(mouse_x,mouse_y,oBrowRight) {
StartEyebrowTwitchRightBehaviour()
HoldBreathFor(8)
if mDriveCollectionMaster.InRitual = true {
ChangeEmotion("happy","up",0.02,4)
} else {
if Triad &lt; 0 {
ChangeEmotion("anger","up",0.3,4) 
mCreatureController.BaseStress += 4 * mPlotController.ISModifier
mCreatureController.BaseResistance += 4 * mPlotController.ISModifier
}
mCreatureController.BaseSubIntent -= 0.04 * mPlotController.ISModifier
}
}

//Mouth
if position_meeting(mouse_x,mouse_y,mMouthParent) {
StartMouthCentreTwitchBehaviour(0.03,0.13)
if Triad &gt;= 0 {
StartMouthSideLeftTwitchBehaviour("up")
StartMouthSideRightTwitchBehaviour("up")
} else {
StartMouthSideLeftTwitchBehaviour("down")
StartMouthSideRightTwitchBehaviour("down")
}
HoldBreathFor(8)
if mDriveCollectionMaster.InRitual = true {
ChangeEmotion("happy","up",0.02,4)
} else {
if Triad &lt; 0 {
ChangeEmotion("anger","up",0.3,4) 
mCreatureController.BaseStress += 4 * mPlotController.ISModifier
mCreatureController.BaseResistance += 4 * mPlotController.ISModifier
}
mCreatureController.BaseSubIntent -= 0.04 * mPlotController.ISModifier
}
}

//Ears

if instance_exists(oEarLeft) and position_meeting(mouse_x,mouse_y,oEarLeft) {
mCreatureController.BaseTiredness += 0.1 * mPlotController.ISModifier
BaseAlive -= 0.01 * mPlotController.ISModifier
BaseStress += 0.5 * mPlotController.ISModifier
BasePain += 1 * mPlotController.ISModifier
HoldBreathFor(irandom_range(30,50))
mDriveCollectionMaster.BaseBreathRate += 0.0005
StartEyebrowTwitchLeftBehaviour()
StartCheekTwitchLeftBehaviour()
BaseLust += 2 * mPlotController.ISModifier

if mDriveCollectionMaster.InRitual = true {
if Chance(Alive + 30) {StartNumberSniffsBehaviour(1)}
VocaliseChance(ChanceToRitualReact())
ChangeEmotion("happy","up",0.3,5)
ChangeEmotion("fear","up",0.3,5)
BaseResistance -= 5 * mPlotController.ISModifier
CloseToAnne += 3 * mPlotController.ISModifier
BaseTrust += 2 * mPlotController.ISModifier
if Chance(35  * ReactChance()){StartSwallowBehaviour(30,10)}
ShiverChance(40)
if Chance(ChanceToRitualReact()) {MoveBackForward("comeforward",irandom_range(30,60),100 - mBehavioursDeliberative.PercentForward)}

} else {
ChanceToWake(20)
if mBehavioursReactive.Sleeping = false {
if Chance(Alive + 30) {StartNumberSniffsBehaviour(1)}
if Chance(Alive + 10) {RandomVoc(0.3)}
BaseResistance += (10 - ((8 / 100) * mEmotionSubController.FearActivation))
BaseTrust -= 4 * mPlotController.ISModifier
ChangeEmotion("shame","up",0.3,6)
ChangeEmotion("fear","up",0.3,-6 * Triad)
ChangeEmotion("anger","up",0.3,6 * Triad)
ChangeEmotion("happy","down",0.3,-6 * Triad)
CloseToAnne -= 3  * mPlotController.ISModifier
if Chance(mEmotionSubController.FearActivation) {MoveBackForward("retreat",irandom_range(10,25),irandom_range(10,20))}
if Chance(35  * ReactChance()){StartSwallowBehaviour(30,10)}
if Chance(50  * ReactChance()){StartScreenShake(irandom_range(15,30),3,3)}
}
}
}

if instance_exists(oEarRight) and position_meeting(mouse_x,mouse_y,oEarRight) {
mCreatureController.BaseTiredness += 0.4  * mPlotController.ISModifier
BaseAlive -= 0.01 * mPlotController.ISModifier
BaseStress += 0.5 * mPlotController.ISModifier
BasePain += 1 * mPlotController.ISModifier
HoldBreathFor(irandom_range(30,50))
mDriveCollectionMaster.BaseBreathRate += 0.0005
StartEyebrowTwitchRightBehaviour()
StartCheekTwitchRightBehaviour()
BaseLust += 2 * mPlotController.ISModifier

if mDriveCollectionMaster.InRitual = true {
if Chance(Alive + 30) {StartNumberSniffsBehaviour(1)}
VocaliseChance(ChanceToRitualReact())
ChangeEmotion("happy","up",0.3,3)
ChangeEmotion("fear","up",0.3,2)
BaseResistance -= 5 * mPlotController.ISModifier
CloseToAnne += 1 * mPlotController.ISModifier
BaseTrust += 2 * mPlotController.ISModifier
if Chance(35  * ReactChance()){StartSwallowBehaviour(30,10)}
ShiverChance(40)
if Chance(ChanceToRitualReact()) {MoveBackForward("comeforward",irandom_range(30,60),100 - mBehavioursDeliberative.PercentForward)}
} else {
ChanceToWake(30)
if mBehavioursReactive.Sleeping = false {
if Chance(Alive + 30) {StartNumberSniffsBehaviour(1)}
if Chance(Alive + 10) {RandomVoc(0.3)}
BaseResistance += (10 - ((8 / 100) * mEmotionSubController.FearActivation))
BaseTrust -= 4 * mPlotController.ISModifier
ChangeEmotion("shame","up",0.3,6)
ChangeEmotion("fear","up",0.3,-6 * Triad)
ChangeEmotion("anger","up",0.3,6 * Triad)
ChangeEmotion("happy","down",0.3,-6 * Triad)
CloseToAnne -= 1  * mPlotController.ISModifier
if Chance(mEmotionSubController.FearActivation) {MoveBackForward("retreat",irandom_range(10,25),irandom_range(10,20))}
if Chance(35  * ReactChance()){StartSwallowBehaviour(30,10)}
if Chance(50  * ReactChance()){StartScreenShake(irandom_range(15,30),3,3)}
}
}
}

//Horns
if position_meeting(mouse_x,mouse_y,oHornLeft) or position_meeting(mouse_x,mouse_y,oHornRight) {
HoldBreathFor(10 + ((10 / 100) * mCreatureController.Alive) + ((-10 * Triad)))

if mDriveCollectionMaster.InRitual = true {
if Chance(Alive + 30) {StartNumberSniffsBehaviour(1)}
if Chance(ChanceToRitualReact()) {LittleJump()}
BaseResistance -= 3 * mPlotController.ISModifier
BasePain += 3 * mPlotController.ISModifier
BaseStress += 3 * mPlotController.ISModifier
CloseToAnne += 2 * mPlotController.ISModifier
BaseSubIntent += 0.03 * mPlotController.ISModifier
BaseTrust += 2 * mPlotController.ISModifier
ChangeEmotion("happy","up",0.3,10)
BaseLust += 3 * mPlotController.ISModifier
ChangeEmotion("anger","down",0.3,10)
if Chance(ChanceToRitualReact()){ShiverChance(100)}
} else {
ChanceToWake(30)
if Chance(Alive + 10) {StartNumberSniffsBehaviour(1)}
if mBehavioursReactive.Sleeping = false {
if Chance(Alive + 10) {NumberOfBlinks(irandom_range(1,3)) StartEyebrowTwitchRightBehaviour() StartEyebrowTwitchLeftBehaviour()}
if Chance(Alive + 10) {MoveBackForward("retreat",irandom_range(10,20),irandom_range(5,20))}
if Chance(Alive + 10) {StartScreenShake(irandom_range(10,20),random_range(1,3),3)}
VocaliseChance(30 + (-30 * Triad))
BaseTrust -= 3 * mPlotController.ISModifier
BaseSubIntent -= 0.03 * mPlotController.ISModifier
CloseToAnne -= 2 * mPlotController.ISModifier
BaseResistance -= 3 * mPlotController.ISModifier
BaseLust += 3 * mPlotController.ISModifier
BaseStress += 5 * mPlotController.ISModifier
BasePain += 3 * mPlotController.ISModifier
ChangeEmotion("anger","down",0.3,20)
ChangeEmotion("shame","up",0.3,20)
ChangeEmotion("happy","down",0.3,20)
ChangeEmotion("fear","up",0.3,20)
}
}
}

//Caul (Any)
if position_meeting(mouse_x,mouse_y,mCaulParent) {

ChangeEmotion("surprise","up",1.2,30 + ((30 / 100) * PartSensitivity()))

ChanceToWake(10)
if Chance(20 + ((30 / 100) * ConsentIntensity()) + ((30 / 100) * PartSensitivity())) {
LittleJump()
}
if Chance(20 + ((30 / 100) * ConsentIntensity()) + ((30 / 100) * PartSensitivity())) {
StartSwallowBehaviour(10,30)
}
if Chance(20 + ((30 / 100) * ConsentIntensity()) + ((30 / 100) * PartSensitivity())) {
StartOpenMouthBehaviour(0.2,irandom_range(50,100))
}
if Chance(20 + ((30 / 100) * ConsentIntensity()) + ((30 / 100) * PartSensitivity())) {
ShakeCaul(irandom_range(5,10),irandom_range(30,70))
}
if Chance(20 + ((30 / 100) * ConsentIntensity()) + ((30 / 100) * PartSensitivity())) {
StartCaulVibrateBehaviour(irandom_range(30,70))
}
if Chance(20 + ((30 / 100) * ConsentIntensity()) + ((30 / 100) * PartSensitivity())) {
TwitchRun(ConsentAndPartMod(30))
}
mDriveCollectionMaster.BaseBreathRate += ConsentAndPartMod(0.0002)

if IsAsleep() = false {
if Chance(20 + ((30 / 100) * ConsentIntensity()) + ((30 / 100) * PartSensitivity())) {
EyeSquint(irandom_range(3,5),true,irandom_range(40,60))
}
if Chance(20 + ((30 / 100) * ConsentIntensity()) + ((30 / 100) * PartSensitivity())) {
HoldBreathFor(ConsentAndPartMod(60))
}

if IsInRitual() {
mCreatureController.BaseResistance -= ConsentAndPartMod(10)
mCreatureController.BaseStress += ConsentAndPartMod(10)
mCreatureController.BasePain += ((10 / 100) * BaseLust)
mCreatureController.CloseToAnne += ConsentAndPartMod(10)
mCreatureController.BaseTrust += ConsentAndPartMod(10)
mCreatureController.BaseLust += ConsentAndPartMod(10)

if ChanceToRitualReact() {
ShiverChance(100)
}
if ChanceToRitualReact() {
RandomVoc(0.1)
}
if ChanceToRitualReact() {
NodUpDown(irandom_range(2,3))
}
ChangeEmotion("happy","up",0.7,ConsentAndPartMod(15))
MoveBackForward("comeforward",irandom_range(5,10),100 - mBehavioursDeliberative.PercentForward)


MoveToXY(mouse_x,mouse_y,irandom_range(30,100),mInterfaceController.CurrentView,10)


} else {
if Consented() {
mCreatureController.BaseResistance -= ConsentAndPartMod(10)
mCreatureController.BaseStress += ConsentAndPartMod(10)
mCreatureController.BasePain += ((10 / 100) * BaseLust)
mCreatureController.CloseToAnne += ConsentAndPartMod(10)
mCreatureController.BaseSubIntent += ConsentAndPartMod(0.08)
ChangeEmotion("happy","up",0.6,ConsentAndPartMod(10))
ChangeEmotion("shame","up",0.6,ConsentAndPartMod(10))
mCreatureController.BaseLust += ConsentAndPartMod(10)

if Chance(20 + ((30 / 100) * ConsentIntensity()) + ((30 / 100) * PartSensitivity())) {
RandomVoc(0.1)
}
if Chance(20 + ((30 / 100) * ConsentIntensity()) + ((30 / 100) * PartSensitivity())) {
NodUpDown(irandom_range(2,3))
}
ShiverChance(20 + ((30 / 100) * ConsentIntensity()) + ((30 / 100) * PartSensitivity()))
if Chance(10 + ((30 / 100) * ConsentIntensity()) + ((30 / 100) * PartSensitivity())) {
MoveToXY(mouse_x,mouse_y,irandom_range(20,30),mInterfaceController.CurrentView,10)
}
if Chance(20 + ((30 / 100) * ConsentIntensity()) + ((30 / 100) * PartSensitivity())) {
MoveBackForward("comeforward",irandom_range(5,10),100 - mBehavioursDeliberative.PercentForward)
}
} else {
mCreatureController.BaseResistance -= ConsentAndPartMod(10)
mCreatureController.BaseStress += ConsentAndPartMod(10)
mCreatureController.BasePain += ((10 / 100) * BaseLust)
mCreatureController.CloseToAnne -= ConsentAndPartMod(10)
mCreatureController.BaseTrust -= ConsentAndPartMod(10)
if Chance(20 + ((30 / 100) * ConsentIntensity()) + ((30 / 100) * PartSensitivity())) {
MoveBackForward("retreat",irandom_range(5,10),irandom_range(5,20))
}
if Chance(20 + ((30 / 100) * ConsentIntensity()) + ((30 / 100) * PartSensitivity()))  {
ShiftAway(mFinger.x,mFinger.y,irandom_range(50,200),random(360))
}
if Chance(20 + ((30 / 100) * ConsentIntensity()) + ((30 / 100) * PartSensitivity()))  {
RandomShake()
}
if Chance(20 + ((30 / 100) * ConsentIntensity()) + ((30 / 100) * PartSensitivity())) {
RandomVoc(0.8)
}
if mCreatureController.Triad &gt; 0 {
ChangeEmotion("shame","up",0.6,ConsentAndPartMod(15))
ChangeEmotion("sad","up",0.6,ConsentAndPartMod(15))
}
mCreatureController.BaseSubIntent -= ConsentAndPartMod(0.08)
if Resistance &gt; 40 {
ChangeEmotion("anger","up",0.6,ConsentAndPartMod(15))
} else {
ChangeEmotion("fear","up",0.6,ConsentAndPartMod(15))
}


}
}
}

}
mDriveCollectionMaster.alarm[1] = 60
NewTouchReacted = true
}

if NewTouchTimer &gt; 0 {
NewTouchTimer -= 1
} else {
NewTouchTimer = 0
NewTouchConf = false
NewTouch = false
NewTouchReacted = false
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Concepts
if Alive &gt; 0 {

//Trust Modifiers
Trust = BaseTrust + (abs((100 - Alive) / 10)) + (Lust / 5)
+ (Tiredness / 10) + (Triad * 20) - mDriveCollectionMaster.SatMod

//Resistance Modifiers
Resistance = BaseResistance  - ((100 - Alive) / 2)
- (Trust / 10) + (mCreatureController.Pain / 5) - (Tiredness / 10)
- (Triad * 10)
+ ((100 - CloseToAnne) / 3)
+ mDriveCollectionMaster.SatMod

AnneIntent = BaseAnneIntent

//Triad Construction
//The Triad is an average of the subscryber and Anne's Intents, weighted depending on the
//current closeness to Anne.
TriMax = max(BaseSubIntent,AnneIntent)
TriMin = min(BaseSubIntent,AnneIntent)
TriDiff = abs(BaseSubIntent - AnneIntent)
if TriMax = BaseSubIntent {
Triad = (TriMax - ((TriDiff / 100) * CloseToAnne)) + ((0.5 / 100) * Trust)
} else {
Triad = (TriMin + ((TriDiff / 100) * CloseToAnne))  + ((0.5 / 100) * Trust)
}
}

//Cappings
BaseTrust = clamp(BaseTrust,0,100)
BaseResistance = clamp(BaseResistance,0,100)
Trust = clamp(Trust,0,100)
Resistance = clamp(Resistance,0,100)
BaseSubIntent = clamp(BaseSubIntent,-1,1)
CloseToAnne = clamp(CloseToAnne,0,100)
BaseAnneIntent = clamp(BaseAnneIntent,-1,1)
AnneIntent = clamp(AnneIntent,-1,1)
Triad = clamp(Triad,-1,1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lust For Too Long Increases Irritation

if Lust &gt; 50 {
LustIrriTimer += 1
} else {
LustIrriTimer = 0
}

LustIrriTimer = clamp(LustIrriTimer,0,10000)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timers

if CankerPullTimer &gt; 0 {
CankerPullTimer -= 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Purge the recognition log and delete the New Result notifier.
RecogFile = file_text_open_write("latest speech results.txt")
file_text_write_string(RecogFile, "")
file_text_close(RecogFile)
if file_exists("newresult.txt") {
file_delete("newresult.txt")
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
