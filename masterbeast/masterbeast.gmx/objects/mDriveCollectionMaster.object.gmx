<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>mDriveCollectionMaster</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

/* ***** MASTER SWITCH ***** */
DrivesOn = false
/*******************************/

depth = MetaLayer
x = ControllerObjectX
y = ControllerObjectY


//Drives
CurrentRetries = 0
PreviousDrive = "none"
CurrentDrive = "none"
alarm[1] = 60
NoInteractionTimer = 0
NotReturnTimer = 0
ZoomWait = 0
RetreatWait = 0
RitualTimer = 0

//---------------------------------------

Drive1Name = "fallasleep"
Drive1BasePriority = 0.5
Drive1FinalPriority = 0.5
Drive1Cooldown = 0
Drive1MaxAttempts = 3
ResettingDrives("fallasleep")
//---------------

Drive2Name = "playerleave"
Drive2BasePriority = 2
Drive2FinalPriority = 2
Drive2Cooldown = 0
Drive2MaxAttempts = 5
ResettingDrives("playerleave")
//---------------

Drive3Name = "playercome"
Drive3BasePriority = 2
Drive3FinalPriority = 2
Drive3Cooldown = 0
Drive3MaxAttempts = 5
ResettingDrives("playercome")
//---------------

Drive4Name = "flee"
Drive4BasePriority = 3
Drive4FinalPriority = 3
Drive4Cooldown = 0
Drive4MaxAttempts = 3
ResettingDrives("flee")
//---------------

Drive5Name = "retreat"
Drive5BasePriority = 4
Drive5FinalPriority = 4
Drive5Cooldown = 0
Drive5MaxAttempts = 3
ResettingDrives("retreat")
//---------------

Drive6Name = "todefaultpos"
Drive6BasePriority = 2
Drive6FinalPriority = 2
Drive6Cooldown = 0
Drive6MaxAttempts = 3
ResettingDrives("todefaultpos")

//---------------

Drive7Name = "comeforward"
Drive7BasePriority = 2
Drive7FinalPriority = 2
Drive7Cooldown = 0
Drive7MaxAttempts = 3
ResettingDrives("comeforward")
//---------------

Drive8Name = "gotoeat"
Drive8BasePriority = 1
Drive8FinalPriority = 1
Drive8Cooldown = 0
Drive8MaxAttempts = 3
EatenToday = false
EatenTodayAmount = 0
ResettingDrives("gotoeat")
//---------------

Drive9Name = "acceptritual"
Drive9BasePriority = 5
Drive9FinalPriority = 5
Drive9Cooldown = 0
Drive9MaxAttempts = 3
ResettingDrives("acceptritual")
//---------------

Drive10Name = "doze"
Drive10BasePriority = 1
Drive10FinalPriority = 1
Drive10Cooldown = 0
Drive10MaxAttempts = 3
ResettingDrives("doze")
//---------------

Drive11Name = "cleangound"
Drive11BasePriority = 2
Drive11FinalPriority = 2
Drive11Cooldown = 0
Drive11MaxAttempts = 3
ResettingDrives("cleangound")
//---------------


Drive12Name = "strokenose"
Drive12BasePriority = 2
Drive12FinalPriority = 2
Drive12Cooldown = 0
Drive12MaxAttempts = 3
ResettingDrives("strokenose")
//---------------

Drive13Name = "inspectmansion"
Drive13BasePriority = 4
Drive13FinalPriority = 4
Drive13Cooldown = 0
Drive13MaxAttempts = 3
ResettingDrives("inspectmansion")
//---------------

Drive14Name = "followcommand"
Drive14BasePriority = 5
Drive14FinalPriority = 5
Drive14Cooldown = 0
Drive14MaxAttempts = 3
ResettingDrives("followcommand")
//---------------

Drive15Name = "cleanskin"
Drive15BasePriority = 1
Drive15FinalPriority = 1
Drive15Cooldown = 0
Drive15MaxAttempts = 3
ResettingDrives("cleanskin")
//---------------

Drive16Name = "playergetoff"
Drive16BasePriority = 3
Drive16FinalPriority = 3
Drive16Cooldown = 0
Drive16MaxAttempts = 3
ResettingDrives("playergetoff")
//---------------

Drive17Name = "generalvocalise"
Drive17BasePriority = 2
Drive17FinalPriority = 2
Drive17Cooldown = 0
Drive17MaxAttempts = 3
ResettingDrives("generalvocalise")
//---------------

Drive18Name = "touchcaul"
Drive18BasePriority = 3
Drive18FinalPriority = 3
Drive18Cooldown = 0
Drive18MaxAttempts = 3
ServicedToday = false
WithinServiceTimer = false
TimeSinceServiceStart = 0
ResettingDrives("touchcaul")
//---------------

Drive19Name = "hairbrush"
Drive19BasePriority = 1
Drive19FinalPriority = 1
Drive19Cooldown = 0
Drive19MaxAttempts = 3
StrokeTimer = 0
ResettingDrives("hairbrush")
//---------------

Drive20Name = "playerspeak"
Drive20BasePriority = 1
Drive20FinalPriority = 1
Drive20Cooldown = 0
Drive20MaxAttempts = 3
TimeSinceLastSpeech = 0
ResettingDrives("playerspeak")
//---------------

Drive21Name = "playertouch"
Drive21BasePriority = 1
Drive21FinalPriority = 1
Drive21Cooldown = 0
Drive21MaxAttempts = 3
TimeSinceLastTouch = 0
ResettingDrives("playertouch")
//---------------

//---------------------------------------


//Reaction Parameters

//Variables
CreatureDied = false
CreatureSuperDied = false
StartTouchingCaul = false
RestBreathRate = 1.2
RestBreathHold = 40
RestBreathTime = 60
BaseBreathTime = RestBreathTime
BaseBreathHold = RestBreathHold
BaseBreathRate = RestBreathRate
BreathType = "both"
CurrentlyBreathing = true
BreathingPaused = false
HoldingBreath = false
Yawned = false 
Sneezed = false
Coughed = false
PainEyesShut = false
PainShutMod = 0
Dozing  = false
alarm[0] = 20
CurrentlyBlinking = true
CurrentlySquinting = true
CurrentlyWinking = true
BlinkTimer = 40
BlinkTimerBase = 60

ChanceToWakeUp = 0
SurpriseVoc = false
CutReact = false
CutReactOut = false
EyeCut = 0
EarCut = 0
EyeLReact = false
EyeRReact = false
EyeCuts = 0
NumberOfDeathBlinks = 30
NumberOfDeathTwitches = 100
HaveEatenToday = 0


//Timers
EmotionCheckTimer = 20000
ShiverTimer = 1000
SneezeTimer = 500
PepperTouchTimer = 0
SlipTimer = 0
RandomTwitchTimer = 1500
YawnTimer = 6000
CoughTimer = 6000
SlippingTimer = 0
PainEyesTimer = 0
TabooShotTimer = 0
HornShotTimer = 100
CellarProxTimer = 0
BaseWibbleTimer = 4000
TabooTouchTimer = 0
HornLeftGrowTimer = 0
HornRightGrowTimer = 0
ShakeCaulTimerTimer = 10000
CutTimer = 0
CutCellarTimer = 0
EyeSurpriseTimer = 0
EyeCutTimer = 0
EarCutTimer = 0
CaulTouchTimer = 0
CaulLTouchTimer = 0
NubGrabTimer = 0
RandomMoveTimer = 4000
FingerUnderNoseTimer = 0
CutTimer = 0
FurPullTimer = 0
SwallowTimer = 2000
SniffTimer = 0
SigilCutTimer = 0
EyeTouchTimer = 0
TouchMoleTimer = 0
CutMoleTimer = 0
TouchSigilTimer = 0

CaulCutTimer = 0
PullHornTimer = 0
NoReactionTimer = 0
LastCutTimer = 0
SigilCutTimer = 0
CutWenTimer = 0
EyeBlackTimer = 0
EyeShotTimer = 0
EarPullTimer = 0
FurShaveTimer = 0
CankerCutTimer = 0
TLTimer = 0
TSATimer = 0
SigilProgressIntensity = 0
SigilStartTimer = 0
CellarBackTimer = 0
WibbleTimer = 500
ShakeCaulTimer = 500
VibrateNubTimer = 500
NoReturnTimer = 0

//Ritual Parameters
InRitual = false
Bound = false
CommandIssued = false
RitualRequest = false
RitualInternalMod = 0
RitualTolerance = 0
RitualPitchMod = 0
PreviousHappy = mEmotionSubController.HappyActivation
PreviousAnger = mEmotionSubController.AngerActivation
PreviousShame = mEmotionSubController.ShameActivation
PreviousFear = mEmotionSubController.FearActivation
PreviousSad = mEmotionSubController.SadActivation
RitualModX = 0
RitualModDir = "left"
RitualModTimerTotal = 7
RitualModTimer = RitualModTimerTotal

//Initialise
StartBreatheBehaviour(RestBreathRate,RestBreathTime,RestBreathHold,BreathType)

TimeTilSleep = 2000
VocRandom = 1000
TimeAway = 0





















</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a Twitch Run at start and end of Ritual

TwitchRun(irandom_range(10,30) + round(20 / 100) * RitualTolerance)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop Shivering When Enter Or Exit Ritual

StopShiverBehaviour()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creating A Bit Of A Gap For Retries

CurrentDrive = RetryDrive
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deciding On Drive

//if DrivesOn = true 
if mCreatureController.Alive &gt; 0  {

PreviousDrive = CurrentDrive
CurrentDrive = "none"

Drive1FinalPriority = Drive1BasePriority
Drive2FinalPriority = Drive2BasePriority
Drive3FinalPriority = Drive3BasePriority
Drive4FinalPriority = Drive4BasePriority
Drive5FinalPriority = Drive5BasePriority
Drive6FinalPriority = Drive6BasePriority
Drive7FinalPriority = Drive7BasePriority
Drive8FinalPriority = Drive8BasePriority
Drive9FinalPriority = Drive9BasePriority
Drive10FinalPriority = Drive10BasePriority
Drive11FinalPriority = Drive11BasePriority
Drive12FinalPriority = Drive12BasePriority
Drive13FinalPriority = Drive13BasePriority
Drive14FinalPriority = Drive14BasePriority
Drive15FinalPriority = Drive15BasePriority
Drive16FinalPriority = Drive16BasePriority
Drive17FinalPriority = Drive17BasePriority
Drive18FinalPriority = Drive18BasePriority
Drive19FinalPriority = Drive19BasePriority
Drive20FinalPriority = Drive20BasePriority
Drive21FinalPriority = Drive21BasePriority

if mWorldController.CurrentTOD = "morning"
or mWorldController.CurrentTOD = "afternoon" 
{
TODMOD = -1
} else {
TODMOD = 1
}

//Check Eligibility Of Drives
//--------------------------------- FALLING ASLEEP
if IfDrivePreconditionsSatisfied("fallasleep") = false {
Drive1FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("playerleave") = false {
Drive2FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("playercome") = false {
Drive3FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("flee") = false {
Drive4FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("retreat") = false {
Drive5FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("todefaultpos") = false {
Drive6FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("comeforward") = false {
Drive7FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("gotoeat") = false {
Drive8FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("acceptritual") = false {
Drive9FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("doze") = false {
Drive10FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("cleangound") = false {
Drive11FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("strokenose") = false {
Drive12FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("inspectmansion") = false {
Drive13FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("followcommand") = false {
Drive14FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("cleanskin") = false {
Drive15FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("playergetoff") = false {
Drive16FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("generalvocalise") = false {
Drive17FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("touchcaul") = false {
Drive18FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("hairbrush") = false {
Drive19FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("playerspeak") = false {
Drive20FinalPriority = -2000
}
if IfDrivePreconditionsSatisfied("playertouch") = false {
Drive21FinalPriority = -2000
}
//----------------------------------------------------------

//Give a boost to the previous drive (if it is still eligible, it is more likely that the creature still wants to do it).

if PreviousDrive = "fallasleep" {
Drive1FinalPriority += 5
}
if PreviousDrive = "playerleave" {
Drive2FinalPriority += 5
}
if PreviousDrive = "playercome" {
Drive3FinalPriority += 5
}
if PreviousDrive = "flee" {
Drive4FinalPriority += 5
}
if PreviousDrive = "retreat" {
Drive5FinalPriority += 5
}
if PreviousDrive = "todefaultpos" {
Drive6FinalPriority += 5
}
if PreviousDrive = "comeforward" {
Drive7FinalPriority += 5
}
if PreviousDrive = "gotoeat" {
Drive8FinalPriority += 5
}
if PreviousDrive = "acceptritual" {
Drive9FinalPriority += 5
}
if PreviousDrive = "doze" {
Drive10FinalPriority += 5
}
if PreviousDrive = "cleangound" {
Drive11FinalPriority += 5
}
if PreviousDrive = "strokenose" {
Drive12FinalPriority += 5
}
if PreviousDrive = "inspectmansion" {
Drive13FinalPriority += 5
}
if PreviousDrive = "followcommand" {
Drive14FinalPriority += 5
}
if PreviousDrive = "cleanskin" {
Drive15FinalPriority += 5
}
if PreviousDrive = "playergetoff" {
Drive16FinalPriority += 5
}
if PreviousDrive = "generalvocalise" {
Drive17FinalPriority += 5
}
if PreviousDrive = "touchcaul" {
Drive18FinalPriority += 5
}
if PreviousDrive = "hairbrush" {
Drive19FinalPriority += 5
}
if PreviousDrive = "playerspeak" {
Drive20FinalPriority += 5
}
if PreviousDrive = "playertouch" {
Drive21FinalPriority += 5
}


//Check Drive Priority Modifiers
//Scores are added or subtracted to drive priorities depending on individual factors.
DrivePriorities()

//Final Choice Of Drive
Choice1 = max(
Drive1FinalPriority,
Drive2FinalPriority,
Drive3FinalPriority,
Drive4FinalPriority,
Drive5FinalPriority,
Drive6FinalPriority,
Drive7FinalPriority,
Drive8FinalPriority,
Drive9FinalPriority,
Drive10FinalPriority,
Drive11FinalPriority,
Drive12FinalPriority,
Drive13FinalPriority,
Drive14FinalPriority,
Drive15FinalPriority,
Drive16FinalPriority,
)

Choice2 = max(
Drive17FinalPriority,
Drive18FinalPriority,
Drive19FinalPriority,
Drive20FinalPriority,
Drive21FinalPriority,
-100)

CandidateDrive = max(Choice1,Choice2)


if CandidateDrive = Drive1FinalPriority {
CurrentDrive = Drive1Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive1MaxAttempts
}
}

if CandidateDrive = Drive2FinalPriority {
CurrentDrive = Drive2Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive2MaxAttempts
}
}


if CandidateDrive = Drive3FinalPriority {
CurrentDrive = Drive3Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive3MaxAttempts
}
}

if CandidateDrive = Drive4FinalPriority {
CurrentDrive = Drive4Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive4MaxAttempts
}
}

if CandidateDrive = Drive5FinalPriority {
CurrentDrive = Drive5Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive5MaxAttempts
}
}

if CandidateDrive = Drive6FinalPriority {
CurrentDrive = Drive6Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive6MaxAttempts
}
}

if CandidateDrive = Drive7FinalPriority {
CurrentDrive = Drive7Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive7MaxAttempts
}
}

if CandidateDrive = Drive8FinalPriority {
CurrentDrive = Drive8Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive8MaxAttempts
}
}

if CandidateDrive = Drive9FinalPriority {
CurrentDrive = Drive9Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive9MaxAttempts
}
}

if CandidateDrive = Drive10FinalPriority {
CurrentDrive = Drive10Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive10MaxAttempts
}
}

if CandidateDrive = Drive11FinalPriority {
CurrentDrive = Drive11Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive11MaxAttempts
}
}

if CandidateDrive = Drive12FinalPriority {
CurrentDrive = Drive12Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive12MaxAttempts
}
}

if CandidateDrive = Drive13FinalPriority {
CurrentDrive = Drive13Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive13MaxAttempts
}
}

if CandidateDrive = Drive14FinalPriority {
CurrentDrive = Drive14Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive14MaxAttempts
}
}

if CandidateDrive = Drive15FinalPriority {
CurrentDrive = Drive15Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive15MaxAttempts
}
}

if CandidateDrive = Drive16FinalPriority {
CurrentDrive = Drive16Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive16MaxAttempts
}
}

if CandidateDrive = Drive17FinalPriority {
CurrentDrive = Drive17Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive17MaxAttempts
}
}

if CandidateDrive = Drive18FinalPriority {
CurrentDrive = Drive18Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive18MaxAttempts
}
}

if CandidateDrive = Drive19FinalPriority {
CurrentDrive = Drive19Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive19MaxAttempts
}
}

if CandidateDrive = Drive20FinalPriority {
CurrentDrive = Drive20Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive20MaxAttempts
}
}

if CandidateDrive = Drive21FinalPriority {
CurrentDrive = Drive21Name
if PreviousDrive != CurrentDrive {
CurrentRetries = Drive21MaxAttempts
}
}

if CandidateDrive = -100 {
CurrentDrive = "none"
}


//Lowering Cooldowns
if Drive1Cooldown &gt; 0 {
Drive1Cooldown -= 1
}

if Drive2Cooldown &gt; 0 {
Drive2Cooldown -= 1
}

if Drive3Cooldown &gt; 0 {
Drive3Cooldown -= 1
}

if Drive4Cooldown &gt; 0 {
Drive4Cooldown -= 1
}

if Drive5Cooldown &gt; 0 {
Drive5Cooldown -= 1
}

if Drive6Cooldown &gt; 0 {
Drive6Cooldown -= 1
}

if Drive7Cooldown &gt; 0 {
Drive7Cooldown -= 1
}

if Drive8Cooldown &gt; 0 {
Drive8Cooldown -= 1
}

if Drive9Cooldown &gt; 0 {
Drive9Cooldown -= 1
}

if Drive10Cooldown &gt; 0 {
Drive10Cooldown -= 1
}

if Drive11Cooldown &gt; 0 {
Drive11Cooldown -= 1
}

if Drive12Cooldown &gt; 0 {
Drive12Cooldown -= 1
}

if Drive13Cooldown &gt; 0 {
Drive13Cooldown -= 1
}

if Drive14Cooldown &gt; 0 {
Drive14Cooldown -= 1
}

if Drive15Cooldown &gt; 0 {
Drive15Cooldown -= 1
}

if Drive16Cooldown &gt; 0 {
Drive16Cooldown -= 1
}

if Drive17Cooldown &gt; 0 {
Drive17Cooldown -= 1
}

if Drive18Cooldown &gt; 0 {
Drive18Cooldown -= 1
}

if Drive19Cooldown &gt; 0 {
Drive19Cooldown -= 1
}

if Drive20Cooldown &gt; 0 {
Drive20Cooldown -= 1
}

if Drive21Cooldown &gt; 0 {
Drive21Cooldown -= 1
}


}
//}

//Change back

alarm[1] = 200





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check If Eyes Need To Close With Pain

if DrivesOn = true {
if mBehavioursReactive.Sleeping = false {
if mCreatureController.Pain &gt; 50 {
if PainEyesShut = false {
PORTNOT = random_range(0,100) + ((20 / 100) * mCreatureController.Pain)
if PORTNOT &gt;= 10 {
PainShutMod = 9
PainEyesShut = true
PainEyesTimer = irandom_range(20,90) + ((30 / 100) * mCreatureController.Pain)
}
}
}
}
alarm[0] = 600
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reactive Competences

//Anything non-deliberative, automatic or not overridable by 
//deliberation must go here.

//Order:
//Low Priority
// ---------------
//Medium Priority
// --------------
//High Priority

//Actions When Alive
//-----------------------------------
if mCreatureController.Alive &gt; 0 {
//Breathing

//Modifiers For Rates
BreathRate = BaseBreathRate - ((0.6 / 100) * (100 - mCreatureController.Alive)) + ((0.6 / 100) * mCreatureController.Lust) + ((0.7 / 100) * mCreatureController.Stress) 
+ ((0.7 / 100) * mEmotionSubController.AngerActivation) - ((0.5 / 100) * mEmotionSubController.SadActivation) + ((0.8 / 100) * mEmotionSubController.SurpriseActivation) 
+ ((0.9 / 100) * mEmotionSubController.FearActivation) - ((0.6 / 100) * mCreatureController.Pain) - ((0.5 / 100) * mCreatureController.Tiredness) 
- ((0.4 / 100) * mEmotionSubController.ShameActivation) - (0.6 * InRitual)

BreathTime = BaseBreathTime + ((14 / 100) * (100 - mCreatureController.Alive)) - ((14 / 100) * mCreatureController.Lust) - ((14 / 100) * mCreatureController.Stress) 
- ((14 / 100) * mEmotionSubController.AngerActivation) + ((14 / 100) * mEmotionSubController.SadActivation) - ((14 / 100) * mEmotionSubController.SurpriseActivation) 
- ((14 / 100) * mEmotionSubController.FearActivation) - ((14 / 100) * mCreatureController.Pain) + ((14 / 100) * mCreatureController.Tiredness)
+ ((14/ 100) * mEmotionSubController.ShameActivation) + (40 * InRitual)

BreathHold = BaseBreathHold + ((14 / 100) * (100 - mCreatureController.Alive)) - ((14 / 100) * mCreatureController.Lust) - ((14 / 100) * mCreatureController.Stress) 
- ((14 / 100) * mEmotionSubController.AngerActivation) + ((14 / 100) * mEmotionSubController.SadActivation) - ((14 / 100) * mEmotionSubController.SurpriseActivation) 
- ((14 / 100) * mEmotionSubController.FearActivation) - ((14 / 100) * mCreatureController.Pain) + ((14 / 100) * mCreatureController.Tiredness)
+ ((14 / 100) * mEmotionSubController.ShameActivation) + (40 * InRitual)

//Return To Resting Rate Slowly
if BaseBreathRate != RestBreathRate {
if BaseBreathRate &gt; RestBreathRate {
BaseBreathRate -= 0.001
} else if BaseBreathRate &lt; RestBreathRate {
BaseBreathRate += 0.001
}
}

if BaseBreathHold != RestBreathHold {
if BaseBreathHold &gt; RestBreathHold {
BaseBreathHold -= 0.1
} else if BaseBreathHold &lt; RestBreathHold {
BaseBreathHold += 0.1
}
}
if BaseBreathTime != RestBreathTime {
if BaseBreathTime &gt; RestBreathTime {
BaseBreathTime -= 0.1
} else if BaseBreathTime &lt; RestBreathTime {
BaseBreathTime += 0.1
}
}

BreathTime = clamp(BreathTime,10,10000)
BreathHold = clamp(BreathHold,1,10000)
BreathRate = clamp(BreathRate,0.3,3.0)

//If Lust High Enough, Set BreathType To Mouth
if mCreatureController.Lust &gt; 50 {
BreathType = "mouth"
}

//Maintain Breathing If Currently Breathing, or Start It If Not Breathing.
if CurrentlyBreathing = true {
if mBehavioursReactive.BreathingActive = false {
StartBreatheBehaviour(BreathRate,BreathTime,BreathHold,BreathType)
} else {
MaintainBreatheBehaviour(BreathRate,BreathTime,BreathHold,BreathType)
}
} else if CurrentlyBreathing = false {
FinishBreatheBehaviour()
}

//Holding Breathing
if HoldingBreath = true {
if HoldBreathTimer &gt; 0 {
HoldBreathTimer -= 1
} else {
HoldBreathTimer = 0
mBehavioursReactive.BreathingActive = true
ex_audio_class_resume("breathingnoseinhealthy")
ex_audio_class_resume("breathingnoseinsick")
ex_audio_class_resume("breathingmouthinhealthy")
ex_audio_class_resume("breathingmouthinsick")
ex_audio_class_resume("breathingnoseouthealthy")
ex_audio_class_resume("breathingnoseoutsick")
ex_audio_class_resume("breathingmouthouthealthy")
ex_audio_class_resume("breathingmouthoutsick")
CurrentlyBreathing = true
HoldingBreath = false
}
}

//Blinking
if IsInRitual() = false {
if CurrentlyBlinking = true {
if BlinkTimer &gt; 0 {
BlinkTimer -= 1 
} else if BlinkTimer &lt;= 0 {
StartBlinkBehaviour()
BlinkTimer = BlinkTimerBase +
(
((BlinkTimerBase) * (100 - mCreatureController.Alive))
- (((BlinkTimerBase / 6) / 100) * mCreatureController.Pain)
- (((BlinkTimerBase / 6) / 100) * mCreatureController.Stress)
- (((BlinkTimerBase / 6) / 100) * mCreatureController.Tiredness)
+ (((BlinkTimerBase / 6) / 100) * mCreatureController.Lust)
+ (((BlinkTimerBase / 6) / 100) * mEmotionSubController.SadActivation)
+ (((BlinkTimerBase / 6) / 100) * mEmotionSubController.FearActivation)
+ (((BlinkTimerBase / 6) / 100) * mEmotionSubController.HappyActivation)
+ (((BlinkTimerBase) / 100) * mEmotionSubController.SurpriseActivation)
+ (((BlinkTimerBase / 6) / 100) * mEmotionSubController.AngerActivation)
)
BlinkTimer = clamp(BlinkTimer,20,10000)
}
} 
}



if DrivesOn = true {


//-----------------------------------------------------------------------------------------------------------------------------------------
//LOW PRIORITY

//InteractionTimer


if mCreatureController.Faces != "0" and mInterfaceController.PressBegun = false
and mCreatureController.TimeSinceLastMotion &gt; 0 {
mDriveCollectionMaster.NoInteractionTimer += 1
}

//Opening Eyes Again if Pain goes down

if PainEyesTimer &gt; 0 {
PainEyesTimer -= 1 
} else {
PainEyesTimer = 0 
PainEyesShut = false
PainShutMod = 0
}

PainShutMod = clamp(PainShutMod,0,9)


//Randomised Yawning

if mBehavioursDeliberative.CrunchingActive = false and InRitual = false {
if YawnTimer &gt; 0 {
YawnTimer -= max(1,1 - ((1 / 100) * mEmotionSubController.FearActivation) - ((1 / 100) * mEmotionSubController.SurpriseActivation) + ((2 / 100) * mCreatureController.Tiredness) + ((1 / 100) * (100 - mCreatureController.Alive)))
} else if YawnTimer &lt;= 0 {
if Yawned = false {
StartYawnBehaviour()
WriteToLog("Yawned.")
mCreatureController.BaseTiredness += 0.3
ChangeEmotionStep("anger","down",2)
ChangeEmotionStep("fear","down",2)
Yawned = true 
} else if Yawned = true and mBehavioursReactive.YawningActive = false {
if InRitual = true {ChangeEmotion("fear","up",0.2,4)}
if Chance(20){StartVocalisation(choose("shortlow","shorthigh"),0.2,choose("rise","fall","same"),50)}
if Chance(40) and mBehavioursReactive.Sleeping = false {NumberOfBlinks(irandom_range(2,4))}
if Chance(30) {StartNumberSniffsBehaviour(irandom_range(1,3))}
if Chance(20) {StartShiverBehaviour(irandom_range(0.05,0.1),irandom_range(20,30),7)}
RandomTwitch()
RandomTwitch()
BaseBreathRate -= 0.1
RandomTwitch()
RandomTwitch()
Yawned = false
YawnTimer = irandom_range(20000,30000)
}
}
}

//Slipping Randomly
if mBehavioursDeliberative.PercentForward &gt; 0 and mCreatureController.Alive &lt; 25 {
if SlippingTimer &gt; 0 {
SlippingTimer -= 1 + ((2 / 100) * mCreatureController.Pain) + ((2 / 100) * mCreatureController.Tiredness) + ((3 / 100) * (100 - mCreatureController.Alive))
} else if SlippingTimer &lt;= 0 {
StartSlipBehaviour()
SlippingReactions()
}
SlippingTimer = 6000
}

//Emotions &amp; Concepts Changing Over Time
if mInterfaceController.Faces = 0 and mCreatureController.TimeSinceLastMotion &gt; 5000 {
with mCreatureController {
SubIntent -= 0.0003
CloseToAnne -= 0.003
BaseTrust -= 0.003
AnneIntent -= 0.003
BaseResistance -= 0.003
ChangeEmotionStep("happy","down",0.003)
ChangeEmotionStep("anger","up",0.003)
ChangeEmotionStep("fear","up",0.003)
ChangeEmotionStep("sad","up",0.003)
}
}

//Randomised Coughing

if InRitual = false {
if CoughTimer &gt; 0 {
CoughTimer -= 1  + ((1 / 100) * mCreatureController.Thirst) + ((1 / 100) * mCreatureController.Dirt) + ((4 / 100) * (100 - mCreatureController.Alive)) + ((10 / 200) * oThroat.PressThroatTimer)
} else if CoughTimer &lt;= 0 {
if Coughed = false {
StopYawnBehaviour()
StartCoughBehaviour()
if Chance(40){LittleJump()}
ChanceToWake(20)
if Chance(20){MoveBackForward("retreat",5,irandom_range(10,20))}
Coughed = true 
}

if Coughed = true and mBehavioursReactive.CoughingActive = false {
if Chance(45){StartMouthCentreTwitchBehaviour(0.3,0.13)}
RandomTwitch()
Choose = choose(-1,1)
if Choose = -1 {
StartCheekTwitchLeftBehaviour()
StartCheekTwitchRightBehaviour()
} else {
StartEyebrowTwitchRightBehaviour()
StartEyebrowTwitchLeftBehaviour()
}
BaseBreathRate += 0.1
if Chance(40){NumberOfBlinks(irandom_range(2,4))}
if Chance(40){StartNumberSniffsBehaviour(irandom_range(2,3))}
mCreatureController.Dirt += 1
mCreatureController.BaseStress += 1
ChangeEmotionStep("anger","up",1.5)
CoughTimer = irandom_range(20000,30000)
Coughed = false
}
}
}


//Scared of coughing.
if CoughTimer &gt; 0 and CoughTimer &lt;= 100 and InRitual = true {
ChangeEmotionStep("fear","up",(5 / 2) * (1 - mCreatureController.Triad))
}

//Randomised Sniffing
if InRitual = false {
if SniffTimer &gt; 0 {
SniffTimer -= 1 + ((4 / 100) * mEmotionSubController.SadActivation) + ((3 / 30) * mWorldController.CurrentTemp) + ((1 / 100) * mCreatureController.Dirt)
} else if SniffTimer &lt;= 0 {
StartSniffBehaviour(30,30,irandom_range(2,3),1)
SniffTimer = irandom_range(15000,20000)
}
}


if TSATimer &gt; 0 {
TSATimer -= 1
}

//Fur Shave Timer 

if FurShaveTimer &gt; 0 {
FurShaveTimer -= 1
}

//Pepper Touch Time 

if PepperTouchTimer &gt; 0 {
PepperTouchTimer -= 1
}

//Canker Cut Timer 

if CankerCutTimer &gt; 0 {
CankerCutTimer -= 1
}

//Sigil Cut Timer 

if SigilCutTimer &gt; 0 {
SigilCutTimer -= 1
}

//Gound Touch Timer 

if EyeTouchTimer &gt; 0 {
EyeTouchTimer -= 1
}

//Touch Mole Timer 

if TouchMoleTimer &gt; 0 {
TouchMoleTimer -= 1 - ((1 / 100) * (100 - mCreatureController.Alive)) + ((1 / 100) * mCreatureController.Pain) + (-1 * mCreatureController.Triad) - ((1 / 100) * mCreatureController.Trust) - ((1/ 100) * mEmotionSubController.HappyActivation) + ((1 / 100) * mEmotionSubController.FearActivation) 
}

//Cut Mole Timer 

if CutMoleTimer &gt; 0 {
CutMoleTimer -= 1
}

//Touch Sigil Area Timer

if TouchSigilTimer &gt; 0 {
TouchSigilTimer -= 1
}

//CutNubTimer 

if CaulCutTimer &gt; 0 {
CaulCutTimer -= 1
}

//Ear Pull Timer 
if EarPullTimer &gt; 0 {
EarPullTimer -= 1
}

//Horn Pull Timer 
if PullHornTimer &gt; 0 {
PullHornTimer -= 1
}

//Cut Wen Timer 
if CutWenTimer &gt; 0 {
CutWenTimer -= 1 - ((0.5 / 100) * (100 - mCreatureController.Alive) - ((0.2 / 100) * mCreatureController.Tiredness) + (1 * mCreatureController.Triad) - ((1 / 100) * mEmotionSubController.HappyActivation))
}

//Fur Pull Timer
if FurPullTimer &gt; 0 {
FurPullTimer -= 1
}

//SlipTimer
if SlipTimer &gt; 0 {
SlipTimer -= 1
}

//Eye Black Timer
if EyeBlackTimer &gt; 0 {
EyeBlackTimer -= 1
}

//Eye Shot Timer 
if (mInterfaceController.CurrentView = MicroView and PlayerViewOverObject(oEyeballRight) = false and PlayerViewOverObject(oEyeballLeft) = false) or mInterfaceController.CurrentView = MacroView {
if EyeShotTimer &gt; 0 {
EyeShotTimer -= 1
}
}

//Thunder Light Timer 
if TLTimer &gt; 0 {
TLTimer -= 1
}

//Finger Under Nose Timer
if FingerUnderNoseTimer &gt; 0 {
FingerUnderNoseTimer -= 1
}


//Touch Taboo Timer
if TabooTouchTimer &gt; 0 {
TabooTouchTimer -= 1
}

//Cellar Prox Timer

if CellarProxTimer &gt; 0 {
CellarProxTimer -= 1
}

//CellarBackTimer 

if CellarBackTimer &gt; 0 {
CellarBackTimer -= 1
}


//Chance for a large Surprise change to trigger a vocalisation.
if InRitual = false {
if SurpriseVoc = false {
if mEmotionSubController.SurpriseGradualAmount &gt; 40 {
VON = choose(-1,-1,1)
if VON = 1 {
StartVocalisation("shorthigh",1,choose("rise","risefall"),50)
}
SurpriseVoc = true
}
} else if SurpriseVoc = true {
if  mEmotionSubController.SurpriseGradualAmount &lt;= 0 {
SurpriseVoc = false 
}
}
}

//Making occasionnal emotion checks
if IsAsleep = false and NoInteractionTimer &lt; 600 and (mCreatureController.Faces = "1" or mCreatureController.Faces = "!") and IsInRitual() = false and IsAlive()  {
if EmotionCheckTimer &gt; 0 {
EmotionCheckTimer -= 1
} else if EmotionCheckTimer &lt;= 0 {
choose(
NumberOfBlinks(irandom_range(5,8)),
EyeSquint(irandom_range(2,5),true,irandom_range(25,40))
)
EmotionRequest()
EmotionCheckTimer = irandom_range(4000,10000) - NumberISMod(Stress,100) + NumberISMod(Tiredness,100) - NumberISMod(Pain,100) - NumberEmoMod(SadActivation,100) - NumberEmoMod(ShameActivation,100) - NumberEmoMod(FearActivation,100) + NumberEmoMod(AngerActivation,100)
+ LowAliveMod(300)
}
}


//Caul Vibrate With Lust 
if mCreatureController.Lust &gt; 70
or (mCreatureController.Alive &lt;= 20 and mCreatureController.Alive &gt; 0)
{
with mBehavioursReactive {
if CaulVibrateActive = false {
StartCaulVibrateBehaviour(20)
} else {
if CaulVibrateAmount &lt; 2 {
CaulVibrateAmount += 1
}
}
}
}



//Sigil Controllers 


if SigilProgressIntensity &gt; 0 and SigilInProgress = false {
SigilProgressIntensity -= 1
}

SigilProgressIntensity = clamp(SigilProgressIntensity,0,100)

if SigilStartTimer &gt; 0 {
SigilStartTimer -= 1
}


//Touch Sigil Area, No Sequence
if instance_exists(mFinger) {
if place_meeting(mFinger.x,mFinger.y,mCreatureParent) {
if mFinger.x &lt; 428 and mFinger.x &gt; 170 
and mFinger.y &gt; 898 and mFinger.y &lt; 1170 
and position_meeting(mouse_x,mouse_y,sSigilMoleParent) = false {
TouchSigilAreaReactions()
}
}
}


//Randomly Wibble, Shake Caul, Vibrate

if VibrateNubTimer &gt; 0 {
VibrateNubTimer -= 1
} else {
StartCaulVibrateBehaviour(irandom_range(40,100) + NumberISMod(mCreatureController.Lust,50))
if Chance(30) {
TwitchRun(5 + NumberISMod(mCreatureController.Lust,20))
}
if Chance(30) {
RandomShake()
}
VibrateNubTimer = irandom_range(5000,8000) - NumberISMod(mCreatureController.Lust,2000) - ((2000 / 100) * mWorldController.MoonLustMod)
}

if ShakeCaulTimer &gt; 0 {
ShakeCaulTimerTimer -= 1
} else {
ShakeCaul(20 + NumberISMod(mCreatureController.Lust,30),50 + NumberISMod(mCreatureController.Lust,50))
if Chance(30) {
TwitchRun(5 + NumberISMod(mCreatureController.Lust,20))
}
if Chance(30) {
RandomShake()
}
ShakeCaulTimer = irandom_range(5000,8000) - NumberISMod(mCreatureController.Lust,2000) - ((2000 / 100) * mWorldController.MoonLustMod)
}

if WibbleTimer &gt; 0 {
WibbleTimer -= 1
} else {
WibbleTimer = BaseWibbleTimer - NumberISMod(mCreatureController.Lust,2000) - ((2000 / 100) * mWorldController.MoonLustMod)
}



//-----------------------------------------------------------------------------------------------------------------------------------------
//MEDIUM PRIORITY



//Randomised Shivering (Tied To Weather)
if InRitual = false {
if ShiverTimer &gt; 0 {
ShiverTimer -= 1 + ((2 / 100) * (100 - mCreatureController.Alive)) + ((0.5 / 100) * mCreatureController.Stress) + ((0.5 / 100) * mCreatureController.Tiredness) + ((0.5 / 100) * mCreatureController.Pain) 
+ ((0.5 / 100) * mEmotionSubController.SadActivation) + ((0.5 / 100) * mEmotionSubController.ShameActivation) + ((0.5 / 100) * mEmotionSubController.FearActivation) + ((0.5 / 100) * mCreatureController.Lust) 
+ ((0.5 / 100) * mCreatureController.Dirt) + ((0.5 / 25) * mWorldController.CurrentWindS) + ((7 / 30) * (30 - mWorldController.CurrentTemp))
} else if ShiverTimer &lt;= 0 {
TimeToShiver = irandom_range(35,65)
BaseBreathRate += 0.3
HoldBreathFor(TimeToShiver)
StartShiverBehaviour(
12 + ((5 / 100) * (100 - mCreatureController.Alive)) + ((5 / 100) * mCreatureController.Stress) + ((2 / 100) * mCreatureController.Tiredness) + ((1 / 100) * mCreatureController.Pain) 
+ ((2 / 100) * mEmotionSubController.SadActivation) + ((6 / 100) * mEmotionSubController.ShameActivation) + ((3 / 100) * mEmotionSubController.FearActivation) + ((3 / 100) * mCreatureController.Lust) 
+ ((2 / 100) * mCreatureController.Dirt) + ((2 / 25) * mWorldController.CurrentWindS) + ((2 / 30) * (30 - mWorldController.CurrentTemp)),TimeToShiver,3)
if Chance(85){FurShedding()}
ShiverTimer = 12000
}
}


//Random Twitching
if mCreatureController.Alive &lt;= 30 {
if RandomTwitchTimer &gt; 0 {
RandomTwitchTimer -= 1
} else if RandomTwitchTimer &lt;= 0 {
TwitchBehaviour = choose("blink","wink","browleft","browright","browboth","nose","mouth","mouthsides","cheekleft","cheekright","cheekboth","twitchrun")
switch TwitchBehaviour {
case "twitchrun":
TwitchRun(5 + round((20 / 100) * (100 - mCreatureController.Alive)))
break;
case "blink":
choose(StartBlinkBehaviour(),NumberOfBlinks(irandom_range(2,4)))
break;
case "wink":
StartWinkBehaviour("right")
break;
case "browleft":
StartEyebrowTwitchLeftBehaviour()
break;
case "browright":
StartEyebrowTwitchRightBehaviour()
break;
case "browboth":
StartEyebrowTwitchLeftBehaviour()
StartEyebrowTwitchRightBehaviour()
break;
case "nose":
StartTwitchBehaviour(3,4,2)
break;
case "mouth":
StartMouthCentreTwitchBehaviour(0.03,random_range(0.03,0.13))
break;
case "mouthsides":
Dir = choose("up","down")
StartMouthSideLeftTwitchBehaviour(Dir)
StartMouthSideRightTwitchBehaviour(Dir)
break;
case "cheekleft":
StartCheekTwitchLeftBehaviour()
break;
case "cheekright":
StartCheekTwitchRightBehaviour()
break;
case "cheekboth":
StartCheekTwitchLeftBehaviour()
StartCheekTwitchRightBehaviour()
break;
}
RandomTwitchTimer = irandom_range(2000,2100) - ((1950 / 39) * (40 - mCreatureController.Alive))
}
}



//Randomised Sneezing
if SneezeTimer &gt; 0 {
SneezeTimer -= (1 + (3 / 35) * (35 - mWorldController.CurrentTemp)) - ((1 / 100) * (100 - mCreatureController.Alive)) + ((1 / 100) * mCreatureController.Dirt)
} else if SneezeTimer &lt;= 0 {
if oNose1.Touching = false {
if Sneezed = false {
StopYawnBehaviour()
StartSneezeBehaviour(irandom_range(6,8),irandom_range(10,20),irandom_range(20,30),choose(-1,-1,-1,1))
mCreatureController.BaseStress += 1
mCreatureController.BaseTiredness += 1
mCreatureController.Dirt += 2
Sneezed = true 
} else if Sneezed = true and mBehavioursReactive.SneezeActive = false {
if InRitual = true and mCreatureController.Triad &lt;= 0 {
ChangeEmotion("fear","up",0.3,10 - ((30 * mCreatureController.Triad)))
}
RandomTwitch()
RandomTwitch()
StartNumberSniffsBehaviour(irandom_range(2,4))
if Chance(60){NumberOfBlinks(irandom_range(1,4))}
if Chance(70){StartTwitchNoseSideBehaviour(irandom_range(10,30))}
if Chance(50){StartSwallowBehaviour(3,5)}
Sneezed = false
SneezeTimer = irandom_range(20000,30000)
ChanceToWake(30)
}
}
}


//Randomised Swallowing 
if InRitual = false {
if SwallowTimer &gt; 0 {
SwallowTimer -= max(1,1 + ((1 / 100) * mEmotionSubController.FearActivation)) - ((1 / 100) * (100 - mCreatureController.Alive)) + ((1 / 100) * mCreatureController.Lust) + ((1 / 100) * mCreatureController.Thirst)

} else if SwallowTimer &lt;= 0 {
StopYawnBehaviour()
HoldBreathFor(20)
if Chance(40) {
StartEyebrowTwitchRightBehaviour()
StartEyebrowTwitchLeftBehaviour()
}
StartSwallowBehaviour(irandom_range(3,5),irandom_range(10,20))
SwallowTimer = irandom_range(8000,9000)
}
}


//Touch Taboo
if position_meeting(mouse_x,mouse_y,mTabooParent) or ((position_meeting(mouse_x,mouse_y,oEyeballLeft) or position_meeting(mouse_x,mouse_y,oEyeballLeft)) and EyeCuts &gt; 0) 
or (position_meeting(mouse_x,mouse_y,oHornSocketLeftBack) or position_meeting(mouse_x,mouse_y,oHornLeft) and oHornLeft.Growing = true) or (position_meeting(mouse_x,mouse_y,oHornRight) or position_meeting(mouse_x,mouse_y,oHornSocketRightBack) and oHornRight.Growing = true)
or (position_meeting(mouse_x,mouse_y,oCaulNub) and CaulCutTimer &gt; 0)
or (position_meeting(mouse_x,mouse_y,mWoundParent))
and mouse_check_button(mb_any) 
{

if DrivesAreOn() {

ChanceToWake(10)
BaseBreathRate += 0.0002

if TabooTouchTimer &lt;= 0 or mCreatureController.Triad &gt; 0 {

if IsInRitual() {
if ChanceToRitualReact() {
StartNumberSniffsBehaviour(1)
}
if Chance(45) {
MoveToXY(mouse_x,mouse_y,30,mInterfaceController.CurrentView,10)
}
}
StopYawnBehaviour()
TwitchRun(irandom_range(10,30))
if Chance(0.5) {
RandomShake()
}
if Chance(0.3) {
LittleJump()
}
ChangeEmotion("surprise","up",2,40)
HoldBreathFor(irandom_range(30,60))
TabooTouchTimer = irandom_range(700,1500) + ((600 / 100) * (100 - mCreatureController.Alive))
}

if Chance(0.01) {
TwitchRun(irandom_range(5,20))
}

if IsAsleep() = false {

with mCreatureController {
BaseResistance -= 0.1
BasePain += 0.2
BaseStress += 0.2
BaseAlive -= 0.005
}

if IsInRitual() {
with mCreatureController {
BaseLust += 0.3
CloseToAnne += 0.3
}

ChangeEmotionStep("happy","up",0.2)
if ChanceToRitualReact() {
EyeSquint(irandom_range(0,3),true,irandom_range(40,65))
}
} else {
ChangeEmotionStep("happy","down",0.2)
if mCreatureController.Triad &gt; 0 {
ChangeEmotionStep("sad","up",0.2)
ChangeEmotionStep("shame","up",0.2)
}
ChangeEmotionStep("fear","up",0.2)
with mCreatureController {
BaseTrust -= 0.2
BaseSubIntent -= 0.03
CloseToAnne -= 0.2
BaseLust -= 0.2
}
ChangeEmotionStep("fear","up",0.2)
ChangeEmotionStep("anger","up",NumberISMod(mCreatureController.Resistance,0.2))
if Chance(0.04) {
EyeSquint(irandom_range(0,3),true,irandom_range(40,65))
}
if Chance(0.01) {
choose(
MoveBackForward("retreat",10,irandom_range(20,30)),
RandomShake(),
VocaliseChance(100)
)
}
}
}
}
}


//-----------------------------------------------------------------------------------------------------------------------------------------
//HIGH PRIORITY

//Touching Eyes

if IsAlive() {
if mBehavioursDeliberative.PercentForward &gt; 60 {


// Left Eye 
if position_meeting(mouse_x,mouse_y,oEyeballLeft) and mouse_check_button(mb_any) {
if InRitual = true {
if EyeLReact = false {
if Chance(100 - ChanceToRitualReact()) {MoveToXY(oEyeballLeft.x,oEyeballLeft.y,70,mInterfaceController.CurrentView,50)}
if Chance(100 - ChanceToRitualReact()) {MoveBackForward("comeforward",irandom_range(30,60),irandom_range(10,20))}
StartEyebrowTwitchLeftBehaviour()
CurrentlyBlinking = false
CurrentlyWinking = false
CurrentlySquinting = false
StartCloseEyeBehaviour("left",0)
EyeLReact = true
}
mCreatureController.BaseResistance -= 0.3 + ((0.3 /100) * oEyeballLeft.Blackness * 100)
BaseBreathRate += 0.003
mCreatureController.SubIntent -= 0.001 + ((0.0001 /100) * oEyeballLeft.Blackness * 100)
mCreatureController.BasePain += 0.3 + ((0.03 /100) * oEyeballLeft.Blackness * 100)
mCreatureController.BaseTrust += 0.3 + ((0.03 /100) * oEyeballLeft.Blackness * 100)
mCreatureController.CloseToAnne += 0.3 + ((0.03 /100) * oEyeballLeft.Blackness * 100)
ChangeEmotionStep("happy","up",0.3)
ChangeEmotionStep("fear","up",0.05)
ChangeEmotionStep("anger","down",0.3)
} else {
if EyeLReact = false {
StartEyebrowTwitchLeftBehaviour()
CurrentlyBlinking = false
CurrentlyWinking = false
CurrentlySquinting = false
StartCloseEyeBehaviour("left",0)
if EyeSurpriseTimer &lt;= 0 {
LittleJump()
if Chance(10 + ((30 /100) * oEyeballLeft.Blackness * 100)) {
MoveBackForward("retreat",irandom_range(10,20),irandom_range(5,10))
}
if mCreatureController.Triad &gt; 0 {
ChangeEmotion("surprise","up",1.2,60)
} else {
ChangeEmotion("surprise","up",1.2,30)
}
VocaliseChance(40)
ChangeEmotion("happy","down",1,20)
ChangeEmotion("anger","up",1,30)
}
ChanceToWake(10 + ((20 /100) * oEyeballLeft.Blackness * 100))
mCreatureController.BasePain += 20 + ((10 /100) * oEyeballLeft.Blackness * 100)
mCreatureController.BaseStress += 20 +  ((10 /100) * oEyeballLeft.Blackness * 100)
mCreatureController.SubIntent -= 0.01 + ((0.01 /100) * oEyeballLeft.Blackness * 100)
mCreatureController.CloseToAnne -= 2 + ((2 /100) * oEyeballLeft.Blackness * 100)
mCreatureController.BaseTrust -= 4 + ((4 /100) * oEyeballLeft.Blackness * 100)
mCreatureController.BaseResistance += 2 + ((2 /100) * oEyeballLeft.Blackness * 100)
EyeLReact = true
}

if mCreatureController.Triad &lt; 0 {
ChangeEmotionStep("fear","up",0.2)
}
VocaliseChance(0.05)
mCreatureController.SubIntent -= 0.001 + ((0.0001 /100) * oEyeballLeft.Blackness * 100)
mCreatureController.CloseToAnne -= 0.3 + ((0.03 /100) * oEyeballLeft.Blackness * 100)
mCreatureController.BaseTrust -= 0.3 + ((0.03 /100) * oEyeballLeft.Blackness * 100)
mCreatureController.BaseResistance += 0.3 + ((0.03 /100) * oEyeballLeft.Blackness * 100)
mCreatureController.BaseStress += 0.3 +  ((0.02 /100) * oEyeballLeft.Blackness * 100)
mCreatureController.BasePain += 0.3 + ((0.03 /100) * oEyeballLeft.Blackness * 100)
mCreatureController.BaseAlive -= 0.003
ChangeEmotionStep("happy","down",0.3)
ChangeEmotionStep("anger","up",0.3)
ChangeEmotionStep("fear","up",0.3)
BaseBreathRate += 0.003
oEyeballLeft.Redness += 0.01
oEyeballLeft.Blackness += 0.01
ChanceToWake(0.2)
if Chance(0.2) {StartScreenShake(irandom_range(20,30),random_range(0.2,0.5),2)}
}
}

if EyeLReact = true {
if instance_exists(mFinger) = false or (instance_exists(mFinger) = true and place_meeting(mFinger.x,mFinger.y,oEyeballLeft) = false) or mBehavioursDeliberative.PercentForward &lt; 60 {
EyeLReact = false
EyeSurpriseTimer = irandom_range(500,800) + ((300 / 100) * (100 - mCreatureController.Alive))
CurrentlyBlinking = true
CurrentlyWinking = true
CurrentlySquinting = true
StartBlinkBehaviour()
}
}


if position_meeting(mouse_x,mouse_y,oEyeballRight) and mouse_check_button(mb_any) {
if InRitual = true {
if EyeRReact = false {
if Chance(100 - ChanceToRitualReact()) {MoveToXY(oEyeballRight.x,oEyeballRight.y,70,mInterfaceController.CurrentView,50)}
if Chance(100 - ChanceToRitualReact()) {MoveBackForward("comeforward",irandom_range(30,60),irandom_range(10,20))}
StartEyebrowTwitchLeftBehaviour()
CurrentlyBlinking = false
CurrentlyWinking = false
CurrentlySquinting = false
StartCloseEyeBehaviour("right",0)
EyeRReact = true
}
mCreatureController.BaseResistance -= 0.3 + ((0.3 /100) * oEyeballRight.Blackness * 100)
BaseBreathRate += 0.003
mCreatureController.SubIntent -= 0.001 + ((0.0001 /100) * oEyeballRight.Blackness * 100)
mCreatureController.BasePain += 0.3 + ((0.03 /100) * oEyeballRight.Blackness * 100)
mCreatureController.BaseTrust += 0.3 + ((0.03 /100) * oEyeballRight.Blackness * 100)
mCreatureController.CloseToAnne += 0.3 + ((0.03 /100) * oEyeballRight.Blackness * 100)
ChangeEmotionStep("happy","up",0.3)
ChangeEmotionStep("fear","up",0.05)
ChangeEmotionStep("anger","down",0.3)
} else {
if EyeRReact = false {
StartEyebrowTwitchRightBehaviour()
CurrentlyBlinking = false
CurrentlyWinking = false
CurrentlySquinting = false
StartCloseEyeBehaviour("right",0)
if EyeSurpriseTimer &lt;= 0 {
LittleJump()
if Chance(10 + ((30 /100) * oEyeballRight.Blackness * 100)) {
MoveBackForward("retreat",irandom_range(10,20),irandom_range(5,10))
}
if mCreatureController.Triad &gt; 0 {
ChangeEmotion("surprise","up",1.2,60)
} else {
ChangeEmotion("surprise","up",1.2,40)
}
VocaliseChance(40)
ChangeEmotion("happy","down",1,20)
ChangeEmotion("anger","up",1,30)
}
ChanceToWake(10 + ((20 /100) * oEyeballRight.Blackness * 100))
mCreatureController.BasePain += 20 + ((10 /100) * oEyeballRight.Blackness * 100)
mCreatureController.BaseStress += 20 +  ((10 /100) * oEyeballRight.Blackness * 100)
mCreatureController.SubIntent -= 0.01 + ((0.01 /100) * oEyeballRight.Blackness * 100)
mCreatureController.CloseToAnne -= 2 + ((2 /100) * oEyeballRight.Blackness * 100)
mCreatureController.BaseTrust -= 4 + ((4 /100) * oEyeballRight.Blackness * 100)
mCreatureController.BaseResistance += 2 + ((2 /100) * oEyeballRight.Blackness * 100)
EyeRReact = true
}

if mCreatureController.Triad &lt; 0 {
ChangeEmotionStep("fear","up",0.2)
}
VocaliseChance(0.05)
mCreatureController.SubIntent -= 0.001 + ((0.0001 /100) * oEyeballRight.Blackness * 100)
mCreatureController.CloseToAnne -= 0.3 + ((0.03 /100) * oEyeballRight.Blackness * 100)
mCreatureController.BaseTrust -= 0.3 + ((0.03 /100) * oEyeballRight.Blackness * 100)
mCreatureController.BaseResistance += 0.3 + ((0.03 /100) * oEyeballRight.Blackness * 100)
mCreatureController.BaseStress += 0.3 +  ((0.02 /100) * oEyeballRight.Blackness * 100)
mCreatureController.BasePain += 0.3 + ((0.03 /100) * oEyeballRight.Blackness * 100)
mCreatureController.BaseAlive -= 0.003
ChangeEmotionStep("happy","down",0.3)
ChangeEmotionStep("anger","up",0.3)
ChangeEmotionStep("fear","up",0.3)
BaseBreathRate += 0.003
oEyeballRight.Redness += 0.01
oEyeballRight.Blackness += 0.01
ChanceToWake(0.2)
if Chance(0.2) {StartScreenShake(irandom_range(20,30),random_range(0.2,0.5),2)}
}
}

if EyeRReact = true {
if instance_exists(mFinger) = false or (instance_exists(mFinger) = true and place_meeting(mFinger.x,mFinger.y,oEyeballRight) = false) or mBehavioursDeliberative.PercentForward &lt; 60 {
EyeRReact = false
EyeSurpriseTimer = irandom_range(500,800) + ((300 / 100) * (100 - mCreatureController.Alive))
CurrentlyBlinking = true
CurrentlyWinking = true
CurrentlySquinting = true
StartBlinkBehaviour()
}
}

}
}

if EyeSurpriseTimer &gt; 0 {
EyeSurpriseTimer -= 1
}



//Chance To Sniff if Finger is placed below nose
if FingerUnderNoseTimer &gt; 0 {
FingerUnderNoseTimer -= 1
}

if FingerUnderNoseTimer &lt;= 0 and IsAlive() and AmountForward(70)
and mouse_check_button_pressed(mb_any) and mouse_y &gt;= oBLNostrilSocket.y and mouse_y &lt;= oBLNostrilSocket.y + 200
and mouse_x &gt; oBLNostrilSocket.x and mouse_x &lt; oBRNostrilSocket.x and mInterfaceController.GrabbingBodyPart = false {
ChanceToWake(5)
StartEyebrowTwitchRightBehaviour()
StartEyebrowTwitchLeftBehaviour()
StartCheekTwitchLeftBehaviour()
StartCheekTwitchRightBehaviour()
if IsInRitual() {
if mBehavioursDeliberative.PercentForward &lt; 100 {
MoveBackForward("comeforward",25,100 - mBehavioursDeliberative.PercentForward)
}
MoveToXY(oNose1.x,oNose1.y + (oNose1.sprite_height / 2),25,mInterfaceController.CurrentView,10)
HoldBreathFor(irandom_range(20,45))
StartNumberSniffsBehaviour(irandom_range(1,3))
StartTwitchNoseSideBehaviour(irandom_range(10,25))
choose(
NumberOfBlinks(irandom_range(2,6)),
EyeSquint(irandom_range(0,2),true,irandom_range(20,45))
)
} else {
if mCreatureController.Triad &gt; 0 and mEmotionSubController.Fear &lt; 60 {
HoldBreathFor(irandom_range(20,45))
MoveToXY(oNose1.x,oNose1.y + (oNose1.sprite_height / 2),25,mInterfaceController.CurrentView,10)
StartNumberSniffsBehaviour(irandom_range(1,3))
if mBehavioursDeliberative.PercentForward &lt; 100 {
MoveBackForward("comeforward",25,100 - mBehavioursDeliberative.PercentForward)
}
choose(
NumberOfBlinks(irandom_range(2,6)),
EyeSquint(irandom_range(0,2),true,irandom_range(20,45))
)
StartTwitchNoseSideBehaviour(irandom_range(10,25))
} else {
if Chance(20 - (20 * mCreatureController.Triad) + ((20 / 100) * mEmotionSubController.FearActivation)) {
MoveBackForward("retreat",15,irandom_range(5,20))
}
StartTwitchNoseSideBehaviour(irandom_range(10,25))
choose(
NumberOfBlinks(irandom_range(2,6)),
EyeSquint(irandom_range(0,2),true,irandom_range(20,45))
)
}
}
FingerUnderNoseTimer = 2000
}

//Cutting Eyes

if IsAlive() and AmountForward(60) {
if(instance_exists(mFinger) and place_meeting(mFinger.x,mFinger.y,oEyeballLeft))
and mInterfaceController.CurrentHandUse = "knife" and oEyeballLeft.CutUp = false {
oEyeballLeft.CutUp = true
CreateParticleSplash(mFinger.x,mFinger.y,oEyeballLeft.sprite_width/2,ps_shape_ellipse,ps_distr_gaussian,BloodLiquidColour,30,50,0.2,0.5,0,360,20,30,0.2,200)
CreateStain(50,0,360,20,30,0.02,2,6,1,3,BloodLiquidColour,mFinger.x,mFinger.y)
StopYawnBehaviour()
StopMoveInOut()
StopXYMove()

if EyeCutTimer &lt;= 0 {
ChangeEmotion("surprise","up",2,100)
LittleJump()
EyeCutTimer = 25000
BaseBreathRate += 1
}

if Chance(0.1){RandomShake()}
StartCloseEyeBehaviour("left",0)
BaseBreathRate += 0.5
ChanceToWake(100)
mCreatureController.BasePain += 30
mCreatureController.BaseStress += 50
mCreatureController.BaseAlive -= 5
VocaliseChance(80)

if IsInRitual() {
oEyeballLeft.TargetBlackness += 0.03
oEyeballLeft.BaseRedness += 0.03
mCreatureController.BaseResistance -= 40
mCreatureController.BaseLust -= 30
ChangeEmotionStep("happy","up",20)
} else {
TwitchRun(irandom_range(25,40))
oEyeballLeft.TargetBlackness += 0.8
oEyeballLeft.BaseRedness += 0.8
mCreatureController.BaseSubIntent -= 5
mCreatureController.BaseResistance -= 25
mCreatureController.BaseLust -= 50
mCreatureController.CloseToAnne -= 30
if Chance(60){StartNumberSniffsBehaviour(1)}
MoveBackForward("retreat",irandom_range(20,30),60)
ChangeEmotion("happy","down",0.7,70)
ChangeEmotion("anger","up",0.7,40)
ChangeEmotion("fear","up",0.7,50)
ChangeEmotion("shame","up",0.7,50)
ChangeEmotion("sad","up",0.7,50)
}
}
}


if IsAlive() and AmountForward(60) {
if(instance_exists(mFinger) and place_meeting(mFinger.x,mFinger.y,oEyeballRight))
and mInterfaceController.CurrentHandUse = "knife" and oEyeballRight.CutUp = false {
oEyeballRight.CutUp = true
CreateParticleSplash(mFinger.x,mFinger.y,oEyeballRight.sprite_width/2,ps_shape_ellipse,ps_distr_gaussian,BloodLiquidColour,30,50,0.2,0.5,0,360,20,30,0.2,200)
CreateStain(50,0,360,20,30,0.02,2,6,1,3,BloodLiquidColour,mFinger.x,mFinger.y)
StopYawnBehaviour()
StopMoveInOut()
StopXYMove()

if EyeCutTimer &lt;= 0 {
ChangeEmotion("surprise","up",2,100)
LittleJump()
EyeCutTimer = 25000
BaseBreathRate += 1
}

if Chance(0.1){RandomShake()}
StartCloseEyeBehaviour("left",0)
BaseBreathRate += 0.5
ChanceToWake(100)
mCreatureController.BasePain += 30
mCreatureController.BaseStress += 50
mCreatureController.BaseAlive -= 5
VocaliseChance(80)

if IsInRitual() {
oEyeballRight.TargetBlackness += 0.03
oEyeballRight.BaseRedness += 0.03
mCreatureController.BaseResistance -= 40
mCreatureController.BaseLust -= 30
ChangeEmotionStep("happy","up",20)
} else {
TwitchRun(irandom_range(25,40))
oEyeballRight.TargetBlackness += 0.8
oEyeballRight.BaseRedness += 0.8
mCreatureController.BaseSubIntent -= 5
mCreatureController.BaseResistance -= 25
mCreatureController.BaseLust -= 50
mCreatureController.CloseToAnne -= 30
if Chance(60){StartNumberSniffsBehaviour(1)}
MoveBackForward("retreat",irandom_range(20,30),60)
ChangeEmotion("happy","down",0.7,70)
ChangeEmotion("anger","up",0.7,40)
ChangeEmotion("fear","up",0.7,50)
ChangeEmotion("shame","up",0.7,50)
ChangeEmotion("sad","up",0.7,50)
}
}
}





if EyeCutTimer &gt; 0 {
EyeCutTimer -= 1 
}

//Caul Touch Reactions

if StartTouchingCaul = false {
if IsAlive() and AmountForward(80)
and instance_exists(mFinger)
and place_meeting(mFinger.x,mFinger.y,mCaulParent) {
TouchCaulReactions()
}
} else if StartTouchingCaul = true {
if (instance_exists(mFinger)
and place_meeting(mFinger.x,mFinger.y,mCaulParent))
or instance_exists(mFinger) = false {
StartTouchingCaul = false
}
}


//--------------------------------------------------------

//Actions When Dead
//------------------------------------
} else if mCreatureController.Alive &lt;= 0 {
DeathRoutines()

if CreatureSuperDied = true {
if mInterfaceController.DeadMod &lt; 8000 {
mInterfaceController.DeadMod += 1
}
}


}
}




//Cut Reactions
if CutTimer &gt; 0 {
CutTimer -= 1
}


//Cut Start
if CutReact = true {
if IsAlive() {
ChanceToWake(100)
TwitchIfNearBP(mouse_x,mouse_y,500)
StopYawnBehaviour()
StopVocalisation()
StopVocalPhrase()
StopXYMove()

if IsAsleep() = false {
if IsInRitual() {
if CutTimer = 0 {
ChangeEmotion("surprise","up",0.8,40 + (max(0,((30 / 100) * (mCreatureController.Triad * 100)))))
if ChanceToRitualReact(){StartNumberSniffsBehaviour(1)}
if ChanceToRitualReact(){LittleJump()}
mCreatureController.BaseResistance -= 10
mCreatureController.BasePain += 10
mCreatureController.BaseAlive -= 0.5
mCreatureController.CloseToAnne += 4
HoldBreathFor(irandom_range(30,80))
mDriveCollectionMaster.BaseBreathRate += 0.5
if ChanceToRitualReact(){ShiverChance(60)}
if ChanceToRitualReact(){EyeSquint(irandom_range(0,2),true,irandom_range(50,90))}
CutTimer = 3600 - NumberISMod(mCreatureController.Resistance,400) + NumberISMod(mCreatureController.Stress,400) + NumberISMod(mCreatureController.Tiredness,400) + LowAliveMod(400) - NumberISMod(mCreatureController.Trust,400)
} else {
if ChanceToRitualReact(){StartNumberSniffsBehaviour(1)}
mCreatureController.BaseResistance -= 10
mCreatureController.BasePain += 10
mCreatureController.BaseAlive -= 0.5
mCreatureController.CloseToAnne += 4
mDriveCollectionMaster.BaseBreathRate += 0.5
if ChanceToRitualReact(){ShiverChance(60)}
if ChanceToRitualReact(){EyeSquint(irandom_range(0,2),true,irandom_range(50,90))}
}


} else {
if CutTimer = 0 {
ChangeEmotion("surprise","up",0.8,30 + (max(0,((30 / 100) * (mCreatureController.Triad * 100)))))
VocaliseChance(80)
if Chance(80) {StartNumberSniffsBehaviour(1)}
if Chance(70){RandomShake()}
if Chance(70){LittleJump()}
ShiftAway(mouse_x,mouse_y,irandom_range(100,200),random(360))
TwitchRun(irandom_range(6,15))
if Chance(30){MoveBackForward("retreat",10,irandom_range(5,20))}
mCreatureController.BaseResistance -= 10
mCreatureController.BasePain += 10
mCreatureController.BaseStress += 10
mCreatureController.BaseAlive -= 0.5
mCreatureController.CloseToAnne -= 5
mCreatureController.BaseSubIntent -= 0.2
mCreatureController.BaseTrust -= 10
ChangeEmotion("happy","down",2,70)
if mCreatureController.Triad &gt; 0 {
ChangeEmotion("shame","up",2,30)
ChangeEmotion("anger","up",2,25)
}
mCreatureController.BaseLust -= 50
ChangeEmotion("fear","up",2,50)
HoldBreathFor(irandom_range(30,80))
mDriveCollectionMaster.BaseBreathRate += 0.5
if Chance(20){EyeSquint(irandom_range(0,2),true,irandom_range(50,90))}
CutTimer = 3600 - NumberISMod(mCreatureController.Resistance,400) + NumberISMod(mCreatureController.Stress,400) + NumberISMod(mCreatureController.Tiredness,400) + LowAliveMod(400) - NumberISMod(mCreatureController.Trust,400)
} else {
VocaliseChance(20)
if Chance(20){StartNumberSniffsBehaviour(1)}
if Chance(10){RandomShake()}
if Chance(10){LittleJump()}
TwitchRun(irandom_range(2,5))
ShiftAway(mouse_x,mouse_y,irandom_range(40,60),random(360))
if Chance(70){MoveBackForward("retreat",10,irandom_range(10,30))}
mCreatureController.BaseResistance -= 10
mCreatureController.BasePain += 10
mCreatureController.BaseStress += 10
mCreatureController.BaseAlive -= 0.5
mCreatureController.CloseToAnne -= 5
mCreatureController.BaseSubIntent -= 0.2
mCreatureController.BaseTrust -= 10
ChangeEmotion("happy","down",2,60)
if mCreatureController.Triad &gt; 0 {
ChangeEmotion("shame","up",2,30)
ChangeEmotion("anger","up",2,25)
}
mCreatureController.BaseLust -= 50
ChangeEmotion("fear","up",2,50)
HoldBreathFor(irandom_range(30,80))
mDriveCollectionMaster.BaseBreathRate += 0.5
if Chance(20){EyeSquint(irandom_range(0,2),true,irandom_range(50,90))}
}
}
}
}
CutReact = false
}

//During Cut
if mInterfaceController.Wounding = true {
CutCaulReactions()
if IsInRitual() {
mCreatureController.BaseResistance -= 0.1
mCreatureController.BasePain += 0.1
mCreatureController.BaseAlive -= 0.05
mCreatureController.CloseToAnne += 0.1
mDriveCollectionMaster.BaseBreathRate += 0.03
if ChanceToRitualReact()/1000{ShiverChance(60)}
if ChanceToRitualReact()/1000{EyeSquint(irandom_range(0,2),true,irandom_range(50,90))}
} else {
VocaliseChance(1)
if Chance(2){RandomShake()}
if Chance(4){ShiftAway(mouse_x,mouse_y,irandom_range(100,200),random(360))}
if Chance(5){EyeSquint(irandom_range(0,2),true,irandom_range(50,90))}
if Chance(2){TwitchRun(irandom_range(6,15))}

ReCh = irandom_range(0,100) - ((30 / 100) * mCreatureController.Resistance) + ((20 / 100) * mCreatureController.Trust) + ((10 / 100) * (mCreatureController.Triad * 100))
+ ((10 / 100) * (100 - mCreatureController.Alive)) - ((10 / 100) * mEmotionSubController.FearActivation)
if ReCh &lt;= 40 {
MoveBackForwardUnCapped("retreat",10,irandom_range(10,20))
}

mCreatureController.BaseResistance -= 0.1
mCreatureController.BasePain += 0.1
mCreatureController.BaseStress += 0.1
mCreatureController.BaseAlive -= 0.05
mCreatureController.CloseToAnne -= 0.2
mCreatureController.BaseSubIntent -= 0.002
mCreatureController.BaseTrust -= 0.1
ChangeEmotionStep("happy","down",1)
if mCreatureController.Triad &gt; 0 {
ChangeEmotionStep("shame","up",1)
ChangeEmotionStep("anger","up",1)
}
mCreatureController.BaseLust -= 0.1
ChangeEmotionStep("fear","up",1)
mDriveCollectionMaster.BaseBreathRate += 0.05
}
}


//End Of Cut
if CutReactOut = true {
if IsInRitual() {
if ChanceToRitualReact(){LittleJump()}
if ChanceToRitualReact(){HoldBreathFor(irandom_range(30,80))}
if ChanceToRitualReact(){VocaliseChance(100)
if ChanceToRitualReact(){EyeSquint(irandom_range(0,2),true,irandom_range(50,90))}
if ChanceToRitualReact(){TwitchRun(irandom_range(6,15))}
} else {
if Chance(40){HoldBreathFor(irandom_range(30,80))}
if Chance(50){LittleJump()}
VocaliseChance(30)
if Chance(50){RandomShake()}
if Chance(30){ShiftAway(mouse_x,mouse_y,irandom_range(100,200),random(360))}
if Chance(50){EyeSquint(irandom_range(0,2),true,irandom_range(50,90))}
if Chance(35){TwitchRun(irandom_range(6,15))}
if Chance(45){MoveBackForward("retreat",10,irandom_range(5,20))}
}
}
CutReactOut = false
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ritual Competences

//In Ritual
if InRitual = true {

if RitualInternalMod &lt; 50 {
RitualInternalMod += 2
}

if RitualPitchMod &lt; 0.3 {
RitualPitchMod += 0.01
}

//Tolerance Climbing Over Time, Based On Internal States &amp; Concepts
RitualTolerance += (0.001 +
((0.01 / 100) * mCreatureController.Pain)
+ ((0.005 / 100) * mCreatureController.Stress)
+ ((0.005 / 100) * mCreatureController.Tiredness)
- ((0.008 / 100) * (100 - mCreatureController.Alive))
+ ((0.005 / 100) * mCreatureController.Resistance)
- ((0.005 / 100) * mCreatureController.Trust)
- ((0.005 / 100) * mCreatureController.Triad * 100)
)


//Slight Vibrate
if RitualModTimer &gt; 0 {
RitualModTimer -= 1
if RitualModDir = "left" {
RitualModX -= 1
} else {
RitualModX += 1
}
} else if RitualModTimer &lt;= 0 {
if RitualModDir = "left" {
RitualModDir = "right"
} else {
RitualModDir = "left"
}
RitualModTimer = RitualModTimerTotal
}



//Tiredness Up Over Time
mCreatureController.BaseTiredness += 0.0005

//Ending Ritual
if RitualTolerance &gt;= 100 or mCreatureController.Alive &lt;= 0 or mDriveCollectionMaster.NoInteractionTimer &gt;= 20000 {
ExitRitual()
}

//More chance of twitching as the tolerance goes up.
if RitualTolerance &gt; 70 {
if Chance(1 + ((40 / 100) * RitualTolerance)) {
RandomTwitch()
}
}

} else {
//Out Of Ritual

if RitualModX &gt; 0 {
RitualModX -= 1
} else if RitualModX &lt; 0 {
RitualModX += 1
}

if RitualInternalMod &gt; 0 {
RitualInternalMod -= 2
}

if RitualTolerance &gt; 0 {
RitualTolerance -= 1
}

if RitualPitchMod &gt; 0 {
RitualPitchMod -= 0.01
}
}

RitualInternalMod = clamp(RitualInternalMod,0,50)
RitualTolerance = clamp(RitualTolerance,0,100)
RitualPitchMod = clamp(RitualPitchMod,0,0.3)


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pursuing Current Drive
/*
//Perform actions based on CurrentDrive variable.
//- If completion criteria reached, remove active drive.
//- If frustration condition reached, lower current retries by 1.
//- If retries reach 0, remove active drive and set cooldown of drive.


switch CurrentDrive {
//---------------------------------------------------------- FALLING ASLEEP
case "fallasleep":
if SleepChanceTimer &gt; 0 {
SleepChanceTimer -= 1
if SleepingTwitches = false {
if Chance(70 - ((40 / 3) * CurrentRetries)) and mBehavioursDeliberative.PercentForward &gt; 50 {
MoveBackForward("retreat",irandom_range(50,70),irandom_range(10,30))
}

if Chance(60) {
Twitches = round(((3 / 3) * (3 - CurrentRetries)) + ((6 / 100) * mCreatureController.Tiredness))

for (i = 0; i &lt; Twitches; i++) {
RandomTwitch()
}
}

ShiverChance(30 + ((30 / 100) * mCreatureController.Tiredness)  - ((20 / 3) * CurrentRetries))

if Chance(40 - ((20 / 3) * CurrentRetries) + ((30 / 100) * mCreatureController.Tiredness)) {
StartYawnBehaviour()
}

if Chance(40 - ((20 / 3) * CurrentRetries) + ((30 / 100) * mCreatureController.Tiredness)) {
MoveToXY(0,800,irandom_range(80,120),MacroView,irandom_range(80,120))
}

if Chance(10 - ((5 / 3) * CurrentRetries)) {
RandomVoc(random_range(0.1,0.4))
}

if Chance(30 - ((10 / 3) * CurrentRetries)) {
StartNumberSniffsBehaviour(irandom_range(1,3))
}

SleepingTwitches = true
} else {
if mBehavioursReactive.Sleeping = false {
StartSleepBehaviour(irandom_range(0,4))
}
}
}

CompleteRetry("fallasleep")
break;
//---------------------------------------------------------- PLAYER LEAVE
case "playerleave":
if LeaveTimer &lt; LeaveThreshold {
LeaveTimer += 1

if GoneToCenter = false {
MoveToXY(0,1000 + LeaveYRand,irandom_range(30,50),MacroView,70)
GoneToCenter = true
}

if GoneToCenter = true {

if NoInteractionTimer &lt; 250 {


ChangeEmotionStep("anger","up",0.02)
ChangeEmotionStep("fear","up",0.02)
mCreatureController.BaseStress += 0.02
mCreatureController.BaseTrust -= 0.02
mCreatureController.BaseSubIntent -= 0.0001
ChangeEmotionStep("happy","down",0.02)

SeenPlayerTimer = 500

if LeaveRandomActTimer &gt; 0 {
LeaveRandomActTimer -= 1
} else {
ActNumber = choose(1,2,3,4,5,6,7,8)
switch ActNumber {
case 1:
RandomVoc(0.5 + ((0.5 / 100) * mEmotionSubController.AngerActivation))
break;
case 2:
MoveToXY(oMouthCentre.x,oMouthCentre.y,80,MicroView,80)
RandomVoc(0.5 + ((0.5 / 100) * mEmotionSubController.AngerActivation))
ZoomWait = 3
break;
case 3:
MoveToXY(oEyeballLeft.x,oEyeballLeft.y,80,MicroView,80)
ZoomWait = 3
break;
case 4: 
MoveToXY(oEyeballRight.x,oEyeballRight.y,80,MicroView,80)
ZoomWait = 3
break;
case 5: 
MoveToXY(oNose1.x,oNose1.y,80,MicroView,80)
StartShiverBehaviour(0.3,7,5)
ZoomWait = 3
break;
case 6: 
MoveBackForward("retreat",irandom_range(6,12),irandom_range(10,30))
break;
case 7: 
MoveBackForward("comeforward",irandom_range(6,12),irandom_range(10,30))
break;
case 8:
StartShiverBehaviour(irandom_range(5,10),irandom_range(10,30),irandom_range(5,9))
break;
}
LeaveRandomActTimer = irandom_range(100,400)
}


} else if NoInteractionTimer &gt; 250 {

SeenPlayerTimer -= 1

if LeaveRandomActTimer &gt; 0 {
LeaveRandomActTimer -= 1
} else {
ActNumber = choose(1,2,3,4,5)
switch ActNumber {
case 1:
RandomVoc(0.5 + ((0.5 / 100) * mEmotionSubController.AngerActivation))
break;
case 2: 
EyeSquint(irandom_range(1,3),true,irandom_range(60,120))
break;
case 3:
MoveToXY(oEyeballLeft.x,oEyeballLeft.y,80,MicroView,80)
ZoomWait = 3
break;
case 4: 
MoveToXY(oEyeballRight.x,oEyeballRight.y,80,MicroView,80)
ZoomWait = 3
break;
case 5: 
StartNumberSniffsBehaviour(irandom_range(1,4))
break;
}
LeaveRandomActTimer = irandom_range(100,400)
}

}
}
}

CompleteRetry("playerleave")
break;

//---------------------------------------------------------- PLAYER COME
case "playercome":
if PCTimerStarted = false {
PCTimer = 0 
PCTimerThreshold = irandom_range(600,1200 + ((500 * mCreatureController.Triad)))
PCInteractTimer = 100
PCTimerStarted = true
} else {
if PCTimer &lt; PCTimerThreshold {
ChangeEmotionStep("sad","up",0.01 + (0.01 * mCreatureController.Triad))
ChangeEmotionStep("anger","up",0.01 - (0.01 * mCreatureController.Triad) + ((0.01 / 100) * mCreatureController.Resistance))
mCreatureController.BaseTrust -= 0.01 - (0.01 * mCreatureController.Triad)
ChangeEmotionStep("happy","down",0.01 - (0.01 * mCreatureController.Triad))
ChangeEmotionStep("shame","up",0.01 + (0.01 * mCreatureController.Triad))
ChangeEmotionStep("fear","up",0.01 + (0.01 * mCreatureController.Triad))
mCreatureController.BaseStress += 0.01
mCreatureController.BaseSubIntent -= 0.0001
mCreatureController.CloseToAnne -= 0.01

PCTimer += 1
if PCInteractTimer &gt; 0 {
PCInteractTimer -= 1
} else {
RandomNum = irandom_range(1,11)
switch RandomNum {
case 1:
VocaliseChance(100)
break;
case 2:
if Chance(50){EyeSquint(1,true,25)}
MoveToXY(oEyeballLeft.x,oEyeballLeft.y,80,MicroView,80)
ZoomWait = 3
break;
case 3:
if Chance(50){EyeSquint(1,true,25)}
MoveToXY(oEyeballRight.x,oEyeballRight.y,80,MicroView,80)
ZoomWait = 3
if Chance(50){EyeSquint(1,true,25)}
break;
case 4:
EyeSquint(1,true,25)
break;
case 5:
StartNumberSniffsBehaviour(irandom_range(1,4))
break;
case 6:
if mCreatureController.Lust &gt; 60 {
StartCaulVibrateBehaviour(irandom_range(30,50))
MoveToXY(oCaulLip.x,oCaulLip.y,80,MicroView,80)
ZoomWait = 3
}
break;
case 7:
MoveToXY(oHornLeft.x,oHornLeft.y,80,MicroView,80)
ZoomWait = 3
break;
case 8:
MoveToXY(oHornRight.x,oHornRight.y,80,MicroView,80)
ZoomWait = 3
break;
case 9:
if mBehavioursDeliberative.PercentForward &lt; 100 {
MoveBackForwardUnCapped("comeforward",20,100 -  mBehavioursDeliberative.PercentForward)
}
break;
case 10:
EyeSquint(1,true,40)
MoveBackForward("retreat",30,irandom_range(20,30))
break;
case 11:
MoveToXY(oMouthCentre.x,oMouthCentre.y,25,MicroView,25)
ZoomWait = 3
VocaliseChance(100)
break;
}
PCInteractTimer = 500 + ((30 / 100) * (100 - mCreatureController.Alive)) + ((50 / 100) * (mCreatureController.Tiredness)) - ((30 / 100) * (100 - mCreatureController.Lust)) - ((60 * mCreatureController.Triad))
+ ((100 / 100) * (100 - mCreatureController.Trust)) - ((70 / 100) * (100 - mEmotionSubController.FearActivation)) - ((40 / 100) * (100 - mCreatureController.Pain)) - ((40 / 100) * (100 - mEmotionSubController.SadActivation))
}
}
CompleteRetry("playercome")
}
break;

//---------------------------------------------------------- FLEE
case "flee":
if FleeSet = false {
NotReturnTimer = irandom_range(400,800 - (600 * mCreatureController.Triad))
if Chance(40) {
StartCloseEyeBehaviour("both",1)
}
VocaliseChance(40)
if Chance(20) {StartShiverBehaviour(0.2,10,3)}
MoveBackForwardUnCapped("retreat",irandom_range(20,50),100)
FleeSet = true
} else if FleeSet = true {
CompleteRetry("flee")
}
break;

//---------------------------------------------------------- RETREAT
case "retreat":
if RetreatSet = false {
RandomTwitch()
RandomTwitch()
RandomTwitch()
VocaliseChance(10 + ((5 / 100) * mEmotionSubController.FearActivation) - ((5 / 100) * (100 - mCreatureController.Alive))) 
BackAmount = 10 + ((3 / 100) * mCreatureController.Stress) - ((3 / 100) * mCreatureController.Pain) - ((5 / 100) * (100 - mCreatureController.Alive)) - ((2 / 100) * (mCreatureController.Tiredness)) + ((10 / 100) * mCreatureController.Resistance)
+ ((10 / 100) * (100 - mCreatureController.Trust)) - (10 * mCreatureController.Triad) + ((10 / 100) * mEmotionSubController.AngryActivation)
+ ((10 / 100) * mEmotionSubController.FearActivation) + ((10 / 100) * mEmotionSubController.ShameActivation) - ((10 / 100) * mEmotionSubController.HappyActivation)
BackRate = 20 - ((3 / 100) * mCreatureController.Stress) - ((3 / 100) * mCreatureController.Pain) + ((5 / 100) * (100 - mCreatureController.Alive)) + ((5 / 100) * (mCreatureController.Tiredness)) - ((10 / 100) * mCreatureController.Resistance)
- ((10 / 100) * (100 - mCreatureController.Trust)) + (10 * mCreatureController.Triad) - ((10 / 100) * mEmotionSubController.AngryActivation)
+ ((10 / 100) * mEmotionSubController.FearActivation) + ((10 / 100) * mEmotionSubController.ShameActivation) + ((10 / 100) * mEmotionSubController.HappyActivation)
BackAmount = clamp(BackAmount,3,100)
BackRate = clamp(BackRate,5,60)
BackThreshold = mBehavioursDeliberative.PercentForward - BackAmount
BackThreshold = clamp(BackThreshold,0,100)
MoveBackForwardUnCapped("retreat",BackRate,BackAmount)

NotReturnTimer = irandom_range(400,800 - (600 * mCreatureController.Triad))
RetreatSet = true
} else if RetreatSet = true {
CompleteRetry("retreat")
}
break;

//---------------------------------------------------------- TO DEFAULT POS

case "todefaultpos":
if XYMoveSet = false {
XYSpeed = 40 + ((20 / 100) * (100 - mCreatureController.Alive)) + ((10 / 100) * mCreatureController.Tiredness) + ((10 / 100) * mCreatureController.Pain) - ((10 / 100) * mCreatureController.Trust) 
- ((10 / 100) * mEmotionSubController.HappyActivation) - ((10 / 100) * mEmotionSubController.AngryActivation) + ((10 / 100) * mEmotionSubController.SadActivation) + ((10 / 100) * mEmotionSubController.ShameActivation)
- ((10 / 100) * mEmotionSubController.FearActivation)
MoveToXY(0,1000,XYSpeed,MacroView,XYSpeed)
XYMoveSet = true
} else if XYMoveSet = true {
CompleteRetry("todefaultpos")
}
break;

//---------------------------------------------------------- COME FORWARD 

case "comeforward":
if ForwardSet = false {
ForwardRate = 25 + ((10 / 100) * (100 - mCreatureController.Alive)) + ((10 / 100) * mCreatureController.Tiredness) + ((10 / 100) * mCreatureController.Pain) - ((20 / 100) * mCreatureController.Lust) 
+ ((10 / 100) * mEmotionSubController.SadActivation) - ((10 / 100) * mEmotionSubController.HappyActivation)+ ((15 / 100) * mCreatureController.Resistance)
ForwardAmount = 25 + ((10 / 100) * (100 - mCreatureController.Alive)) - ((10 / 100) * mCreatureController.Stress) - ((10 / 100) * mCreatureController.Resistance) +  ((10 / 100) * mCreatureController.CloseToAnne)
- ((10 / 100) * (100 - mCreatureController.Trust)) + ((10 * mCreatureController.Triad)) - ((10 / 100) * mEmotionSubController.AngryActivation) - ((10 / 100) * mEmotionSubController.FearActivation) -  
((10 / 100) * mEmotionSubController.ShameActivation)
ForwardThreshold = mBehavioursDeliberative.PercentForward + ForwardAmount
ForwardRate = clamp(ForwardRate,3,100)
ForwardThreshold = clamp(ForwardThreshold,0,100)
MoveBackForwardUnCapped("comeforward",ForwardRate,ForwardAmount)
if Chance(25) {StartShiverBehaviour(random_range(0.2,0.4),irandom_range(20,40),irandom_range(4,7))}
if Chance(30) {StartNumberSniffsBehaviour(irandom_range(1,3))}
RandomTwitch()
RandomTwitch()
RandomTwitch()
RandomTwitch()
ForwardSet = true
} else if ForwardSet = true {
CompleteRetry("comeforward")
}
break;

//---------------------------------------------------------- GO TO EAT

case "gotoeat":
if GTEPauseTimer &gt; 0 {
GTEPauseTimer -= 1
} else {
if GTESet = false {
if mCreatureController.Triad &gt; 0 {
if Chance(70) {
choose(
VocaliseChance(100),
StartVocalPhrase(irandom_range(2,3))
)
}
}
RandomTwitch()
RandomTwitch()
if Chance(50){LittleJump()}
if Chance(60){StartTwitchNoseSideBehaviour(irandom_range(20,40))}
ChangeEmotion("happy","up",0.5,10)
ChangeEmotion("anger","down",0.4,10)
mCreatureController.BaseStress -= 7
GTEBreaks = irandom_range(0,4) - round((2 * mCreatureController.Triad))
GTEBreaks = clamp(GTEBreaks,0,6)
GTEAmount = mBehavioursDeliberative.PercentForward
AmountPerStop = round(GTEAmount/GTEBreaks)
GTEWaitTimerBase = irandom_range(60,100) + ((50 / 100) * mEmotionSubController.FearActivation) - ((50 / 100) * mCreatureController.Trust)
GTEWaitTimer = GTEWaitTimerBase 
GTERate = irandom_range(20,30) - (15 * mCreatureController.Triad) - ((10 / 100) * mEmotionSubController.AngerActivation) + ((10 / 100) * mCreatureController.Tiredness)
+ ((10 / 100) * mCreatureController.Pain) - ((10 / 100) * mCreatureController.Stress) - ((10 / 100) * mCreatureController.Resistance) - ((10 / 100) * mCreatureController.CloseToAnne)
- ((10 / 100) * mEmotionSubController.HappyActivation) - ((10/60) * TimeThroughEatingHour()) + ((10 / 100) * EaternAmountToday)
GTERate = clamp(GTERate,10,100)
GTESet = true
} else if GTESet = true {
//Disappear Slowly
if MovingActive = false {
if mBehavioursDeliberative.PercentForward &gt; 0 {
if GTEWaitTimer &gt; 0 {
GTEWaitTimer -= 1 
} else {
if GTEBreaks &gt; 0 {
MoveBackForwardUnCapped("retreat",GTERate,AmountPerStop)
VocaliseChance(10)
GTEBreaks -= 1
GTEWaitTimer = GTEWaitTimerBase
} else if GTEBreaks = 0 {
if mBehavioursDeliberative.PercentForward &gt; 0 {
MoveBackForwardUnCapped("retreat",GTERate,mBehavioursDeliberative.PercentForward)
}
}
}
} else {
StartCrunchingBehaviour()
}
}
CompleteRetry("gotoeat")
}
}
break;

//---------------------------------------------------------- ACCEPT RITUAL

case "acceptritual":
if ARSet = false {
StartShiverBehaviour(0.3,ARWaitTimer,3)
StartCloseMouthBehaviour(0.2,0)
if Chance(50) {
EyeSquint(0,true,ARWaitTimer)
}
AcceptOrNot = 0 - (NotInWorkingHours()) + ((1 / 100) * (100 - mCreatureController.Alive)) - ((1 / 100) * mCreatureController.Tiredness) - ((1 / 100) * mCreatureController.Pain)
+ ((1 / 100) * mCreatureController.Lust) - ((1 / 100) * mCreatureController.Stress) + ((1 / 100) * mCreatureController.CloseToAnne) + mCreatureController.Triad - 
((1 / 100) * mCreatureController.Resistance) + ((1 / 100) * mCreatureController.Trust) + ((1 / 100) * mEmotionSubController.HappyActivation) 
+ ((1 / 100) * mEmotionSubController.SadActivation) + ((1 / 100) * mEmotionSubController.AngerActivation) + ((1 / 100) * mEmotionSubController.FearActivation)
+ ((1 / 100) * mEmotionSubController.ShameActivation)

if AcceptOrNot &lt; 0 {
AcceptOrNotFinal = false
} else if AcceptOrNot &gt;= 0 {
AcceptOrNotFinal = true
}
ARSet = true
} else if ARSet = true {
if ARWaitTimer &gt; 0 {
ARWaitTimer -= 1
if ARTwitchTimer &gt; 0 {
ARTwitchTimer -= 1
} else {
RandomTwitch()
RandomTwitch()
RandomTwitch()
ARTwitchTimer = ARTwitchTimerBase
}
mBehavioursReactive.ShiveringIntensity += 0.2
mBehavioursReactive.SideTime -= 0.2
} else {
if AcceptOrNotFinal = true {
ChangeEmotion("sad","down",0.4,10)
ChangeEmotion("anger","down",0.4,10)
ChangeEmotion("fear","down",0.4,10)
ChangeEmotion("shame","down",0.4,10)
ChangeEmotion("surprise","down",0.4,10)
ChangeEmotion("happy","up",0.4,50)
mCreatureController.BaseAlive -= 0.2
RandomTwitch()
RandomTwitch()
RandomTwitch()
RandomTwitch()
RandomTwitch()
StartCaulVibrateBehaviour(irandom_range(60,150))
mCreatureController.BaseTrust += 10
mCreatureController.BaseResistance -= 30
mCreatureController.CloseToAnne += 10
mCreatureController.BaseSubIntent += 0.1
mCreatureController.BaseLust += 10
if Chance(30){StartNumberSniffsBehaviour(irandom_range(2,4))}
BaseBreathRate -= 0.5
InRitual = true
} else if AcceptOrNotFinal = false {
VocaliseChance(65)
BaseBreathRate += 0.5
if mEmotionSubController.FearActivation &gt; mEmotionSubController.AngryActivation {
if Chance(60){MoveBackForwardUnCapped("retreat",irandom_range(25,35),irandom_range(20,40))}
} else {
MoveToXY(room_width / 2, oHornLeft.y,15,MicroView,15)
ZoomWait = 3
}
StartCaulVibrateBehaviour(irandom_range(60,150))
for (i = 0; i &lt; 20; i++) {
RandomTwitch()
}
ChangeEmotion("anger","down",0.3,4)
mCreatureController.BaseTiredness += 3
mCreatureController.BaseStress += 3
mCreatureController.BaseResistance -= 4
ChangeEmotion("fear","up",0.3,4)
ChangeEmotion("sad","up",0.3,8)
ChangeEmotion("happy","down",0.3,4)
}
Drive9Cooldown = 2000
ResettingDrives("acceptritual")
}
} 
break;


//---------------------------------------------------------- DOZE

case "doze":
if DozeSet = false {
if Chance(50) {NumberOfBlinks(irandom_range(2,5))}
RandomTwitch()
RandomTwitch()
RandomTwitch()
BaseBreathRate -= 0.7
if Chance(25){StartNumberSniffsBehaviour(irandom_range(1,3))}
if Chance(30){StartShiverBehaviour(0.3,irandom_range(10,20),3)}
BreathType = "nose"
DozeRand = irandom_range(600,800)
DozeSet = true 
} else if DozeSet = true {
if Dozing = false {
DozeThreshold = irandom_range(500,2000)
Dozing = true
StartCloseEyeBehaviour("both",4)
if mBehavioursDeliberative.PercentForward &gt;= 100 {
MoveToXY(0,1000 - DozeRand,80,MacroView,80)
}
}
CompleteRetry("doze")
}
break;

//---------------------------------------------------------- CLEAN GOUND

case "cleangound":
if GoundSet = false {
GoundTimer = 0
GoundTimerThreshold = irandom_range(500,800) + ((100 / 100) * (mCreatureController.Dirt)) - ((100 / 100) * (100 - mCreatureController.Alive)) + ((50 / 100) * mCreatureController.Tiredness)
+ (100 * mCreatureController.Triad) - ((100 / 100) * mCreatureController.CloseToAnne) + ((100 / 100) * mCreatureController.Resistance)
- ((100 / 100) * mEmotionSubController.HappyActivation) + ((100 / 100) * mEmotionSubController.AngryActivation) - ((200 / 100) * mEmotionSubController.FearActivation) 
- ((200 / 100) * mEmotionSubController.ShameActivation)
GoundRandomTimer = irandom_range(100,200) - ((50 / GoundTimerThreshold) * GoundTimer)  
GoundSet = true
} else if GoundSet = true {
CompleteRetry("cleangound")
GoundTimer += 1
ChangeEmotionStep("anger","up",0.01)
if GoundRandomTimer &gt; 0 {
GoundRandomTimer -= 1
} else {
GoundRandom = irandom_range(1,12)
switch GoundRandom {
case 1:
if oEyelidDuctLeft.NumberOfGounds &gt; 0 and TimeSinceLastTouch &gt; 10 {
MoveToXY(oEyeballLeft.x,oEyeballLeft.y,30,MicroView,30)
ZoomWait = 3
}
break;

case 2:
if oEyelidDuctRight.NumberOfGounds &gt; 0 and TimeSinceLastTouch &gt; 10 {
MoveToXY(oEyeballRight.x,oEyeballRight.y,30,MicroView,30)
ZoomWait = 3
}
break;

case 3:
NumberOfBlinks(3)
break;

case 4:
RandomVoc(0.3 + ((0.7 / 1000) * NoInteractionTimer))
break;

case 5: 
StartWinkBehaviour("left")
break;

case 6:
StartWinkBehaviour("right")
break;

case 7:
EyeSquint(1,true,irandom_range(30,70))
break;

case 8:
StartTwitchNoseSideBehaviour(irandom_range(30,70))
break;

case 9:
StartEyebrowTwitchRightBehaviour()
StartEyebrowTwitchLeftBehaviour()
break;

case 10:
if TimeSinceLastTouch &gt; 10 {
MoveBackForward("retreat",irandom_range(15,25),irandom_range(5,15))
}
ZoomWait = 3
break;

case 11:
StartShiverBehaviour(0.3,irandom_range(30,60),3)
break;

case 12:
StartCheekTwitchLeftBehaviour()
break;

case 13:
StartCheekTwitchRightBehaviour()
break;
}
GoundRandomTimer = irandom_range(100,200) - ((50 / GoundTimerThreshold) * GoundTimer)
}
}
break;

//---------------------------------------------------------- STROKE NOSE

case "strokenose":
if StrokeNoseSet = false {
StrokeNoseTimer = 400 + ((30 / 100) * (100 - mCreatureController.Alive)) + ((30 / 100) * mCreatureController.Tiredness)
+ ((30 / 100) * (100 - mCreatureController.Pain)) + ((30 / 100) * mCreatureController.Lust)
+ (25 * mCreatureController.Triad) - ((25 / 100) * mCreatureController.CloseToAnne) - ((25 / 100) * mCreatureController.Resistance)
+ ((25 / 100) * mCreatureController.Trust) + ((25 / 100) * mEmotionSubController.HappyActivation)
+ ((25 / 100) * mEmotionSubController.SadActivation)
- ((25 / 100) * mEmotionSubController.AngerActivation)
- ((25 / 100) * mEmotionSubController.FearActivation)
- ((25 / 100) * mEmotionSubController.ShameActivation)
StrokeNoseTimerInitial = StrokeNoseTimer
BreathType = "nose"
RubTimer = 0
RubTimerThreshold = round(StrokeNoseTimer / 4)
StrokeNoseSet = true 
StrokeNoseRandomTimer = 30 + ((5 / 100) * mEmotionSubController.HappyActivation) - ((5 / 100) * mEmotionSubController.AngerActivation)
- ((10 / StrokeNoseTimerInitial) * StrokeNoseTimer) - ((5 / 100) * mCreatureController.CloseToAnne)
+ ((10 / 100) * mEmotionSubController.FearActivation) - ((5 * mCreatureController.Triad))
} else if StrokeNoseSet = true {
StrokeNoseTimer -= 1

if place_meeting(mFinger.x,mFinger.y,oNose1) = true and mInterfaceController.DragBegun = true {
if mBehavioursDeliberative.PercentForward &lt; 100 {
MoveBackForward("comeforward",20,100 - PercentForward)
}
RubTimer += 0.05
ChangeEmotionStep("happy","up",0.03)
ChangeEmotionStep("anger","down",0.03)
mCreatureController.BaseTrust += 0.03
} else {
if RubTimer &gt; 0 {
RubTimer -= 0.005
}
if StrokeNoseRandomTimer &gt; 0 {
StrokeNoseRandomTimer -= 1
} else {
SNRand = irandom_range(1,8)
switch SNRand {
case 1:
MoveToXY(oNose1.x,oNose1.y,irandom_range(15,35),MacroView,irandom_range(15,35))
break;
case 2:
MoveToXY(oNose1.x,oNose1.y,irandom_range(15,35),MicroView,irandom_range(15,35))
ZoomWait = 3
break;
case 3:
StartNumberSniffsBehaviour(irandom_range(1,4))
break;
case 4:
StartTwitchBehaviour(20,20,3)
break;
case 5:
StartTwitchNoseSideBehaviour(irandom_range(25,60))
break;
case 6:
VocaliseChance(100)
break;
case 7:
MoveBackForward("retreat",irandom_range(15,35),irandom_range(5,20))
RetreatWait = 3
break;
case 8:
StartCheekTwitchLeftBehaviour()
StartCheekTwitchRightBehaviour()
break;
}
StrokeNoseRandomTimer = 30 + ((5 / 100) * mEmotionSubController.HappyActivation) - ((5 / 100) * mEmotionSubController.AngerActivation)
- ((10 / StrokeNoseTimerInitial) * StrokeNoseTimer) - ((5 / 100) * mCreatureController.CloseToAnne)
+ ((10 / 100) * mEmotionSubController.FearActivation) - ((5 * mCreatureController.Triad))
}
}
CompleteRetry("strokenose")
}
break;

//---------------------------------------------------------- INSPECT MANSION

case "inspectmansion":
if IMSet = false {
IMAttemptTimer =  irandom_range(150,300)
if Chance(70){NumberOfBlinks(irandom_range(1,5))}
ChangeEmotion("surprise","up",1,15)
StopVocalisation()
StopShiverBehaviour()
StopYawnBehaviour()
IMMarker1 = false
IMMarker2 = false
IMYRand = irandom_range(-50,50)
IMChoose = irandom_range(1,4)
BaseBreathRate += random_range(0.1,0.3)
StopMoveInOut()
StopXYMove()
IMSet = true 
FearResistMod = (mCreatureController.Resistance + mEmotionSubController.FearActivation) / 2
} else if IMSet = true {
if IMAttemptTimer &gt; 0 {
IMAttemptTimer -= 1
}
if mBehavioursDeliberative.PercentForward &lt; 100 {
MoveBackForwardUnCapped("comeforward",
10 + ((20 / 100) * mCreatureController.Resistance) + ((20 / 100) * mEmotionSubController.FearActivation),
100 - mBehavioursDeliberative.PercentForward)
} else {
if IMMarker1 = false {

switch IMChoose {
case 1:
MoveToXY(room_width / 2,oNose1.y,10 + ((25 / 100) * FearResistMod),MicroView,15)
StartNumberSniffsBehaviour(irandom_range(1,4))
ImageRequest2() 
IMMarker1 = true
break;
case 2:
MoveToXY(0,oEyeballLeft.y,10 + ((25 / 100) * FearResistMod),MacroView,15)
EyeSquint(3,true,irandom_range(30,50))
ImageRequest2() 
IMMarker1 = true
break;
case 3:
Eye = choose(oEyeballLeft,oEyeballRight)
MoveToXY(Eye.x,Eye.y,10 + ((25 / 100) * FearResistMod),MicroView,15)
if mInterfaceController.CurrentView = MicroView {
NumberOfBlinks(irandom_range(2,5))
ImageRequest2() 
IMMarker1 = true
}
break;
case 4:
Eye = choose(oEyeballLeft,oEyeballRight)
MoveToXY(Eye.x,Eye.y,10 + ((25 / 100) * FearResistMod),MicroView,15)
if mInterfaceController.CurrentView = MicroView {
EyeSquint(3,true,irandom_range(30,50))
ImageRequest2() 
IMMarker1 = true
}
break;
}
} else if IMMarker1 = true {
if IMMarker2 = false {
switch IMChoose {
case 1:
if mBehavioursReactive.NumberSniffsActive = false {
MoveToXY(0,1000 + IMYRand,40 - ((25 / 100) * FearResistMod),MacroView,40 - ((25 / 100) * FearResistMod))
IMMarker2 = true
}
break;
case 2:
if mBehavioursReactive.SquintingActive = false {
MoveToXY(0,1000 + IMYRand,40 - ((25 / 100) * FearResistMod),MacroView,40 - ((25 / 100) * FearResistMod))
IMMarker2 = true
}
break;
case 3:
if mBehavioursReactive.BlinkNumberActive = false {
MoveToXY(0,1000 + IMYRand,40 - ((25 / 100) * FearResistMod),MacroView,40 - ((25 / 100) * FearResistMod))
IMMarker2 = true
}
break;
if mBehavioursReactive.SquintingActive = false {
MoveToXY(0,1000 + IMYRand,40 - ((25 / 100) * FearResistMod),MacroView,40 - ((25 / 100) * FearResistMod))
IMMarker2 = true
}
break;
}
}
}
CompleteRetry("inspectmansion")
}
}
break;


//----------------------------------------------------------FOLLOW COMMAND

case "followcommand":
FollowCommandOrNot = 1 + ((0.2 / 100) * (100 - mCreatureController.Alive))
+ ((0.1 / 100) * mCreatureController.Tiredness) + ((0.1 / 100) * mCreatureController.Pain)
+ ((0.1 / 100) * mCreatureController.Lust) - ((0.1 / 100) * mCreatureController.Stress)
+ (0.2 * mCreatureController.Triad) + ((0.1 / 100) * mCreatureController.CloseToAnne) 
- ((0.2 / 100) * mCreatureController.Resistance) + ((0.1 / 100) * mCreatureController.Trust)
+ ((0.1 / 100) * mEmotionSubController.HappyActivation) - ((0.1 / 100) * mEmotionSubController.AngryActivation)
- ((0.1 / 100) * mEmotionSubController.FearActivation) 

if FollowCommandOrNot &gt; 0 {
mPlotController.FollowCommand = true
} else {
mPlotController.FollowCommand = false 
BaseBreathRate += random_range(0.2,0.4) + ((0.2 / 100) * mEmotionSubController.FearActivation)
for (i = 0; i &lt; irandom_range(5,10);i++) {
RandomTwitch()
}
VocaliseChance(70 - ((30 / 100) * mEmotionSubController.FearActivation))
StartShiverBehaviour(0.2,irandom_range(10,20),irandom_range(6,10))
with mCreatureController {
BaseResistance += 10
CloseToAnne += 7
BaseStress += 7
BaseTiredness += 1
}
ChangeEmotion("anger","up",0.3,10)
ChangeEmotion("happy","down",0.3,6)
ChangeEmotion("shame","up",0.3,8)
ChangeEmotion("fear","up",0.3,8)
}

Drive14Cooldown = 250
ResettingDrives("followcommand")
alarm[1] = 0
break;

//----------------------------------------------------------CLEAN SKIN

case "cleanskin":

if CSSet = false {
CSAttemptTimer = irandom_range(300,400) + ((50 / 100) * mCreatureController.Dirt)
+ ((50 / 100) * mEmotionSubController.ShameActivation) - ((80 / 100) * mEmotionSubController.SadActivation)
+ ((50 / 100) * mCreatureController.Trust) - ((100 / 100) * mCreatureController.Resistance)
+ ((50 / 100) * mCreatureController.Stress)
CSDirt = mCreatureController.Dirt
CSDirtThreshold = max(0,CSDirt - 35)
CSTouchTimer = 1
CSRandomTimer = 0
CSSet = true 
} else if CSSet = true {

if CSAttemptTimer &gt; 0 {
CSAttemptTimer -= 1
}

if mInterfaceController.Cleaning = true {
if CSTouchTimer &gt; 0 {
CSTouchTimer -= 1
} else {
MoveToXY(mouse_x,mouse_y,irandom_range(20,30),mInterfaceController.CurrentView,35)
CSTouchTimer = irandom_range(100,300)
}
ChangeEmotionStep("happy","up",0.04)
ChangeEmotionStep("sad","down",0.04)
mCreatureController.BaseTiredness += 0.04
mCreatureController.BaseResistance -= 0.04
mCreatureController.BaseTrust += 0.04
mCreatureController.BaseSubIntent += 0.0004
mCreatureController.CloseToAnne += 0.04
mCreatureController.BaseStress -= 0.04
if Chance(0.05){StartShiverBehaviour(irandom_range(2,5),irandom_range(5,15),irandom_range(1,2))}
if Chance(0.05){RandomVoc(random_range(0.1,0.2))}
if Chance(0.05){StartCloseEyeBehaviour("both",10)
BaseBreathRate -= 0.004
} else {
mCreatureController.BaseStress += 0.04
mCreatureController.BaseSubIntent -= 0.0004
mCreatureController.BaseTrust -= 0.04
ChangeEmotionStep("happy","down",0.04)
ChangeEmotionStep("anger","up",0.04)
ChangeEmotionStep("shame","up",0.02)
if CSRandomTimer &gt; 0 {
CSRandomTimer -= 1
} else {
CSRand = irandom_range(1,10) 
switch CSRand {
case 1:
VocaliseChance(100)
break;
case 2:
StartShiverBehaviour(random_range(0.2,0.4),irandom_range(5,15),irandom_range(4,10))
break;
case 3:
StartNumberSniffsBehaviour(irandom_range(1,3))
break;
case 4:
RandomTwitch()
RandomTwitch()
RandomTwitch()
break;
case 5:
StartTwitchNoseSideBehaviour(irandom_range(20,50))
break;
case 6:
if mBehavioursDeliberative.PercentForward &lt; 100 {
MoveBackForward("comeforward",15,100 - mBehavioursDeliberative.PercentForward)
}
break;

case 7: 
EyeSquint(irandom_range(1,3),true,irandom_range(20,50))
break;
case 8:
StartCoughBehaviour()
break;
case 9:
ChooseEye = choose(oEyeballLeft,oEyeballRight)
MoveToXY(ChooseEye.x,ChooseEye.y,irandom_range(20,30),MicroView,irandom_range(20,30))
ZoomWait = 10
break;

case 10:
MoveToXY(oMouthCentre.x,oMouthCentre.y,irandom_range(20,30),MicroView,irandom_range(20,30))
VocaliseChance(100)
ZoomWait = 10
break;

case 11:
LiquidPlaceRand = irandom_range(0,ds_list_size(mInterfaceController.LiquidPlace))
LiquidPlaceString = ds_list_find_value(mInterfaceController.LiquidPlace,LiquidPlaceRand)
LiquidPlaceComma = string_pos(",",LiquidPlaceString)
LiquidPlaceX = real(string_delete(LiquidPlaceString,LiquidPlaceComma,string_length(LiquidPlaceString) - LiquidPlaceComma))
LiquidPlaceY = real(string_delete(LiquidPlaceString,0,LiquidPlaceComma + 1))
MoveToXY(LiquidPlaceX,LiquidPlaceY,irandom_range(20,30),MicroView,irandom_range(20,30))
ZoomWait = 10
break;
}
CSRandomTimer = irandom_range(60,80) - ((10 / 100) * mCreatureController.Dirt)
- ((10 / 100) * mCreatureController.Stress) - ((10 / 100) * mEmotionSubController.ShameActivation)
}
}
}
CompleteRetry("cleanskin")
}
break;

//----------------------------------------------------------PLAYER GET OFF

case "playergetoff":
if PGFSet = false {
TimeSinceLastTouch = 0
PGFTimer = irandom_range(250,500) - (150 * mCreatureController.Triad) + ((50 / 100) * mCreatureController.Tiredness)
- ((50 / 100) * mCreatureController.Trust) + ((100 / 100) * mCreatureController.Resistance)
+ ((50 / 100) * mEmotionSubController.AngryActivation) - ((50 / 100) * mEmotionSubController.HappyActivation)
- ((50 / 100) * mEmotionSubController.FearActivation) + ((50 / 100) * mCreatureController.Stress)
- ((50 / 100) * mCreatureController.CloseToAnne)
PGFTOrig = PGFTimer
PGFRandTimer = irandom_range(20,50)
PGFSet = true 
} else if PGFSet = true {
if PGFTimer &gt; 0 {
PGFTimer -= 1
}
BaseBreathRate += 0.001
if PGFRandTimer &gt; 0 {
PGFRandTimer -= 1
} else {
PGFRand = irandom_range(1,5)
switch PGFRand {
case 1:
MoveBackForward("retreat",irandom_range(15,30) - ((10 / 100) * mCreatureController.Resistance),min(20,100 - mBehavioursDeliberative.PercentForward))
ZoomWait = 15
break;
case 2: 
StartShiverBehaviour(irandom_range(0.2,1),irandom_range(15,25),irandom_range(4,10))
break;
case 3:
VocaliseChance(100)
break;
case 4:
RandomVoc(irandom_range(0.05,0.1))
break;
case 5:
for (i = 0; i &lt; irandom_range(5,10);i++) {
TwitchIfNearBP(mouse_x,mouse_y,500)
}
break;
case 6:
for (i = 0; i &lt; irandom_range(5,10);i++) {
LittleJump()
}
break;
}
PGFRandTimer = irandom_range(20,50) - ((20 / PGFTOrig) * (PGFTOrig - PFGTimer))
}
CompleteRetry("playergetoff")
}
break;

//----------------------------------------------------------GENERAL VOCALISE

case "generalvocalise":
if GenVocSet = false {
StopYawnBehaviour()
StopSneezeBehaviour()
RandomVoc(0.5 - (0.2 * mCreatureController.Triad) - ((0.1 / 100) * mCreatureController.Trust)
- ((0.15 / 100) * (100 - mCreatureController.Alive)) - ((0.1 / 100) * mCreatureController.Tiredness)
+ ((0.1 / 100) * mCreatureController.Stress) + ((0.1 / 100) * mCreatureController.Pain)
- ((0.2 / 100) * mEmotionSubController.FearActivation) + ((0.1 / 100) * mEmotionSubController.AngerActivation)
+ ((0.1 / 100) * mEmotionSubController.HappyActivation)
- ((0.1 / 100) * mEmotionSubController.SadActivation)
- ((0.1 / 100) * mEmotionSubController.ShameActivation)
)
} else if GenVocSet = true {
if Vocalising = false {
for (i=0;i &lt; irandom_range(4,15);i++) {
RandomTwitch()
}
if Chance(50){StartOpenMouthBehaviour(0.2,100)}
Drive17Cooldown = 2000
alarm[1] = 0
ResettingDrives("generalvocalise")
}
}
break;

//----------------------------------------------------------TOUCH CAUL

case "touchcaul":
if TCSet = false {
TCAttemptTimer = irandom_range(200,400) + ((100 / 100) * mCreatureController.Lust) - ((50 / 100) * mCreatureController.Pain)
- ((50 / 100) * mCreatureController.Stress) + ((25 / 100) * mCreatureController.Tiredness)
+ ((50 / 100) * mCreatureController.Trust) - ((50 / 100) * mEmotionSubController.AngerActivation)
- ((50 / 100) * mEmotionSubController.ShameActivation) - ((50 / 100) * mEmotionSubController.FearActivation)
TCTimerOrig = TCAttemptTimer
TCYRand = irandom_range(-40,40)
MoveToXY(0,oCaulJug.y + TCYRand,irandom_range(15,25),MacroView,35)
TCRandTimer = 2
TCTouchTimer = 0
TCTouchTimerThreshold = 200
TCSet = true
} else if TCSet = true {

if TCAttemptTimer &gt; 0 {
TCAttemptTimer -= 1
}

if place_meeting(mFinger.x,mFinger.y,mCaulParent) {
TCTouchTimer += 1
} else {
if TCTouchTimer &gt; 0 {
TCTouchTimer -= 0.1
}
}

if mBehavioursReactive.CaulVibrateActive = false {
StartCaulVibrateBehaviour(20)
}
mCreatureController.BaseLust += 0.04
oCaulJug.CankerGrowRateCurrent -= 2
mCreatureController.BaseStress += 0.01
ChangeEmotionStep("shame","up",0.01)
BaseBreathRate += 0.001

if TCRandTimer &gt; 0 {
TCRandTimer -= 1
} else {
//If not there
if NoInteractionTimer &gt; 300 {

RandomNum = irandom_range(1,11)
switch RandomNum {
case 1:
VocaliseChance(100)
break;
case 2:
if Chance(50){EyeSquint(1,true,25)}
MoveToXY(oEyeballLeft.x,oEyeballLeft.y,80,MicroView,80)
ZoomWait = 3
break;
case 3:
if Chance(50){EyeSquint(1,true,25)}
MoveToXY(oEyeballRight.x,oEyeballRight.y,80,MicroView,80)
ZoomWait = 3
if Chance(50){EyeSquint(1,true,25)}
break;
case 4:
EyeSquint(1,true,25)
break;
case 5:
StartNumberSniffsBehaviour(irandom_range(1,4))
break;
case 6:
if mCreatureController.Lust &gt; 60 {
StartCaulVibrateBehaviour(irandom_range(30,50))
MoveToXY(oCaulLip.x,oCaulLip.y,80,MicroView,80)
ZoomWait = 3
}
break;
case 7:
MoveToXY(oHornLeft.x,oHornLeft.y,80,MicroView,80)
ZoomWait = 3
break;
case 8:
MoveToXY(oHornRight.x,oHornRight.y,80,MicroView,80)
ZoomWait = 3
break;
case 9:
if mBehavioursDeliberative.PercentForward &lt; 100 {
MoveBackForwardUnCapped("comeforward",20,100 -  mBehavioursDeliberative.PercentForward)
}
break;
case 10:
EyeSquint(1,true,40)
MoveBackForward("retreat",30,irandom_range(20,30))
break;
case 11:
MoveToXY(oMouthCentre.x,oMouthCentre.y,25,MicroView,25)
ZoomWait = 3
VocaliseChance(100)
break;
}
} else {
RandomNum = irandom_range(1,5) 
switch RandomNum {
case 1:
EyeSquint(irandom_range(1,3),true,irandom_range(25,40))
break;
case 2:
for (i=0;i &lt; irandom_range(10,20);i++) {
RandomTwitch()
}
break;
case 3:
StartOpenMouthBehaviour(0.2,0)
break;
case 4:
RandomVoc(0.3 + ((0.6 / TCTimerOrig) * (TCTimerOrig - TCAttemptTimer)))
break;
case 5:
MoveToXY(oCaulJug.x,oCaulJug.y,irandom_range(15,20),MicroView,15)
oCaulJug.ShotMod = 30
ZoomWait = 5
break;
case 6:
ShakeCaul(0.8,irandom_range(20,30))
break;
case 7:
MoveBackForward("retreat",15,irandom_range(5,15))
ZoomWait = 5
break;
break;
case 8:
StartShiverBehaviour(irandom_range(4,10),irandom_range(10,20),irandom_range(1,2))
break;
}
}
TCRandTimer = irandom_range(25,80) - ((20 / TCTimerOrig) * (TCTimerOrig - TCAttemptTimer)) - ((10 / 100) * mCreatureController.Lust)
}
CompleteRetry("touchcaul")
}
break;

//----------------------------------------------------------HAIR BRUSH

case "hairbrush":
if HBSet = false {
HBAttemptTimer = irandom_range(100,250) + ((60 / 100) * (100 - mCreatureController.Alive))
+ ((50 / 100) * mCreatureController.Tiredness) - ((60 / 100) * mCreatureController.Lust)
+ ((50 / 100) * mCreatureController.Stress) + (50 * mCreatureController.Triad)
- ((100 / 100) * mCreatureController.CloseToAnne) - ((100 / 100) * mCreatureController.Resistance)
+ ((100 / 100) * mCreatureController.Trust) - ((50 / 100) * mEmotionSubController.HappyActivation)
+ ((50 / 100) * mEmotionSubController.SadActivation) - ((50 / 100) * mEmotionSubController.FearActivation)
HBAttemptTimerOrig = HBAttemptTimer
HBRandTimer = irandom_range(25,60)
BrushTimer = 0
BrushTimerThreshold = irandom_range(100,200)
HBSet = true
} else if HBSet = true {
if HBAttemptTimer &gt; 0 {
HBAttemptTimer -= 1
}

if place_meeting(mFinger.x,mFinger.y,mFurSuperParent) and DragBegun = true {
BrushTimer += 1
} else {
if BrushTimer &gt; 0 {
BrushTimer -= 0.01
}
if HBRandTimer &gt; 0 {
HBRandTimer -= 1
} else {

//If not there
if NoInteractionTimer &gt; 300 {

RandomNum = irandom_range(1,11)
switch RandomNum {
case 1:
VocaliseChance(100)
break;
case 2:
if Chance(50){EyeSquint(1,true,25)}
MoveToXY(oEyeballLeft.x,oEyeballLeft.y,80,MicroView,80)
ZoomWait = 3
break;
case 3:
if Chance(50){EyeSquint(1,true,25)}
MoveToXY(oEyeballRight.x,oEyeballRight.y,80,MicroView,80)
ZoomWait = 3
if Chance(50){EyeSquint(1,true,25)}
break;
case 4:
EyeSquint(1,true,25)
break;
case 5:
StartNumberSniffsBehaviour(irandom_range(1,4))
break;
case 6:
if mCreatureController.Lust &gt; 60 {
StartCaulVibrateBehaviour(irandom_range(30,50))
MoveToXY(oCaulLip.x,oCaulLip.y,80,MicroView,80)
ZoomWait = 3
}
break;
case 7:
MoveToXY(oHornLeft.x,oHornLeft.y,80,MicroView,80)
ZoomWait = 3
break;
case 8:
MoveToXY(oHornRight.x,oHornRight.y,80,MicroView,80)
ZoomWait = 3
break;
case 9:
if mBehavioursDeliberative.PercentForward &lt; 100 {
MoveBackForwardUnCapped("comeforward",20,100 -  mBehavioursDeliberative.PercentForward)
}
break;
case 10:
EyeSquint(1,true,40)
MoveBackForward("retreat",30,irandom_range(20,30))
break;
case 11:
MoveToXY(oMouthCentre.x,oMouthCentre.y,25,MicroView,25)
ZoomWait = 3
VocaliseChance(100)
break;
}
} else {
HBRand = irandom_range(1,5)
switch HBRand {
case 1:
RandomVoc(0.3 +  ((0.6 / HBAttemptTimerOrig) * (HBAttemptTimerOrig - HBAttemptTimer)))
break;
case 2:
StartShiverBehaviour(random_range(0.2,0.5),irandom_range(10,20),irandom_range(5,10))
break;
case 3:
MoveBackForwardUnCapped("comeforward",irandom_range(15,20),100 - mBehavioursDeliberative.PercentForward)
break;
case 4:
RandFur = instance_find(mFurSuperParent, irandom(instance_number(mFurSuperParent) - 1));
MoveToXY(RandFur.x,RandFur.y,irandom_range(20,40),MicroView,40)
ZoomWait = 10
break;
case 5:
StartTwitchNoseSideBehaviour(irandom_range(20,40))
break;
case 6:
RandFur = instance_find(mFurSuperParent, irandom(instance_number(mFurSuperParent) - 1));
MoveToXY(RandFur.x,RandFur.y,irandom_range(20,40),MicroView,40)
HBRubTimer = 30
break;
}
}
HBRandTimer = irandom_range(25,60) - ((20 / HBAttemptTimerOrig) * (HBAttemptTimerOrig - HBAttemptTimer))
}
if HBRunTimer &gt; 0 {
HBRubTimer -= 1
} else if HBRubTimer = 0 {
for (i = 0; i &lt; irandom_range(2,4); i++ ) {
LittleJump()
}
HBRubTimer = -1
}
}
CompleteRetry("hairbrush")
}
break;


//----------------------------------------------------------PLAYER SPEAK

case "playerspeak":
if PSSet = false {
PSAttemptTimer = irandom_range(400,600) - ((50 / 100) * (100 - mCreatureController.Alive)) - ((50 / 100) *mCreatureController.Tiredness)
 - ((50 / 100) *mCreatureController.Pain)  - ((50 / 100) *mCreatureController.Stress) -  - ((50 / 100) *mCreatureController.CloseToAnne)
 - ((50 / 100) *mCreatureController.Resistance) + ((100 / 100) * mEmotionSubController.HappyActivation)
 - ((50 / 100) * mEmotionSubController.FearActivation) -  ((50 / 100) * mEmotionSubController.ShameActivation)
 - ((500 / 100) * mEmotionSubController.SadActivation) + (50 * mCreatureController.Triad)
PSRand = irandom_range(20,30)
PSSet = true
} else if PSSet = true {

if PSAttemptTimer &gt; 0 {
PSAttemptTimer -= 1
}

if PSRand &gt; 0 {
PSRand -= 1 
} else {
if NoInteractionTimer &gt; 200 {
RandomNum = irandom_range(1,11)
switch RandomNum {
case 1:
VocaliseChance(100)
break;
case 2:
if Chance(50){EyeSquint(1,true,25)}
MoveToXY(oEyeballLeft.x,oEyeballLeft.y,80,MicroView,80)
ZoomWait = 3
break;
case 3:
if Chance(50){EyeSquint(1,true,25)}
MoveToXY(oEyeballRight.x,oEyeballRight.y,80,MicroView,80)
ZoomWait = 3
if Chance(50){EyeSquint(1,true,25)}
break;
case 4:
EyeSquint(1,true,25)
break;
case 5:
StartNumberSniffsBehaviour(irandom_range(1,4))
break;
case 6:
if mCreatureController.Lust &gt; 60 {
StartCaulVibrateBehaviour(irandom_range(30,50))
MoveToXY(oCaulLip.x,oCaulLip.y,80,MicroView,80)
ZoomWait = 3
}
break;
case 7:
MoveToXY(oHornLeft.x,oHornLeft.y,80,MicroView,80)
ZoomWait = 3
break;
case 8:
MoveToXY(oHornRight.x,oHornRight.y,80,MicroView,80)
ZoomWait = 3
break;
case 9:
if mBehavioursDeliberative.PercentForward &lt; 100 {
MoveBackForwardUnCapped("comeforward",20,100 -  mBehavioursDeliberative.PercentForward)
}
break;
case 10:
EyeSquint(1,true,40)
MoveBackForward("retreat",30,irandom_range(20,30))
break;
case 11:
MoveToXY(oMouthCentre.x,oMouthCentre.y,25,MicroView,25)
ZoomWait = 3
VocaliseChance(100)
break;
}
} else {
PSRand2 = irandom_range(1,7)
switch PSRand2 {
case 1:
VocaliseChance(100)
break;
case 2: 
StartVocalPhrase(irandom_range(2,5))
break;
case 3:
StartTwitchNoseSideBehaviour(irandom_range(10,50))
break;
case 4:
StartEyebrowTwitchRightBehaviour()
StartEyebrowTwitchLeftBehaviour()
break;
case 5:
StartOpenMouthBehaviour(0.2,100)
break;
case 6:
if Chance(50){StartCoughBehaviour()}
break;
case 7:
NodUpDown(irandom_range(2,5))
break;
}
}
PSRand = irandom_range(20,30)
}

if mBehavioursReactive.CaulVibrateActive = false {
StartCaulVibrateBehaviour(20)
}
BaseBreathRate += 0.004
CompleteRetry("playerspeak")
}
break;

//----------------------------------------------------------PLAYER TOUCH

case "playertouch":
if PTSet = false {
PTAttemptTimer = irandom_range(200,400) + ((50 /100) * mEmotionSubController.HappyActivation)
- ((50 /100) * mEmotionSubController.AngryActivation) - ((50 /100) * mEmotionSubController.ShameActivation)
- ((50 /100) * mEmotionSubController.SadActivation) - ((50 /100) * mEmotionSubController.FearActivation)
- ((50 / 100) * mCreatureController.BaseResistance) + ((50 / 100) * mCreatureController.BaseTrust)
- ((50 / 100) * mCreatureController.BaseLust) + ((50 / 100) * mCreatureController.CloseToAnne)
- ((50 / 100) * mCreatureController.BaseStress) - ((50 / 100) * mCreatureController.BasePain)
+ (50 * mCreatureController.Triad)
PTATO = PTAttemptTimer
PTRand = irandom_range(20,30)
PTSet = true 
} else if PTSet = true {
BaseBreathRate += 0.004
if mBehavioursReactive.CaulVibrateActive = false {
StartCaulVibrateBehaviour(20)
}



if PTAttemptTimer &gt; 0 {
PTAttemptTimer -= 1
}
if PTRand &gt; 0 {
PTRand -= 1
} else {

if NoInteractionTimer &gt; 200 {
RandomNum = irandom_range(1,11)
switch RandomNum {
case 1:
VocaliseChance(100)
break;
case 2:
if Chance(50){EyeSquint(1,true,25)}
MoveToXY(oEyeballLeft.x,oEyeballLeft.y,80,MicroView,80)
ZoomWait = 3
break;
case 3:
if Chance(50){EyeSquint(1,true,25)}
MoveToXY(oEyeballRight.x,oEyeballRight.y,80,MicroView,80)
ZoomWait = 3
if Chance(50){EyeSquint(1,true,25)}
break;
case 4:
EyeSquint(1,true,25)
break;
case 5:
StartNumberSniffsBehaviour(irandom_range(1,4))
break;
case 6:
if mCreatureController.Lust &gt; 60 {
StartCaulVibrateBehaviour(irandom_range(30,50))
MoveToXY(oCaulLip.x,oCaulLip.y,80,MicroView,80)
ZoomWait = 3
}
break;
case 7:
MoveToXY(oHornLeft.x,oHornLeft.y,80,MicroView,80)
ZoomWait = 3
break;
case 8:
MoveToXY(oHornRight.x,oHornRight.y,80,MicroView,80)
ZoomWait = 3
break;
case 9:
if mBehavioursDeliberative.PercentForward &lt; 100 {
MoveBackForwardUnCapped("comeforward",20,100 -  mBehavioursDeliberative.PercentForward)
}
break;
case 10:
EyeSquint(1,true,40)
MoveBackForward("retreat",30,irandom_range(20,30))
break;
case 11:
MoveToXY(oMouthCentre.x,oMouthCentre.y,25,MicroView,25)
ZoomWait = 3
VocaliseChance(100)
break;
}
} else {
PTRand2 = irandom_range(1,5)
switch PTRand2 {
case 1:
if PTAttemptTimer &lt; 100 {
MoveToXY(oPlotWound1.x,oPlotWound1.y,irandom_range(25,40),MicroView,30)
ZoomWait = 10
}
break;
case 2:
MoveToXY(random(room_width),random(room_height),irandom_range(20,35),MicroView,30)
RandomTwitch()
RandomTwitch()
RandomTwitch()
RandomTwitch()
ZoomWait = 10
case 3:
StartShiverBehaviour(irandom_range(0.2,0.5),random_range(5,10),irandom_range(5,15))
break;
case 4:
RandomTwitch()
RandomTwitch()
RandomTwitch()
RandomTwitch()
RandomTwitch()
RandomTwitch()
RandomTwitch()
RandomTwitch()
break;
case 5:
RandomVoc(0.4 + ((0.4 / PTATO) * (PTATO - PTAttemptTimer)))
break;
case 6:
NodUpDown(irandom_range(5,10))
break;
case 7:
MoveToXY(290,1022,irandom_range(20,35),MicroView,irandom_range(25,35))
ZoomWait = 10
break;
}
}
PTRand = irandom_range(20,30) + ((40 / PTATO) * (PTATO - PTAttemptTimer))
}
CompleteRetry("playertouch")
}
break;


default:
break;
}

//----------------------------------------------------------
//Lowering NotReturnTimer 
if NotReturnTimer &gt; 0 {
NotReturnTimerSpeed = 1 - ((0.1 / 100) * mEmotionSubController.FearActivation) - ((0.1 / 100) * mEmotionSubController.ShameActivation) - ((0.1 / 100) * mEmotionSubController.AngerActivation) + (0.1 * mCreatureController.Triad)
- ((0.1 / 100) * mCreatureController.Resistance) - ((0.1 / 100) * mCreatureController.Tiredness) + ((0.2 / 100) * mCreatureController.Alive) - ((0.1 / 100) * mEmotionSubController.SadActivation) 
+ ((0.1 / 100) * mCreatureController.Trust) + ((0.1 / 100) * mEmotionSubController.HappyActivation)
NotReturnTimerSpeed = clamp(NotReturnTimerSpeed,0.001,10)
NotReturnTimer -= NotReturnTimerSpeed
}

//Ritual Timer 
if RitualTimer &gt; 0 {
RitualTimer -= 1
}

//Doze Timer
if Dozing = true {
if DozeTimer &lt; DozeThreshold {
DozeTimer += 1
}
}

if ZoomWait &gt; 0 {
ZoomWait -= 1
} else if RetreatWait = 0 {
MoveToXY(0,1000,15,MacroView,20)
ZoomWait = -1
}

if RetreatWait &gt; 0 {
RetreatWait -= 1
} else if RetreatWait = 0 {
MoveBackForward("comeforward",irandom_range(15,35),100 - mBehavioursDeliberative.PercentForward)
RetreatWait = -1
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
