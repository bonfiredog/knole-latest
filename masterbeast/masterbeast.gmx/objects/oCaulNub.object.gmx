<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCaulNub</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>mCaulParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

event_inherited()
OriginalX = x
OriginalY = y
OriginalXScale = image_xscale
OriginalYScale = image_yscale
BendPercentage = 0
StretchPercentage = 0
Redness = 0
RednessMod = 0

depth = AnatomyLayer2 - 0.0001

Scale = 0
Width = 0

Vibrating = false
VibrateDir = "right"
VibrateMod = 0

Gripped = false
TouchingTwitch = false

ClimaxTimer = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Getting More Red When Touched Or With Lust

if place_meeting(x,y,mFinger) and AmountForward(80) {
RednessMod += 0.01
} else {
RednessMod -= 0.001
}

Redness = ((0.7 / 100) * mCreatureController.Lust) + RednessMod  + ((0.5 / 100) * mDriveCollectionMaster.RitualTolerance)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Changing Bend And Stretch Percentage Depending On Pulling Around

if Gripped = false and mBehavioursReactive.CaulVibrateActive = false {

if BendPercentage &gt; (0 + 4) {
BendPercentage -= 4
} else if BendPercentage &lt; (0 - 4) {
BendPercentage += 4
} else if BendPercentage &lt; (0 + 4) and BendPercentage &gt; (0 - 4) and BendPercentage != 0 {
BendPercentage = 0
}

if StretchPercentage &gt; (0 + 4) {
StretchPercentage -= 4
} else if StretchPercentage &lt; (0 + 4) and StretchPercentage != 0 {
StretchPercentage = 0
}

if place_meeting(x,y,mFinger) and instance_exists(mDebug) = false and mouse_check_button_pressed(mb_any) and AmountForward(80) {
WriteToLog("Touched cauldron nub.")
BendMod = 0
StretchMod = 0
StartX = mouse_x
StartY = mouse_y
TouchSound = choose("touchwet1","touchwet2","touchwet3")
ex_audio_set_position(TouchSound,mouse_x,mouse_y,1)
ex_audio_set_volume(TouchSound,0.001,0)
ex_audio_set_pitch(TouchSound,random_range(0.95,1.05),0)
ex_audio_play(TouchSound,0)
GrabbingSound = choose("oloop1","oloop2","oloop3")
ex_audio_set_volume(GrabbingSound,0.05,0)
ex_audio_play(GrabbingSound,1)
ex_audio_pause(GrabbingSound)
Gripped = true
}

} else if Gripped = true and instance_exists(mDebug) = false {

if mInterfaceController.DragBegun = true and mInterfaceController.DragSpeed &gt; 0 {
ex_audio_set_position(GrabbingSound,mouse_x,mouse_y,0)
if ex_audio_is_paused(GrabbingSound) {
ex_audio_resume(GrabbingSound)
}
} else {
if ex_audio_is_playing(GrabbingSound) {
ex_audio_pause(GrabbingSound)
}
}

BendMod = mouse_x - StartX
BendMod = clamp(BendMod,-40,40)
StretchMod = mouse_y - StartY
StretchMod = clamp(StretchMod,0,40)

BendPercentage = (100 / 40) * BendMod
StretchPercentage = (100 / 40) * StretchMod

if place_meeting(x,y,mFinger = false) or mouse_check_button_released(mb_any) {
TouchSound = choose("touchwet1","touchwet2","touchwet3")
ex_audio_set_position(TouchSound,mouse_x,mouse_y,1)
ex_audio_set_volume(TouchSound,0.001,0)
ex_audio_set_pitch(TouchSound,random_range(0.95,1.05),0)
ex_audio_play(TouchSound,0)
ex_audio_stop(GrabbingSound)
Gripped = false
mDriveCollectionMaster.NubGrabTimer = irandom_range(2000,3000)
}

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Positions &amp; Scales &amp; Differences &amp; Clampings

event_inherited()

x = OriginalX + VibrateMod
y = OriginalY - MouthYDiff + oCaulLead.YMod

BendPercentage = clamp(BendPercentage,-100,100)
StretchPercentage = clamp(StretchPercentage,0,100)
Redness = clamp(Redness,0,0.7)
RednessMod = clamp(RednessMod,0,0.4)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Working Out Path Values Based On Percentages

path_change_point(pCaulNub,
0,
0 + ((0 / 100) * BendPercentage),
5 + ((0 / 100) * StretchPercentage),
1)

path_change_point(pCaulNub,
1,
0 + ((3 / 100) * BendPercentage),
10 + ((2 / 100) * StretchPercentage),
1)

path_change_point(pCaulNub,
2,
0 + ((7 / 100) * BendPercentage),
15 + ((3 / 100) * StretchPercentage),
1)

path_change_point(pCaulNub,
3,
0 + ((12 / 100) * BendPercentage),
20 + ((4 / 100) * StretchPercentage),
1)

path_change_point(pCaulNub,
4,
0 + ((18 / 100) * BendPercentage),
25 + ((5 / 100) * StretchPercentage),
1)

path_change_point(pCaulNub,
5,
0 + ((25 / 100) * BendPercentage),
30 + ((6 / 100) * StretchPercentage),
1)

path_change_point(pCaulNub,
6,
0 + ((33 / 100) * BendPercentage),
35 + ((7 / 100) * StretchPercentage),
1)

path_change_point(pCaulNub,
7,
0 + ((42 / 100) * BendPercentage),
40 + ((8 / 100) * StretchPercentage),
1)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self And Shadow &amp; Engorging Along Path

DrawPathSprite(pCaulNub,
x + 2,
y - 18,
20,
sCaulNub,
1,
0.97,
0.97,
c_black,
0.5,
8,
0
)


DrawPathSprite(pCaulNub,
x,
y - 20,
20,
sCaulNub,
1,
0.97,
0.97,
c_white,
1,
8,
0
)

DrawPathSprite(pCaulNub,
x,
y - 20,
20,
sCaulNubVeiny,
1,
0.97,
0.97,
c_white,
Redness,
8,
0
)

DrawPathSprite(pCaulNub,
x,
y - 20,
20,
sCaulNubRed,
1,
0.97,
0.97,
c_white,
Redness,
8,
0
)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
