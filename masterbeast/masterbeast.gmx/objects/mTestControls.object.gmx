<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sDrip</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

x = ControllerObjectX
y = ControllerObjectY
depth = MetaLayer
image_alpha = 0
ActivateMoles = false
Testing = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Current Test Controls

//------------- T RESERVED FOR TESTING
if keyboard_check_pressed(ord('T')) {
if Testing = true {
Testing = false
} else if Testing = false {
Testing = true
}
}

if keyboard_check_pressed(ord('R')) {
if IsInRitual() {
ExitRitual()
} else {
EnterRitual()
}
}

if keyboard_check_pressed(ord('A')) {
if ActivateMoles = false {
ActivateMoles = true
} else {
ActivateMoles = false
}
}

if keyboard_check_pressed(ord('N')) {
NodUpDown(2)
}

if keyboard_check_pressed(ord('B')) {
mCreatureController.BaseTiredness = 20
mDriveCollectionMaster.alarm[1] = 60
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Test Variables

if Testing = true {
draw_set_font(fTest)
draw_set_colour(c_white)
draw_set_halign(fa_left)
DrawX = 20
DrawY = 20


draw_text(DrawX,DrawY,"TESTING VARIABLES AT " + string(fps) + " FPS")
DrawY += 15
draw_text(DrawX,DrawY,"=======================")
DrawY += 25
//------------------ Emotions &amp; Internal States
draw_text(DrawX,DrawY,"Happy: " + string(mEmotionSubController.HappyActivation))
DrawY += 15
draw_text(DrawX,DrawY,"Sad: " + string(mEmotionSubController.SadActivation))
DrawY += 15
draw_text(DrawX,DrawY,"Anger: " + string(mEmotionSubController.AngerActivation))
DrawY += 15
draw_text(DrawX,DrawY,"Shame: " + string(mEmotionSubController.ShameActivation))
DrawY += 15
draw_text(DrawX,DrawY,"Fear: " + string(mEmotionSubController.FearActivation))
DrawY += 15
draw_text(DrawX,DrawY,"Surprise: " + string(mEmotionSubController.SurpriseActivation))
DrawY += 15
draw_text(DrawX,DrawY,"=======================")
DrawY += 25
draw_text(DrawX,DrawY,"Stress: " + string(mCreatureController.Stress))
DrawY += 15
draw_text(DrawX,DrawY,"Lust: " + string(mCreatureController.Lust))
DrawY += 15
draw_text(DrawX,DrawY,"Pain: " + string(mCreatureController.Pain))
DrawY += 15
draw_text(DrawX,DrawY,"Tiredness: " + string(mCreatureController.Tiredness))
DrawY += 15
draw_text(DrawX,DrawY,"Alive: " + string(mCreatureController.Alive))
DrawY += 15
draw_text(DrawX,DrawY,"CloseToAnne: " + string(mCreatureController.CloseToAnne))
DrawY += 15
draw_text(DrawX,DrawY,"BaseSubIntent: " + string(mCreatureController.BaseSubIntent))
DrawY += 15
draw_text(DrawX,DrawY,"Triad: " + string(mCreatureController.Triad))
DrawY += 15
draw_text(DrawX,DrawY,"Resistance: " + string(mCreatureController.Resistance))
DrawY += 15
draw_text(DrawX,DrawY,"Trust: " + string(mCreatureController.Trust))
DrawY += 15
draw_text(DrawX,DrawY,"=======================")
DrawY += 25
draw_text(DrawX,DrawY,"Drive Timer: " + string(mDriveCollectionMaster.alarm[1]))
DrawY += 15
draw_text(DrawX,DrawY,"Previous Drive: " + string(mDriveCollectionMaster.PreviousDrive))
DrawY += 15
draw_text(DrawX,DrawY,"Current Drive: " + string(mDriveCollectionMaster.CurrentDrive))
DrawY += 15
draw_text(DrawX,DrawY,"Heard Phrase: " + string(global.LatestRecognisedPhrase))
DrawY += 15
draw_text(DrawX,DrawY,"Current Hand Use: " + string(mInterfaceController.CurrentHandUse))
DrawY += 15
draw_text(DrawX,DrawY,"Ritual Tolerance: " + string(mDriveCollectionMaster.RitualTolerance))
DrawY += 15
draw_text(DrawX,DrawY,"NoInteractionTimer: " + string(mDriveCollectionMaster.NoInteractionTimer))
DrawY += 15
draw_text(DrawX,DrawY,"Faces: " + string(mInterfaceController.Faces))
DrawY += 15
draw_text(DrawX,DrawY,"TimeSinceLastSpeech: " + string(mDriveCollectionMaster.TimeSinceLastSpeech))
DrawY += 15
draw_text(DrawX,DrawY,"TimeSinceLastMotion: " + string(mCreatureController.TimeSinceLastMotion))
DrawY += 15
draw_text(DrawX,DrawY,"TimeSinceLastTouch: " + string(mDriveCollectionMaster.TimeSinceLastTouch))
DrawY += 15
draw_text(DrawX,DrawY,"ZoomedInTimer: " + string(mInterfaceController.ZoomedInTimer))
DrawY += 15
draw_text(DrawX,DrawY,"=======================")
DrawY += 25
draw_text(DrawX,DrawY,"CANDIDATE DRIVE: " + string(mDriveCollectionMaster.CandidateDrive))
DrawY += 15



if mDriveCollectionMaster.Drive1FinalPriority &lt; -5 {
draw_text(DrawX,DrawY,"Fall Asleep: TOO LOW")
} else {
draw_text(DrawX,DrawY,"Fall Asleep: " + string(mDriveCollectionMaster.Drive1FinalPriority))
}
DrawY += 15




if mDriveCollectionMaster.Drive2FinalPriority &lt; -5 {
draw_text(DrawX,DrawY,"Player Leave: TOO LOW")
} else {
draw_text(DrawX,DrawY,"Player Leave: " + string(mDriveCollectionMaster.Drive2FinalPriority))
}
DrawY += 15


if mDriveCollectionMaster.Drive3FinalPriority &lt; -5 {
draw_text(DrawX,DrawY,"Player Come: TOO LOW")
} else {
draw_text(DrawX,DrawY,"Player Come: " + string(mDriveCollectionMaster.Drive3FinalPriority))
}
DrawY += 15


if mDriveCollectionMaster.Drive4FinalPriority &lt; -5 {
draw_text(DrawX,DrawY,"Flee: TOO LOW")
} else {
draw_text(DrawX,DrawY,"Flee: " + string(mDriveCollectionMaster.Drive4FinalPriority))
}
DrawY += 15

if mDriveCollectionMaster.Drive5FinalPriority &lt; -5 {
draw_text(DrawX,DrawY,"Retreat: TOO LOW")
} else {
draw_text(DrawX,DrawY,"Retreat: " + string(mDriveCollectionMaster.Drive5FinalPriority))
}
DrawY += 15

if mDriveCollectionMaster.Drive6FinalPriority &lt; -5 {
draw_text(DrawX,DrawY,"To Default Pos: TOO LOW")
} else {
draw_text(DrawX,DrawY,"To Default Pos: " + string(mDriveCollectionMaster.Drive6FinalPriority))
}
DrawY += 15

if mDriveCollectionMaster.Drive7FinalPriority &lt; -5 {
draw_text(DrawX,DrawY,"Come Forward: TOO LOW")
} else {
draw_text(DrawX,DrawY,"Come Forward: " + string(mDriveCollectionMaster.Drive7FinalPriority))
}
DrawY += 15

if mDriveCollectionMaster.Drive8FinalPriority &lt; -5 {
draw_text(DrawX,DrawY,"Go To Eat: TOO LOW")
} else {
draw_text(DrawX,DrawY,"Go To Eat: " + string(mDriveCollectionMaster.Drive8FinalPriority))
}
DrawY += 15

if mDriveCollectionMaster.Drive10FinalPriority &lt; -5 {
draw_text(DrawX,DrawY,"Doze: TOO LOW")
} else {
draw_text(DrawX,DrawY,"Doze: " + string(mDriveCollectionMaster.Drive10FinalPriority))
}
DrawY += 15




if mDriveCollectionMaster.Drive12FinalPriority &lt; -5 {
draw_text(DrawX,DrawY,"Stroke Nose: TOO LOW")
} else {
draw_text(DrawX,DrawY,"Stroke Nose: " + string(mDriveCollectionMaster.Drive12FinalPriority))
}
DrawY += 15

if mDriveCollectionMaster.Drive13FinalPriority &lt; -5 {
draw_text(DrawX,DrawY,"Inspect Mansion: TOO LOW")
} else {
draw_text(DrawX,DrawY,"Inspect Mansion: " + string(mDriveCollectionMaster.Drive13FinalPriority))
}
DrawY += 15

if mDriveCollectionMaster.Drive15FinalPriority &lt; -5 {
draw_text(DrawX,DrawY,"Clean Skin: TOO LOW")
} else {
draw_text(DrawX,DrawY,"Clean Skin: " + string(mDriveCollectionMaster.Drive15FinalPriority))
}
DrawY += 15


if mDriveCollectionMaster.Drive16FinalPriority &lt; -5 {
draw_text(DrawX,DrawY,"Player Get Off: TOO LOW")
} else {
draw_text(DrawX,DrawY,"Player Get Off: " + string(mDriveCollectionMaster.Drive16FinalPriority))
}
DrawY += 15

if mDriveCollectionMaster.Drive17FinalPriority &lt; -5 {
draw_text(DrawX,DrawY,"General Vocalise: TOO LOW")
} else {
draw_text(DrawX,DrawY,"General Vocalise: " + string(mDriveCollectionMaster.Drive17FinalPriority))
}
DrawY += 15

if mDriveCollectionMaster.Drive18FinalPriority &lt; -5 {
draw_text(DrawX,DrawY,"Touch Caul: TOO LOW")
} else {
draw_text(DrawX,DrawY,"Touch Caul: " + string(mDriveCollectionMaster.Drive18FinalPriority))
}
DrawY += 15

if mDriveCollectionMaster.Drive21FinalPriority &lt; -5 {
draw_text(DrawX,DrawY,"Player Touch: TOO LOW")
} else {
draw_text(DrawX,DrawY,"Player Touch: " + string(mDriveCollectionMaster.Drive21FinalPriority))
}
DrawY += 15

if mDriveCollectionMaster.Drive22FinalPriority &lt; -5 {
draw_text(DrawX,DrawY,"Zoom Out: TOO LOW")
} else {
draw_text(DrawX,DrawY,"Zoom Out: " + string(mDriveCollectionMaster.Drive22FinalPriority))
}
DrawY += 15


draw_text(DrawX,DrawY,"NONE: " + string(mDriveCollectionMaster.Drive23FinalPriority) + IsCurrentDrive(mDriveCollectionMaster.Drive23Name))
DrawY += 15
draw_text(DrawX,DrawY,"=======================")
DrawY += 25
//------------------ Variables below here.
draw_text(DrawX,DrawY,"Mic Volume: " + string(round(mWorldController.MicrophoneVolume)))
DrawY += 15


}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
