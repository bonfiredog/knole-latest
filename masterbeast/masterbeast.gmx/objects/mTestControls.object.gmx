<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sDrip</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

x = ControllerObjectX
y = ControllerObjectY
depth = MetaLayer
image_alpha = 0
ActivateMoles = false
Testing = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Current Test Controls

//------------- T RESERVED FOR TESTING
if keyboard_check_pressed(ord('T')) {
if Testing = true {
Testing = false
} else if Testing = false {
Testing = true
}
}

if keyboard_check_pressed(ord('G')) {
if mDriveCollectionMaster.DrivesOn = true {
mDriveCollectionMaster.DrivesOn = false
} else {
mDriveCollectionMaster.DrivesOn = true
}
}

if keyboard_check_pressed(ord('R')) {
if IsInRitual() {
ExitRitual()
} else {
EnterRitual()
}
}

if keyboard_check(ord('M')) and mouse_check_button_pressed(mb_any) {
instance_create(mouse_x,mouse_y,oMoleHerd)
}
if keyboard_check_pressed(ord('A')) {
if ActivateMoles = false {
ActivateMoles = true
} else {
ActivateMoles = false
}
}

if keyboard_check_pressed(ord('H')) {
with oMoleHerd{Hunger += 40}
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Test Variables

if Testing = true {
draw_set_font(fTest)
draw_set_colour(c_white)
draw_set_halign(fa_left)
DrawX = 20
DrawY = 20


draw_text(DrawX,DrawY,"TESTING VARIABLES AT " + string(fps) + " FPS")
DrawY += 15
draw_text(DrawX,DrawY,"=======================")
DrawY += 25
//------------------ Emotions &amp; Internal States
draw_text(DrawX,DrawY,"Happy: " + string(mEmotionSubController.HappyActivation))
DrawY += 15
draw_text(DrawX,DrawY,"Sad: " + string(mEmotionSubController.SadActivation))
DrawY += 15
draw_text(DrawX,DrawY,"Anger: " + string(mEmotionSubController.AngerActivation))
DrawY += 15
draw_text(DrawX,DrawY,"Shame: " + string(mEmotionSubController.ShameActivation))
DrawY += 15
draw_text(DrawX,DrawY,"Fear: " + string(mEmotionSubController.FearActivation))
DrawY += 15
draw_text(DrawX,DrawY,"Surprise: " + string(mEmotionSubController.SurpriseActivation))
DrawY += 15
draw_text(DrawX,DrawY,"=======================")
DrawY += 25
draw_text(DrawX,DrawY,"Stress: " + string(mCreatureController.Stress))
DrawY += 15
draw_text(DrawX,DrawY,"Lust: " + string(mCreatureController.Lust))
DrawY += 15
draw_text(DrawX,DrawY,"Pain: " + string(mCreatureController.Pain))
DrawY += 15
draw_text(DrawX,DrawY,"Tiredness: " + string(mCreatureController.Tiredness))
DrawY += 15
draw_text(DrawX,DrawY,"Alive: " + string(mCreatureController.Alive))
DrawY += 15
draw_text(DrawX,DrawY,"CloseToAnne: " + string(mCreatureController.CloseToAnne))
DrawY += 15
draw_text(DrawX,DrawY,"Triad: " + string(mCreatureController.Triad))
DrawY += 15
draw_text(DrawX,DrawY,"Resistance: " + string(mCreatureController.Resistance))
DrawY += 15
draw_text(DrawX,DrawY,"Trust: " + string(mCreatureController.Trust))
DrawY += 15
draw_text(DrawX,DrawY,"=======================")
DrawY += 25
draw_text(DrawX,DrawY,"Drive Timer: " + string(mDriveCollectionMaster.alarm[1]))
DrawY += 15
draw_text(DrawX,DrawY,"Previous Drive: " + string(mDriveCollectionMaster.PreviousDrive))
DrawY += 15
draw_text(DrawX,DrawY,"Current Drive: " + string(mDriveCollectionMaster.CurrentDrive))
DrawY += 15
draw_text(DrawX,DrawY,"Ritual Tolerance: " + string(mDriveCollectionMaster.RitualTolerance))
DrawY += 15
draw_text(DrawX,DrawY,"=======================")
DrawY += 25
//------------------ Variables below here.
draw_text(DrawX,DrawY,"Number Of Moles: " + string(instance_number(oMoleHerd)))
DrawY += 15

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
