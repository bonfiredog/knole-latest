<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCankerMid3</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

OriginalX = x
OriginalY = y
OriginalRotation = 270
FlutterMod = 0
TouchRotateMod = 0
PluckRotateMod = 0
RotateLimitLower = random_range(-20,-40)
RotateLimitUpper = random_range(20,40)
Plucking = false
RotateChange = random_range(1,2)
Touched = false
Plucking = false
Plucked = false
PluckYMod = 0
BaseRedness = 0
Redness = 0
WobbleMod = 0
WobbleDir = choose("left","right")
WobbleLimit = irandom_range(20,40)
WobbleSpeed = random_range(4,7)

depth = random_range(MidCankerLayerLower,MidCankerLayerUpper)
sprite_index = choose(sCankerMid1,sCankerMid2,sCankerMid3,sCankerMid4,sCankerMid5,sCankerMid6,sCankerMid7)
image_xscale = random_range(0.04,0.06)
image_yscale = image_xscale
OriginalXScale = image_xscale
OriginalYScale = image_yscale

switch sprite_index {
case sCankerMid1:
PluckedSprite = sMCBlood1
RedSprite = sCankerRed1
break;
case sCankerMid2:
PluckedSprite = sMCBlood2
RedSprite = sCankerRed2
break;
case sCankerMid3:
PluckedSprite = sMCBlood3
RedSprite = sCankerRed3
break;
case sCankerMid4:
PluckedSprite = sMCBlood4
RedSprite = sCankerRed4
break;
case sCankerMid5:
PluckedSprite = sMCBlood5
RedSprite = sCankerRed5
break;
case sCankerMid6:
PluckedSprite = sMCBlood6
RedSprite = sCankerRed6
break;
case sCankerMid7:
PluckedSprite = sMCBlood7
RedSprite = sCankerRed7
break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Touching

if place_meeting(x,y,mFinger) and instance_exists(mDebug) = false
and mInterfaceController.CurrentHandUse != "holding"
and Plucking = false
and AmountForward(80)
and Plucked = false
{
if Touched = false {

if ex_audio_is_playing("touchwet1") = false and
ex_audio_is_playing("touchwet2") = false and
ex_audio_is_playing("touchwet3") = false {
TouchSound = choose("touchwet1","touchwet2","touchwet3")
ex_audio_set_volume(TouchSound,0.5,0)
ex_audio_set_pitch(TouchSound,random_range(0.95,1.05),0)
ex_audio_play(TouchSound,0)
}
}
Touched = true
} else {
Touched = false
}


if Touched = true and Plucking = false  {
//Rotate To One Side Slowly
if x &lt; (mouse_x) {
TouchRotateMod -= 2
} else if x &gt; (mouse_x) {
TouchRotateMod += 2
}
BaseRedness += 0.01

} else if Touched = false and Plucked = false{

//Slowly Return To Normal Rotation

ChangeOrNot = choose(-1,-1,-1,-1,-1,1)

if ChangeOrNot = 1 {
RotateChange = random_range(1,2)
}

if TouchRotateMod &gt; 0 {
TouchRotateMod -= RotateChange 
}

if TouchRotateMod &lt; 0 {
TouchRotateMod += RotateChange
}
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cutting

if (instance_exists(mFinger) and place_meeting(x,y,mFinger)) and mInterfaceController.CurrentHandUse = "knife" 
and Plucked = false and instance_exists(mDebug) = false
and AmountForward(75)
{
ex_audio_set_pitch("cutout",random_range(0.8,1.2))
ex_audio_set_volume("cutout",0.01,0)
ex_audio_play("cutout",0)
CreateParticleSplash(x,y,40,ps_shape_ellipse,
ps_distr_gaussian,
DebugRedTextColour,
20,
40,
0.05,
0.1,
0,
360,
50,
90,
0.5,
100
)
CreateStain(40,0,360,0.2,0.4,0.1,0.2,0.4,0.05,0.1,BloodLiquidColour,x,y)
WriteToLog("Cut a canker.")
CankerCutRipReactions()
ThisPluck = instance_create(device_mouse_x(0),device_mouse_y(0),oCaulPlucked)
ThisPluck.image_angle = direction
ThisPluck.sprite_index = sprite_index
ThisPluck.image_xscale = image_xscale
ThisPluck.image_yscale = image_xscale
ThisPluck.PluckedSprite = PluckedSprite
ThisPluck.direction = direction
ThisPluck.speed = 60
ThisPluck.x = mouse_x
ThisPluck.y = mouse_y
Plucked = true
sprite_index = choose(sCankerWound1,sCankerWound2,sCankerWound3)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movements

if instance_exists(oCaulJug) {
x = OriginalX + oCaulJug.ShakeDiff
y = OriginalY + oCaulJug.YDifference
}

//Wobbling
if Touched = false {
if WobbleDir = "left" {
if WobbleMod &gt; -100 {
WobbleMod -= (WobbleSpeed / 100) * oCaulJug.CankerWobbleAmount
} else if WobbleMod &lt;= -100 {
WobbleDir = "right"
}
} if WobbleDir = "right" {
if WobbleMod &lt; 100 {
WobbleMod += (WobbleSpeed / 100) * oCaulJug.CankerWobbleAmount
} else if WobbleMod &gt;= 100 {
WobbleDir = "left"
}
}
}

WobbleMod = clamp(WobbleMod,-100,100)

if Plucking = false and Plucked = false {
image_angle = OriginalRotation + TouchRotateMod + ((WobbleLimit / 100) * WobbleMod)
}
image_xscale = OriginalXScale + PluckYMod
image_yscale = OriginalYScale 

TouchRotateMod = clamp(TouchRotateMod,RotateLimitLower,RotateLimitUpper)
image_angle = clamp(image_angle,OriginalRotation -40,OriginalRotation + 40)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Plucking

///Being Plucked

if (instance_exists(mFinger) and place_meeting(x,y,mFinger)) and instance_exists(mDebug) = false
and Plucking = false
and AmountForward(80)
and oCaulJug.GlobalPlucking = false
and Plucked = false
{
Plucking = true
PluckSound = choose("cankerpull1","cankerpull2")
ex_audio_set_volume(PluckSound,BothVolMod(0.5),0)
StartPitch = 0.7
ex_audio_set_pitch(PluckSound,StartPitch,0)
ex_audio_play(PluckSound,1)
oCaulJug.GlobalPlucking = true
}

if Plucking = true and device_mouse_check_button(0,mb_any)
and instance_exists(oCaulPlucked) = false 
and Plucked = false {
CankerPullReaction()
image_angle = point_direction(x,y,mouse_x,mouse_y)
PluckYMod = point_distance(x,y,mouse_x,mouse_y) / 4000
BaseRedness += 0.005
ex_audio_set_pitch(PluckSound,StartPitch + (0.25 / 150) * (point_distance(x,y,device_mouse_x(0),device_mouse_y(0))),0)
}


if (Plucking = true and device_mouse_check_button(0,mb_any) and point_distance(x,y,device_mouse_x(0),device_mouse_y(0)) &gt; 150
and instance_exists(oCaulPlucked) = false)
and Plucked = false
{
ex_audio_set_volume(PluckSound,0,10)
ex_audio_set_pitch("cutout",random_range(0.8,1.2))
ex_audio_set_volume("cutout",0.5,0)
ex_audio_play("cutout",0)
CreateParticleSplash(x,y,sprite_width,ps_shape_ellipse,
ps_distr_gaussian,
DebugRedTextColour,
10,
25,
0.05,
0.1,
0,
360,
50,
90,
0.5,
100
)
WriteToLog("Plucked a canker.")
CankerCutRipReactions()
PluckYMod = 0
PluckRotateMod = 0
ThisPluck = instance_create(device_mouse_x(0),device_mouse_y(0),oCaulPlucked)
ThisPluck.image_angle = image_angle
ThisPluck.sprite_index = sprite_index
ThisPluck.image_xscale = OriginalXScale
ThisPluck.image_yscale = OriginalYScale
ThisPluck.PluckedSprite = PluckedSprite
ThisPluck.speed = 60
oCaulJug.GlobalPlucking = false
sprite_index = choose(sCankerWound1,sCankerWound2,sCankerWound3)
depth = oCaulJug.depth - 0.000001
image_angle = 270
Plucked = true
}


if Plucking = true and device_mouse_check_button_released(0,mb_any) and Plucked = false {
Plucking = false
oCaulJug.GlobalPlucking = false
ex_audio_stop(PluckSound)
}

if Plucking = false and Plucked = false and Touched = false {
if BaseRedness &gt; 0 {
BaseRedness -= 0.01
}

if PluckYMod &gt; 0 {
PluckYMod -= 0.1
}

if Touched = false {
if image_angle != 270 {
if image_angle &lt; 270 {
image_angle += 1
} else if image_angle &gt; 270 {
image_angle -= 1
}
}
}
}

if oCaulJug.GlobalPlucking = false {
if ex_audio_is_playing("cankerpull1") {
if ex_audio_get_volume("cankerpull1") &lt;= 0 {
ex_audio_stop("cankerpull1")
}
}

if ex_audio_is_playing("cankerpull2") {
if ex_audio_get_volume("cankerpull2") &lt;= 0 {
ex_audio_stop("cankerpull2")
}
}

}

BaseRedness = clamp(BaseRedness,0,0.5)
Redness = BaseRedness + ((0.4 / 100) * oCaulJug.EngorgedPercentage)  + ((0.5 / 100) * mDriveCollectionMaster.RitualTolerance)
Redness = clamp(Redness,0,0.9)
PluckYMod = clamp(PluckYMod,0,0.1)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self And Shadow And Redness

if Plucked = false {
draw_sprite_ext(sprite_index,0,x + 4,y + 4,image_xscale,image_yscale,image_angle,c_black,0.4)
draw_self()
draw_sprite_ext(RedSprite,0,x,y,image_xscale,image_yscale,image_angle,c_white,Redness)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
