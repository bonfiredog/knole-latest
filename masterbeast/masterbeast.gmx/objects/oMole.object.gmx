<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

Size = choose("small","med","large")

if Size = "small" {
depth = random_range(0.3,0.4)
image_xscale = random_range(0.1,0.2)
image_yscale = image_xscale
} else if Size = "med" {
depth = random_range(0.5,0.6)
image_xscale = random_range(0.3,0.4)
image_yscale = image_xscale
} else if Size = "large" {
image_xscale = random_range(0.5,0.6)
image_yscale = image_xscale
depth = random_range(0.7,0.8)
}

GrowRate = random_range(0.0002,0.0003)
OriginalGrowRate = GrowRate
EatingGrowRate = GrowRate * 1.5

OriginalXScale = image_xscale
OriginalYScale = image_yscale
BaseXScale = OriginalXScale
BaseYScale = OriginalYScale
ZOutScale = OriginalXScale * 3

//Senses
SenseRadius = 100
NearestWaterX = 0
NearestWaterY = 0
NearestFoodX = 0
NearestFoodY = 0
NeighbourCount = 0

//Drives
Energy = 100
Hunger = 0
Loneliness = 0


//Behaviours
Shivering = false
ShiverDir = "out"
ShiverMod = 0

Eating = false

FleeDistance = 200
Fleeing = false

Position[0] = 2
Position[1] = x
Position[2] = y

Velocity[0] = 2
Velocity[1] = 0
Velocity[2] = 0

Steering[0]= 2
Steering[1] = 0
Steering[2] = 0

MaxSpeed = 4
MaxForce = 0.7


ChangeDirectionTimer = irandom_range(60,200)
CurrentSpeed = 2

direction = random(360)
speed = 2


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Changing Sprites Depending On View

if oParasiteController.CurrentView = "out" {
sprite_index = sMoleSmall
image_xscale = ZOutScale
image_yscale = ZOutScale
} else if oParasiteController.CurrentView = "in" {
sprite_index = sMoleBig
image_xscale = BaseXScale + ShiverMod
image_yscale = BaseYScale + ShiverMod
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Needs/Drives Going Up

if Eating = false {
BaseXScale += GrowRate
BaseYScale += GrowRate
} else {
BaseXScale += EatingGrowRate
BaseYScale += EatingGrowRate
}

Hunger = clamp(Hunger,0,100)
Loneliness = clamp(Loneliness,0,100)
Energy = clamp(Energy,0,100)

//Loneliness goes up if no other moles nearby.
if instance_nearest(x,y,oMole) &gt; SenseRadius {
Loneliness += 0.005
} else {
Loneliness -= 0.005
}

//Hunger goes up constantly.
Hunger += 0.005

//Energy goes down constantly, apart from when eating.

if Eating = false {
Energy -= 0.005
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement In Relation To View

if oParasiteController.CurrentView = "in" and Fleeing = false {
if x &gt; view_xview[1] + 300 and x &lt; ((view_xview[1] + view_wview[1]) - 300)
and y &gt; view_yview[1] + 300 and y &lt; ((view_yview[1] + view_hview[1]) - 300)
{
speed = 0
Shivering = true
} else {
Shivering = false
}
} else {
Shivering = false
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Staying On Body Or Going Around The Back

//X Axis

if x &gt; (oPHeadTest.x + (oPHeadTest.sprite_width / 2)) {
direction = random_range(120,210)
}

if x &lt; (oPHeadTest.x - (oPHeadTest.sprite_width / 2)) {
direction = random_range(-30,30)
}

//Y Axis

if y &gt; (oPHeadTest.y + (oPHeadTest.sprite_height / 2)) {
direction = random_range(50,130)
}

if y &lt; (oPHeadTest.y - (oPHeadTest.sprite_height / 2)) {
direction = random_range(200,320)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Learning Where Things Are

NearestFS = instance_nearest(x,y,oFoodSource)

if instance_exists(oFoodSource) {
if point_distance(x,y,NearestFS.x,NearestFS.y) &lt; SenseRadius {
NearestFoodX = NearestWS.x
NearestFoodY = NearestWS.y
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Behaviour Plan

ShiverMod = clamp(ShiverMod,0,0.2)

//Shivering
if Shivering = true {
if ShiverDir = "out" {
if image_xscale &lt; (BaseXScale + 0.02) {
ShiverMod += 0.2
} else {
ShiverDir = "in"
}
} else if ShiverDir = "in" {
if image_xscale &gt; (BaseXScale - 0.02) {
ShiverMod -= 0.2
} else {
ShiverDir = "out"
}
}
} else if Shivering = false {


if point_distance(x,y,mouse_x,mouse_y) &lt; SenseRadius
and position_meeting(mouse_x,mouse_y,self) = false
and mouse_check_button_pressed(mb_left) {
Fleeing = true 
Modifier = random_range(-90,90)
direction = point_direction(mouse_x,mouse_y,x,y) + Modifier
CurrentSpeed = 2
ThreatX = mouse_x
ThreatY = mouse_y
}

//Fleeing
if Fleeing = true {
if point_distance(x,y,ThreatX,ThreatY) &gt; FleeDistance {
CurrentSpeed = 0.5
Fleeing = false
}
} else if Fleeing = false {
/*
//Flocking 

SpeedAvg = 0
DirectionAvg = 0

if distance_to_object(oMole) &lt;= SenseRadius {
Neighbour1 = InstanceNthNearest(x,y,oMole,1)
Neighbour2 = InstanceNthNearest(x,y,oMole,2)
Neighbour3 = InstanceNthNearest(x,y,oMole,3)

SpeedAvg = Neighbour1.speed + Neighbour2.speed + Neighbour3.speed
DirectionAvg = Neighbour1.direction + Neighbour2.direction + Neighbour3.direction

speed = SpeedAvg / 3
direction = DirectionAvg / 3
*/
speed = 2
//}
}
ShiverMod = 0
}






































///Behaviour Plan

//if energy 0, no movement
/*

with oMole {
if id != MyID {
if point_distance(x,y,MyID.x,MyID.y) &lt; SenseRadius {
MyID.SpeedToAverage += speed
MyID.DirectionToAverage += direction
MyID.NeighbourCount += 1
}
}

//reacting to where touched.

AverageSpeed = SpeedToAverage / NeighbourCount 
AverageDirection = DirectionToAverage / NeighbourCount

if NeighbourCount = 0 {
AverageSpeed = speed
AverageDirection = direction
}

*/

///Shivering


//if (point_distance(instance_nearest(x,y,oMole).x,instance_nearest(x,y,oMole).y,x,y) &lt;= SenseRadius)
//and instance_nearest(x,y,oMole).speed &gt; 5 
//{
//} else {


//Fleeing Behaviour


/*
//General Flocking Behaviour

MyID = self.id
NeighbourCount = 0
SpeedToAverage = 0
DirectionToAverage = 0
CohesionToAverage = 0
SeparationToAverage = 0

if NeighbourCount &gt; 0 {

//Work Out How Many Neighbours I Have, And Add Their Variables To Be Averaged.

//Average All The Variables, And Apply Them To Myself.

} else if NeighbourCount &lt;= 0 {
*/
//If there are no neighbours, and no other pressing needs, wander aimlessly.
/*
if ChangeDirectionTimer &gt; 0 {
ChangeDirectionTimer -= 1
} else if ChangeDirectionTimer &lt;= 0 {
direction = random(360)
ChangeDirectionTimer = irandom_range(60,200)
//}
}
}









if Eating = true {
speed = 0
Hunger -= 0.5
}













/*
if Thirst &gt; 50 {
if NearestWaterX != 0 {
CurrentSpeed = 0.5
direction = point_direction(x,y,NearestWaterX,NearestWaterY)
} else {
if Hunger &gt; 50 {
if NearestWaterX != 0 {
CurrentSpeed = 0.5
direction = point_direction(x,y,NearestWaterX,NearestWaterY)
}
} else {

}
}
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Picking

if position_meeting(mouse_x,mouse_y,self) and mouse_check_button_pressed(mb_any) {
ThisPicked = instance_create(mouse_x,mouse_y,oMolePicked)
ThisPicked.image_xscale = image_xscale + 0.2
ThisPicked.image_yscale = ThisPicked.image_xscale + 0.4
instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing With UI

if place_meeting(x,y,oMousePointer) {
draw_set_font(fDebugWords)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_set_colour(c_black)
draw_text(x,y - 100,"Hunger: " + string(Hunger))
draw_text(x,y - 80,"Lonely: " + string(Loneliness))
draw_text(x,y - 60,"Energy: " + string(Energy))
}

draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
