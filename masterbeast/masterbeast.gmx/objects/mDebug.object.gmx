<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sDebugBackground</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

depth = MetaLayer

//--------------- Various Variables
RootTopX = 0
RootTopY = 0
show_debug_overlay(true)
State = "closed"
OpenXScale = 0.9
OpenYScale = 0.9
SizeRate = 0.04
FadeRate = 0.06
TextX = 0
TextY = 0
CurrentFPS = 0
StepsToCount = 30
CurrentSteps = 0
Paused = false
CurrentFPS = string(fps_real)
DrawnText = false
StartScrollSystem = false
TopOfDebugText = 0
BottomOfDebugText = 0
FullLengthOfText = 0
FullyOpen = false
alarm[0] = 180
PressedQ = false
PressedR = false
Timer = 0
DisplayShape = 0
GestureDisplayTime = 120
ShowingTestGesture = false
GestureText = "No Gesture Detected"
Column1WidthSurface = 400
Column2WidthSurface = 400
HeightOfGraph = 200
TimerStarted = false

switch mWorldController.TonightMoonPhase {
case "Full Moon":
CurrentMoonPhaseSprite = sFullMoon;
break;

case "Waxing Gibbous":
CurrentMoonPhaseSprite = sWaxGib;
break;

case "First Quarter":
CurrentMoonPhaseSprite = s1Quarter;
break;

case "Waxing Crescent":
CurrentMoonPhaseSprite = sWaxCres;
break;

case "New Moon":
CurrentMoonPhaseSprite = sNewMoon;
break;

case "Waning Crescent":
CurrentMoonPhaseSprite = sWanCres;
break;

case "Last Quarter":
CurrentMoonPhaseSprite = s3Quarter;
break;

case "Waning Gibbous":
CurrentMoonPhaseSprite = sWanGib;
break;

default:
CurrentMoonPhaseSprite = sFullMoon
}

//---------------- Make Invisible &amp; Small Initially

image_xscale = 0
image_yscale = image_xscale
image_alpha = 0
x = view_xview[0] + (view_wview[0] / 2)
y = view_yview[0] + (view_hview[0] / 2) 

//----------------- Initial Check of Debug Functions
MouseAndKeyboardAttachedString = MouseAndKeyboardAttached()
NetworkDetectedString = NetworkDetected()
EavesdropRunningString = EavesdropRunning()

WriteToLog("Opened Debug.")

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Button Objects

with mDebugLogButton {instance_destroy()}

with mDebugWipeLogButton {instance_destroy()}

with GithubButton {instance_destroy()}

with EmailButton {instance_destroy()}

with WebsiteButton {instance_destroy()}

with mDebugScrollMarker {instance_destroy()}

with TwitterButton {instance_destroy()}

with mWeatherToggleButton {instance_destroy()}

with mDebugStopFlickerButton {instance_destroy()}

with mDebugNoViewportFilterButton {instance_destroy()}

with mDebugEnviroLightButton { instance_destroy() }

with mDebugObjectLightButton { instance_destroy() }

with mDebugPrintConceptsButton { instance_destroy() }

with mDebugTabooToggle {instance_destroy() }

with mDebugFingerToggleButton {instance_destroy()}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Cursor If Not Toggled

//show_debug_overlay(false)
WriteToLog("Closed Debug.")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Debug Functions

MouseAndKeyboardAttachedString = MouseAndKeyboardAttached()
NetworkDetectedString = NetworkDetected()
EavesdropRunningString = EavesdropRunning()
alarm[0] = 180
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handling Close

if (keyboard_check(vk_shift) and keyboard_check(ord('D')) 
and keyboard_check_pressed(ord('L')))
or (mouse_check_button(mb_any) and global.LatestRecognisedPhrase = "Elohim El Adonnay Tetragrammaton")
{
global.LatestRecognisedPhrase = "none"
State = "closing"
SoundPlayed = false
} 

if State = "opening" {
if image_xscale &lt; OpenXScale {
image_xscale = image_xscale + SizeRate
image_yscale = image_yscale + SizeRate
image_alpha = image_alpha + FadeRate
}
else if image_xscale &gt;= OpenXScale {
if image_alpha &lt; 1 {
image_alpha = 1
}
SetDebugColumnVariables()
ScrollSurface = surface_create(860,1300)
CreateDebugButtons()
window_set_cursor(cr_handpoint)
FullyOpen = true
State = "open"
}
} else if State = "closing" {
if SoundPlayed = false {
ex_audio_play("debugclose",0)
SoundPlayed = true
}

if image_xscale &gt; 0 {
image_xscale = image_xscale - SizeRate
image_yscale = image_yscale - SizeRate
image_alpha = image_alpha + FadeRate
}
else if image_xscale &lt;= 0 {
if image_alpha &gt; 0 {
image_alpha = 0
}
show_debug_overlay(false)
if surface_exists(ScrollSurface) {
surface_free(ScrollSurface)
}
//window_set_cursor(cr_none)
instance_destroy()
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Maintaining Position In The View

x = view_xview[0] + (view_wview[0] / 2)
y = (view_yview[0] + view_hview[0] / 2)

if State = "open" {
if image_xscale &lt; OpenXScale or image_xscale &gt; OpenXScale {
image_xscale = OpenXScale
} 

if image_yscale &lt; OpenXScale or image_yscale &gt; OpenXScale {
image_yscale = OpenXScale
} 
}

SetDebugColumnVariables()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Getting FPS 

if CurrentSteps &lt; StepsToCount {
CurrentSteps += 1
} else if CurrentSteps &gt;= StepsToCount {
CurrentFPS = string(round(fps))
CurrentSteps = 0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Starting Scroll System

if DrawnText = true and StartScrollSystem = false {
StartScrollSystem = true
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Quitting Or Restarting

if State = "open" {

if keyboard_check_pressed(ord('Q')) and PressedQ = false {
PressedR = false
PressedQ = true
Timer = 60
}

if PressedQ = true or PressedR = true {
Timer -= 1
if Timer = 0 {
PressedQ = false
PressedR = false
}
}

if Timer &gt; 0 and keyboard_check_pressed(ord('Q')) and PressedQ = true {
game_end()
}


if Timer &gt; 0 and keyboard_check_pressed(ord('R')) and PressedR = false {
PressedR = true
PressedQ = false
Timer = 60
}

if keyboard_check_pressed(ord('R')) and PressedR = true {
WriteToLog("Game restarted.")
game_restart()
}

if keyboard_check_pressed(ord('P')) {
ex_audio_suspend_all()
PauseObject = instance_create(x,y,mDebugPause)
with PauseObject {
instance_deactivate_all(true)
}
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing Elements

draw_sprite_ext(sDebugBackground,1,540,960,0.8,0.8,0,c_white,1)

//Draw the woodcut top left.
DrawRelativeImageDebug(sDebugLogo,108 + 60,222 + 40,0.2,0.2,0,c_white,0.7)

//Set the surface.
if State = "open" {
TextX = 250
TextY = 225
DrawTextRelativeDebug(fDebugTitle,DebugBlackTextColour,0.7,fa_left,fa_center,"P  R  O  J  E  C  T    K  N  O  L  E",500)
TextY = TextY + 25
DrawTextRelativeDebug(fDebugSubtitle,DebugBlackTextColour,0.7,fa_left,fa_center,"v. 0.8.0",500)
TextY = TextY + 25
DrawTextRelativeDebug(fDebugSubtitle,DebugBlackTextColour,0.7,fa_left,fa_center,"A PhD Project by Rob Sherman",500)


//Draw Top-Left Stats

TextX = 1080 - 110
TextY = 225

DrawTextRelativeDebug(fDebugStats,DebugRedTextColour,0.7,fa_right,fa_center,mWorldController.CurrentHour + ":" + mWorldController.CurrentMinute + ":" + mWorldController.CurrentSecond + " (" + mWorldController.CurrentTOD + ")",5000)
TextY = TextY + 20
DrawTextRelativeDebug(fDebugStats,DebugRedTextColour,0.7,fa_right,fa_center,mWorldController.CurrentWeekday + " " + mWorldController.CurrentDay + " " + mWorldController.CurrentMonth + " " + string(mWorldController.CurrentYear) + " (" + mWorldController.CurrentTOY + ")", 5000)
TextY = TextY + 20
DrawTextRelativeDebug(fDebugStats,DebugRedTextColour,0.7,fa_right,fa_center,string(mWorldController.Days) + "d " + string(mWorldController.Hours) + "h " + string(mWorldController.Minutes) + "m " + string(mWorldController.Seconds) + "{", 5000)
TextY = TextY + 30
DrawTextRelativeDebug(fDebugStatsFPS,DebugRedTextColour,0.7,fa_right,fa_center,CurrentFPS + " FPS",500)

with EmailButton {
draw_sprite_ext(sprite_index,0,RelativeX,RelativeY,image_xscale,image_yscale,0,c_white,1)
if mDebug.State = "open" {
draw_set_font(fDebugButton)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_set_colour(DebugBlackTextColour)
draw_text(RelativeX + 43,RelativeY,Text)
}
}

if ClickableButton(
(EmailButton.RelativeX + 43) - (EmailButton.sprite_width / 2) - 100,
(EmailButton.RelativeY) - (EmailButton.sprite_height / 2) - 410,
(EmailButton.RelativeX + 43) + (EmailButton.sprite_width / 2) - 100,
(EmailButton.RelativeY) + (EmailButton.sprite_height / 2) - 410,
) 
{
with EmailButton {
url_open(URL)
}
}



with GithubButton {
draw_sprite_ext(sprite_index,0,RelativeX,RelativeY,image_xscale,image_yscale,0,c_white,1)
if mDebug.State = "open" {
draw_set_font(fDebugButton)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_set_colour(DebugBlackTextColour)
draw_text(RelativeX + 43,RelativeY,Text)
}
}

if ClickableButton(
(GithubButton.RelativeX + 43) - (GithubButton.sprite_width / 2) - 100,
(GithubButton.RelativeY) - (GithubButton.sprite_height / 2) - 410,
(GithubButton.RelativeX + 43) + (GithubButton.sprite_width / 2) - 100,
(GithubButton.RelativeY) + (GithubButton.sprite_height / 2) - 410,
) 
{
with GithubButton {
url_open(URL)
}
}

with WebsiteButton {
draw_sprite_ext(sprite_index,0,RelativeX,RelativeY,image_xscale,image_yscale,0,c_white,1)
if mDebug.State = "open" {
draw_set_font(fDebugButton)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_set_colour(DebugBlackTextColour)
draw_text(RelativeX + 43,RelativeY,Text)
}
}


if ClickableButton(
(WebsiteButton.RelativeX + 43) - (WebsiteButton.sprite_width / 2) - 100,
(WebsiteButton.RelativeY) - (WebsiteButton.sprite_height / 2) - 410,
(WebsiteButton.RelativeX + 43) + (WebsiteButton.sprite_width / 2) - 100,
(WebsiteButton.RelativeY) + (WebsiteButton.sprite_height / 2) - 410,
) 
{
with WebsiteButton {
url_open(URL)
}
}


with TwitterButton {
draw_sprite_ext(sprite_index,0,RelativeX,RelativeY,image_xscale,image_yscale,0,c_white,1)
if mDebug.State = "open" {
draw_set_font(fDebugButton)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_set_colour(DebugBlackTextColour)
draw_text(RelativeX + 43,RelativeY,Text)
}
}

if ClickableButton(
(TwitterButton.RelativeX + 43) - (TwitterButton.sprite_width / 2) - 100,
(TwitterButton.RelativeY) - (TwitterButton.sprite_height / 2) - 410,
(TwitterButton.RelativeX + 43) + (TwitterButton.sprite_width / 2) - 100,
(TwitterButton.RelativeY) + (TwitterButton.sprite_height / 2) - 410,
) 
{
with TwitterButton {
url_open(URL)
}
}


draw_set_colour(DebugRedTextColour)
draw_line(100,370,1080 - 110,370)  
draw_line(100,380,1080 - 110,380)
draw_set_color(c_black)



//------------------------------------Main Body Of Debug

if surface_exists(ScrollSurface) = false {
ScrollSurface = surface_create(860,1300)
}

//Set the target to be the Scroll Surface.
surface_set_target(ScrollSurface)
draw_clear_alpha(c_gray,0)
draw_enable_alphablend(false)


//--------------------------------Column 1
TextX = 0
TextY = 10
TopOfDebugText = TextY

//Game Section

DrawTextRelativeDebugSurface(fDebugTitle, DebugBlackTextColour, 0.7, fa_left,fa_center,"G  A  M  E",Column1WidthSurface)
TextY += 25
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + (Column1WidthSurface),TextY - DebugScrollOffset())
TextY += 18
DrawTextRelativeDebugSurface(fDebugWordsItalic, DebugRedTextColour, 0.7, fa_left,fa_center,"Pre{{ Q twice to quit, R twice to restart and P once to pause.",Column1WidthSurface)
TextY += 30
if MouseAndKeyboardAttachedString = "true" {
DrawTextRelativeDebugSurface(fDebugStats, DebugRedTextColour, 0.7,fa_left,fa_center,"(x)   Keyboard and mouse attached.", Column1WidthSurface)
} else if MouseAndKeyboardAttachedString = "false" {
DrawTextRelativeDebugSurface(fDebugStats, DebugBlackTextColour, 0.7,fa_left,fa_center,"( )   Keyboard or mouse not found.", Column1WidthSurface)
}
TextY += 30
if NetworkDetectedString = "true" {
DrawTextRelativeDebugSurface(fDebugStats, DebugRedTextColour, 0.7,fa_left,fa_center,"(x)   Connected to the network.", Column1WidthSurface)
} else if NetworkDetectedString = "false" {
DrawTextRelativeDebugSurface(fDebugWords, DebugBlackTextColour, 0.7,fa_left,fa_center,"( )   No network connection found.", Column1WidthSurface)
}
TextY += 30
DrawTextRelativeDebugSurface(fDebugWords, DebugRedTextColour, 0.7, fa_left, fa_center,"Current Active View: " + mInterfaceController.CurrentView, Column1WidthSurface)
TextY += 250

//Yocto Section
DrawTextRelativeDebugSurface(fDebugTitle, DebugBlackTextColour, 0.7, fa_left,fa_center,"Y  O  C  T  O",Column1WidthSurface)
TextY += 25
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + (Column1WidthSurface),TextY - DebugScrollOffset())
TextY += 140
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugRedTextColour, 0.7, fa_left,fa_center,"Dirt: " + string(mCreatureController.Dirt),Column1WidthSurface)
TextY += 30
if instance_exists(mFrontLoading) {
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugRedTextColour, 0.7, fa_left,fa_center,"Generation Ongoing...",Column1WidthSurface)
} else {
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugRedTextColour, 0.7, fa_left,fa_center,"Generation Finished.",Column1WidthSurface)
}
TextY += 30


//------------- TEST SPACE - If anything in a release build here, DELETE!

// --------------------------------

DrawTextRelativeDebugSurface(fDebugStatsBig,DebugRedTextColour, 0.7, fa_left,fa_center,"Number Of Active Fur{: " + string(instance_number(mFurParent) + instance_number(mFurBrowParent) + instance_number(mFurCurledParent)),Column1WidthSurface)
TextY += 50

//--------------------

DrawTextRelativeDebugSurface(fDebugStatsBig,DebugBlackTextColour, 0.7, fa_left,fa_center,"Alive: " + string(mCreatureController.Alive),Column1WidthSurface)
TextY += 20
DebugMakeColumnBar(mCreatureController.Alive,100,1)
TextY += 40
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugBlackTextColour, 0.7, fa_left,fa_center,"Tirednes{: " + string(mCreatureController.Tiredness),Column1WidthSurface)
TextY += 20
DebugMakeColumnBar(mCreatureController.Tiredness,100,1)
TextY += 40
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugBlackTextColour, 0.7, fa_left,fa_center,"Pain: " + string(mCreatureController.Pain),Column1WidthSurface)
TextY += 20
DebugMakeColumnBar(mCreatureController.Pain,100,1)
TextY += 40
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugBlackTextColour, 0.7, fa_left,fa_center,"Thirst: " + string(mCreatureController.Thirst),Column1WidthSurface)
TextY += 20
DebugMakeColumnBar(mCreatureController.Thirst,100,1)
TextY += 40
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugBlackTextColour, 0.7, fa_left,fa_center,"Lust: " + string(mCreatureController.Lust),Column1WidthSurface)
TextY += 20
DebugMakeColumnBar(mCreatureController.Lust,100,1)
TextY += 40
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugBlackTextColour, 0.7, fa_left,fa_center,"Stres{: " + string(mCreatureController.Stress),Column1WidthSurface)
TextY += 20
DebugMakeColumnBar(mCreatureController.Stress,100,1)
TextY += 40
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugBlackTextColour, 0.7, fa_left,fa_center,"Temperature: " + string(mCreatureController.Temperature),Column1WidthSurface)
TextY += 20
DebugMakeColumnBar(mCreatureController.Temperature,100,1)
TextY += 75

//Internal State Section
DrawTextRelativeDebugSurface(fDebugStatsBig, DebugRedTextColour,0.7,fa_left,fa_center,"Concept{",Column1WidthSurface)
TextY += 10
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + string_width("Concept{"),TextY - DebugScrollOffset())
TextY += 30
DrawTextRelativeDebugSurface(fDebugStatsBig, DebugBlackTextColour,0.7,fa_left,fa_center,
"Trust: " + string(mCreatureController.Trust),Column1WidthSurface)
TextY += 20
DrawTextRelativeDebugSurface(fDebugStatsBig, DebugBlackTextColour,0.7,fa_left,fa_center,
"Subscryber Intent: " + string(mCreatureController.BaseSubIntent),Column1WidthSurface)
TextY += 20
DrawTextRelativeDebugSurface(fDebugStatsBig, DebugBlackTextColour,0.7,fa_left,fa_center,
"Resistance: " + string(mCreatureController.Resistance),Column1WidthSurface)
TextY += 20
DrawTextRelativeDebugSurface(fDebugStatsBig, DebugBlackTextColour,0.7,fa_left,fa_center,
"Proximity To Anne: " + string(mCreatureController.CloseToAnne),Column1WidthSurface)
TextY += 20
DrawTextRelativeDebugSurface(fDebugStatsBig, DebugBlackTextColour,0.7,fa_left,fa_center,
"Anne Intent: " + string(mCreatureController.AnneIntent),Column1WidthSurface)
TextY += 20
DrawTextRelativeDebugSurface(fDebugStatsBig, DebugBlackTextColour,0.7,fa_left,fa_center,
"Triad: " + string(mCreatureController.Triad),Column1WidthSurface)
TextY += 45

DrawTextRelativeDebugSurface(fDebugStatsBig, DebugRedTextColour,0.7,fa_left,fa_center,"Emotion{",Column1WidthSurface)
TextY += 10
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + string_width("Emotion{"),TextY - DebugScrollOffset())
TextY += 30
DrawTextRelativeDebugSurface(fDebugStatsBig, DebugRedTextColour,0.7,fa_left,fa_center,
"Current Mood: " + string(mEmotionSubController.TotalCurrentMood) + " out of 100",Column1WidthSurface)
TextY += 30
DebugMakeColumnBar(mEmotionSubController.TotalCurrentMood,100,1)
TextY += 60
DrawTextRelativeDebugSurface(fDebugStatsBig, DebugBlackTextColour,0.7,fa_left,fa_center,
"Good Mood Decay Rate: " + string(mEmotionSubController.GoodMoodDecayRate), Column1WidthSurface)
TextY += 20
DrawTextRelativeDebugSurface(fDebugStatsBig, DebugBlackTextColour,0.7,fa_left,fa_center,
"Bad Mood Decay Rate: " + string(mEmotionSubController.BadMoodDecayRate), Column1WidthSurface)
TextY += 60

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour, 0.7, fa_left,fa_center,"Happines{: " + string(mEmotionSubController.HappyActivation) + " decaying by " + string(mEmotionSubController.HappyDecayRate) + "ps",Column1WidthSurface)
TextY += 20
DebugMakeColumnBar(mEmotionSubController.HappyActivation,100,1)
TextY += 40

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour, 0.7, fa_left,fa_center,"Sadnes{: " + string(mEmotionSubController.SadActivation) +  " decaying by " + string(mEmotionSubController.SadDecayRate) + "ps",Column1WidthSurface)
TextY += 20
DebugMakeColumnBar(mEmotionSubController.SadActivation,100,1)
TextY += 40

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour, 0.7, fa_left,fa_center,"Anger: "  + string(mEmotionSubController.AngerActivation) + " decaying by" + string(mEmotionSubController.AngerDecayRate) + "ps",Column1WidthSurface)
TextY += 20
DebugMakeColumnBar(mEmotionSubController.AngerActivation,100,1)
TextY += 40

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour, 0.7, fa_left,fa_center,"Surpri{e: " + string(mEmotionSubController.SurpriseActivation) + " decaying by " + string(mEmotionSubController.SurpriseDecayRate) + "ps",Column1WidthSurface)
TextY += 20
DebugMakeColumnBar(mEmotionSubController.SurpriseActivation,100,1)
TextY += 40

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour, 0.7, fa_left,fa_center,"Fear: " + string(mEmotionSubController.FearActivation) + " decaying by " + string(mEmotionSubController.FearDecayRate) + "ps",Column1WidthSurface)
TextY += 20
DebugMakeColumnBar(mEmotionSubController.FearActivation,100,1)
TextY += 40

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour, 0.7, fa_left,fa_center,"Shame: " + string(mEmotionSubController.ShameActivation) + " decaying by " + string(mEmotionSubController.ShameDecayRate) + "ps",Column1WidthSurface)
TextY += 20
DebugMakeColumnBar(mEmotionSubController.ShameActivation,100,1)
TextY += 60

//Input Section
DrawTextRelativeDebugSurface(fDebugTitle, DebugBlackTextColour, 0.7, fa_left,fa_center,"I N P U T",Column1WidthSurface)
TextY += 25
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + (Column1WidthSurface),TextY - DebugScrollOffset())
TextY += 25

if mInterfaceController.HandWet = true {
DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour, 0.7, fa_left,fa_center,"Liquid On Hand: " + mInterfaceController.HandWetType,Column1WidthSurface)
} else {
DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour, 0.7, fa_left,fa_center,"Liquid On Hand: " + "none",Column1WidthSurface)
}

//Senses Section
TextY += 40
if mCreatureController.MotionDetected1 = true {
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugRedTextColour, 0.7, fa_left,fa_center,"(x)   Motion detected 1!",Column2WidthSurface)
} else if mCreatureController.MotionDetected1 = false {
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugBlackTextColour, 0.7, fa_left,fa_center,"( )   No motion detected 1.",Column2WidthSurface)
}
TextY += 30
if mCreatureController.MotionDetected2 = true {
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugRedTextColour, 0.7, fa_left,fa_center,"(x)   Motion detected 2!",Column2WidthSurface)
} else if mCreatureController.MotionDetected2 = false {
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugBlackTextColour, 0.7, fa_left,fa_center,"( )   No motion detected 2.",Column2WidthSurface)
}
TextY += 30
if mCreatureController.Faces = "0" {
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugRedTextColour, 0.7, fa_left,fa_center,"( )   No face{ detected.",Column2WidthSurface)
} else if mCreatureController.Faces = "!" {
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugBlackTextColour, 0.7, fa_left,fa_center,"(!)   More than one face detected.",Column2WidthSurface)
} else if mCreatureController.Faces = "1" {
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugBlackTextColour, 0.7, fa_left,fa_center,"(x)   One face detected.",Column2WidthSurface)
}
TextY += 50
DrawTextRelativeDebugSurface(fDebugStats,DebugRedTextColour, 0.7, fa_left,fa_center,"Latest Speech Result",Column2WidthSurface)
TextY += 10
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + string_width("Latest Speech Result"),TextY - DebugScrollOffset())
TextY += 20
DrawTextRelativeDebugSurface(fDebugStats,DebugRedTextColour, 0.7, fa_left,fa_center,"'"+string(global.LatestRecognisedPhrase)+"'",Column2WidthSurface)
TextY += 50
DrawTextRelativeDebugSurface(fDebugStats,DebugRedTextColour, 0.7, fa_left,fa_center,"Current Alembick Brew",Column2WidthSurface)
TextY += 10
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + string_width("Current AlembickBrew"),TextY - DebugScrollOffset())
TextY += 20
CurrentBrew()
TextY += 30
DrawTextRelativeDebugSurface(fDebugStats,DebugRedTextColour, 0.7, fa_left,fa_center,"Liquid Level: " + string(oCaulLiquid.LiquidY) + " of 73",Column2WidthSurface)
TextY += 20
DrawTextRelativeDebugSurface(fDebugStats,DebugRedTextColour, 0.7, fa_left,fa_center,"Weight In Bowl: " + string(mCreatureController.PewterWeight) + " of 73",Column2WidthSurface)
TextY += 40

//Gestures &amp; Input

Gesture()

//Emotion Recognition

TextY += 50

EmotionBox()

BottomOfColumn1 = TextY



//-------------------------------Column 2

TextX = 440
TextY = 10

//Sound Section

DrawTextRelativeDebugSurface(fDebugTitle, DebugBlackTextColour, 0.7, fa_left,fa_center,"S  O  U  N  D  S",Column2WidthSurface)
TextY += 25
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + (Column2WidthSurface),TextY - DebugScrollOffset())
TextY += 35
if EavesdropRunningString = "true" {
DrawTextRelativeDebugSurface(fDebugStats, DebugRedTextColour, 0.7,fa_left,fa_center,"(x)   Eavesdrop running.", Column2WidthSurface)
} else if EavesdropRunningString = "false" {
DrawTextRelativeDebugSurface(fDebugStats, DebugBlackTextColour, 0.7,fa_left,fa_center,"( )   Eavesdrop not found.", Column2WidthSurface)
}
TextY+= 45

DrawTextRelativeDebugSurface(fDebugStats,DebugRedTextColour, 0.7, fa_left,fa_center,"Raw Mic Volume: " + string(mWorldController.LatestMicVolume),Column2WidthSurface)
TextY += 35

RecorderInfo = audio_get_recorder_info(mWorldController.CurrentMic)
MicInfo = ds_map_find_value(RecorderInfo, "name")


DrawTextRelativeDebugSurface(fDebugStats,DebugRedTextColour, 0.7, fa_left,fa_center,"Current Mic: " + string(MicInfo), Column2WidthSurface)
TextY += 35
DrawTextRelativeDebugSurface(fDebugStats,DebugRedTextColour, 0.7, fa_left,fa_center,"Press Left Arrow To Cycle Active Mic{",Column2WidthSurface)

TextY += 60

//Weather Section
DrawTextRelativeDebugSurface(fDebugTitle, DebugBlackTextColour, 0.7, fa_left,fa_center,"L  A  N  D  S  K  I  P",Column2WidthSurface)
TextY += 25
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + (Column2WidthSurface),TextY - DebugScrollOffset())
TextY += 25
DrawTextRelativeDebugSurface(fDebugStats,DebugRedTextColour, 0.7, fa_left,fa_center,"Current Weather",Column2WidthSurface)
TextY += 20
DrawTextRelativeDebugSurface(fDebugWords,DebugBlackTextColour,0.7,fa_left,fa_center,string(round(mWorldController.CurrentWindS)) + "mph wind{, " + string(round(mWorldController.CurrentTemp)) + "C, " + string(round(mWorldController.CurrentHumidity)) + " percent humidity, " + ConvertWeatherTypeToHumanReadable(mWorldController.ThisPeriodWT) + ".",Column2WidthSurface)
draw_set_alpha(0.7)
draw_sprite_ext(sDebugWeathervane,0,TextX + Column2WidthSurface - 25,TextY - DebugScrollOffset(),0.3,0.3,mWorldController.CurrentWindD,c_white,0.7)
DrawCircleWidth(TextX + Column2WidthSurface - 25,TextY - DebugScrollOffset(),25,3,32)

TextY += 40

DrawTextRelativeDebugSurface(fDebugStats,DebugRedTextColour, 0.7, fa_left,fa_center,"Next Weather",Column2WidthSurface)
TextY += 20
DrawTextRelativeDebugSurface(fDebugWords,DebugBlackTextColour, 0.7,fa_left,fa_center,string(round(mWorldController.NextPeriodWindS)) + "mph wind{, " + string(round(mWorldController.NextPeriodTemp)) + "C, " + string(round(mWorldController.NextPeriodHumidity)) + " percent humidity, " + ConvertWeatherTypeToHumanReadable(mWorldController.NextPeriodWT) + ".",Column2WidthSurface)
draw_set_alpha(0.7)
draw_sprite_ext(sDebugWeathervane,0,TextX + Column2WidthSurface - 25,TextY - DebugScrollOffset(),0.3,0.3,mWorldController.NextPeriodWindD,c_white,0.7)
DrawCircleWidth(TextX + Column2WidthSurface - 25, TextY - DebugScrollOffset(),25,3,32)

TextY += 40

DrawTextRelativeDebugSurface(fDebugStats,DebugRedTextColour, 0.7,fa_left,fa_center,"Progre{{ To Next Weather Update",Column2WidthSurface)
TextY += 20
DebugMakeColumnBar(mWorldController.MinsSinceChange,180,2)

TextY += 310

draw_sprite_ext(sDebugSunDial,1,TextX + (Column2WidthSurface / 2),TextY - DebugScrollOffset(),0.6,0.6,0,c_white,0.7)

if instance_exists(mMoon) {
draw_sprite_ext(CurrentMoonPhaseSprite,1,
(TextX + (Column2WidthSurface / 2)) + lengthdir_x(220,mWorldController.TonightsMoon.Direction),
(TextY - DebugScrollOffset()) + lengthdir_y(220,mWorldController.TonightsMoon.Direction),
0.4,
0.4,
0,
c_white,
0.7
)
}

if instance_exists(mSun) {

draw_sprite_ext(sDebugSun,1,
(TextX + (Column2WidthSurface / 2)) + lengthdir_x(200,mWorldController.TodaysSun.CurrentDirection),
(TextY - DebugScrollOffset()) + lengthdir_y(200,mWorldController.TodaysSun.CurrentDirection),
0.2,
0.2,
0,
mWorldController.TodaysSun.CurrentSunColour,
0.7
)
}

TextY += 60


if instance_exists(mMoon) {
if instance_exists(mSun) = false {
DrawTextRelativeDebugSurface(fDebugStats, DebugBlackTextColour, 0.7, fa_left, fa_center, "Current EnviroLight Alpha: " + string(mWorldController.CurrentEnviroLightAlpha),Column2WidthSurface) 
TextY += 20
}
DrawTextRelativeDebugSurface(fDebugStats, DebugBlackTextColour, 0.7, fa_left, fa_center, "Current Moon Direction: " + string(mWorldController.TonightsMoon.Direction),Column2WidthSurface) 

TextY += 40
}


if instance_exists(mSun) {
DrawTextRelativeDebugSurface(fDebugStats, DebugBlackTextColour, 0.7, fa_left, fa_center, "Current EnviroLight Alpha: " + string(mWorldController.CurrentEnviroLightAlpha),Column2WidthSurface) 
TextY += 20
DrawTextRelativeDebugSurface(fDebugStats, DebugBlackTextColour, 0.7, fa_left, fa_center,"Current Sun R: " + string(mWorldController.TodaysSun.CurrentR),Column2WidthSurface)
TextY += 20
DrawTextRelativeDebugSurface(fDebugStats, DebugBlackTextColour, 0.7, fa_left, fa_center,"Current Sun G: " + string(mWorldController.TodaysSun.CurrentG),Column2WidthSurface)
TextY += 20
DrawTextRelativeDebugSurface(fDebugStats, DebugBlackTextColour, 0.7, fa_left, fa_center,"Current Sun B: " + string(mWorldController.TodaysSun.CurrentB),Column2WidthSurface)
TextY += 20
DrawTextRelativeDebugSurface(fDebugStats, DebugBlackTextColour, 0.7, fa_left, fa_center,"Current Sun Direction: " + string(mWorldController.TodaysSun.CurrentDirection),Column2WidthSurface)
TextY += 20
DrawTextRelativeDebugSurface(fDebugStats, DebugBlackTextColour, 0.7, fa_left, fa_center,"Current Sun Minute: " + string(mWorldController.CurrentSunMinute) + " of " + string(mWorldController.TodayLength),Column2WidthSurface)
TextY += 40
}


DrawTextRelativeDebugSurface(fDebugStatsBig, DebugRedTextColour, 0.7, fa_left, fa_center, "Today'{ Sunrise: " + string(mWorldController.TodaySunriseHour) + ":" + string(mWorldController.TempSunriseMinuteVar),Column2WidthSurface)
TextY += 25
DrawTextRelativeDebugSurface(fDebugStatsBig, DebugRedTextColour, 0.7, fa_left, fa_center, "Today'{ Sunset: " + string(mWorldController.TodaySunsetHour) + ":" + string(mWorldController.TempSunsetMinuteVar),Column2WidthSurface)
TextY += 25
DrawTextRelativeDebugSurface(fDebugStatsBig, DebugRedTextColour, 0.7, fa_left, fa_center, "Today'{ Length In Minute{: " + string(mWorldController.TodayLength),Column2WidthSurface)
TextY += 25
DrawTextRelativeDebugSurface(fDebugStatsBig, DebugRedTextColour, 0.7, fa_left, fa_center, "Tonight'{ Moon Phase: " + mWorldController.TonightMoonPhase,Column2WidthSurface)
TextY += 60
DrawTextRelativeDebugSurface(fDebugStats, DebugBlackTextColour, 0.8, fa_left, fa_center, "N.B. twilight start{ half an hour before sunri{e, and last{ for half an hour after sun{et.", Column2WidthSurface)
TextY += 40
DrawTextRelativeDebugSurface(fDebugStats, DebugRedTextColour, 0.7, fa_left, fa_center, 
"Thi{ Morning: Between " + string(mWorldController.ThisMorningTwilightStartHour) + ":" + mWorldController.TWMornStartMinString + " and " 
+ string(mWorldController.ThisMorningTwilightEndHour) + ":" + mWorldController.TWMornEndMinString
,Column2WidthSurface)
TextY += 20
DrawTextRelativeDebugSurface(fDebugStats, DebugRedTextColour, 0.7, fa_left, fa_center, 
"Thi{ Evening: Between " + string(mWorldController.ThisEveningTwilightStartHour) + ":" + mWorldController.TWEveStartMinString + " and " 
+ string(mWorldController.ThisEveningTwilightEndHour) + ":" + mWorldController.TWEveEndMinString
,Column2WidthSurface)
TextY += 40

if mWorldController.MorningTwilightInProgress = true {
DrawTextRelativeDebugSurface(fDebugStatsBig, DebugRedTextColour, 0.7, fa_left, fa_center, "Morning Twilight I{ In Progres{.",Column2WidthSurface)
TextY += 40
DrawTextRelativeDebugSurface(fDebugStats, DebugBlackTextColour, 0.7, fa_left, fa_center, "Current Twilight Minute: " + string(mWorldController.CurrentTwilightMinute),Column2WidthSurface)
}
if mWorldController.EveningTwilightInProgress = true {
DrawTextRelativeDebugSurface(fDebugStatsBig, DebugRedTextColour, 0.7, fa_left, fa_center, "Evening Twilight I{ In Progres{.",Column2WidthSurface)
TextY += 40
DrawTextRelativeDebugSurface(fDebugStats, DebugBlackTextColour, 0.7, fa_left, fa_center, "Current Twilight Minute: " + string(mWorldController.CurrentTwilightMinute),Column2WidthSurface)
}
TextY += 20
DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour,0.7,fa_left,fa_center,"Current Light Level In Creature Realm: " + string(round(100 - (mWorldController.LightLevelInMB * 100))) + " percent",Column2WidthSurface)
TextY += 20
DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour,0.7,fa_left,fa_center,"Current Light Level In Installation: " + string(round(mWorldController.LightLevelInRL)) + " percent",Column2WidthSurface)

//Input (Cont.) Section

TextY += 50
DrawTextRelativeDebugSurface(fDebugTitle, DebugBlackTextColour, 0.7, fa_left,fa_center,"I N P U T  ( C O N T . )",Column2WidthSurface)
TextY += 25
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + (Column2WidthSurface),TextY - DebugScrollOffset())
TextY += 60
ColourBox1()
TextY += 105
ColourBox2()
TextY += 125
ImageBox1()
TextY += 205
ImageBox2()
TextY += 205
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugBlackTextColour,0.7,fa_left,fa_center,"Touching Favoured Place? " + string(mCreatureController.TouchingFavouredPlace),Column2WidthSurface)
TextY += 30
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugBlackTextColour,0.7,fa_left,fa_center,"Touching Unfavoured Place? " + string(mCreatureController.TouchingUnfavouredPlace),Column2WidthSurface)
TextY += 55

//------------------- DRIVES
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugRedTextColour,0.7,fa_left,fa_center,"Drives",Column2WidthSurface)
TextY += 10
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + string_width("Drives"),TextY - DebugScrollOffset())
TextY += 35

DrawTextRelativeDebugSurface(fDebugStatsBig,DebugBlackTextColour,0.7,fa_left,fa_center,"CURRENT DRIVE: " + string(mDriveCollectionMaster.CurrentDrive),Column2WidthSurface)
TextY += 30
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugBlackTextColour,0.7,fa_left,fa_center,"PREVIOUS DRIVE: " + string(mDriveCollectionMaster.PreviousDrive),Column2WidthSurface)
TextY += 30
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugBlackTextColour,0.7,fa_left,fa_center,"TIME UNTIL DRIVE UPDATE: " + string(mDriveCollectionMaster.alarm[1]),Column2WidthSurface)
TextY += 30
DrawTextRelativeDebugSurface(fDebugStatsBig,DebugBlackTextColour,0.7,fa_left,fa_center,"CURRENT RETRIES: " + string(mDriveCollectionMaster.CurrentRetries),Column2WidthSurface)
TextY += 50


if mDriveCollectionMaster.Drive1FinalPriority &lt; -100 {
Drive1String = "Too Low"
} else {
Drive1String = string(mDriveCollectionMaster.Drive1FinalPriority)
} 

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour,0.7,fa_left,fa_center,"Drive: " + mDriveCollectionMaster.Drive1Name + " with Priority: " + Drive1String,Column2WidthSurface)
TextY += 15
draw_set_colour(DebugRedTextColour)
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + Column2WidthSurface,TextY - DebugScrollOffset())
draw_set_colour(DebugBlackTextColour)
TextY += 30
//--------------------------------------------------

if mDriveCollectionMaster.Drive2FinalPriority &lt; -100 {
Drive2String = "Too Low"
} else {
Drive2String = string(mDriveCollectionMaster.Drive2FinalPriority)
} 

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour,0.7,fa_left,fa_center,"Drive: " + mDriveCollectionMaster.Drive2Name + " with Priority " + Drive2String,Column2WidthSurface)
TextY += 15
draw_set_colour(DebugRedTextColour)
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + Column2WidthSurface,TextY - DebugScrollOffset())
draw_set_colour(DebugBlackTextColour)
TextY += 30
//--------------------------------------------------

if mDriveCollectionMaster.Drive3FinalPriority &lt; -100 {
Drive3String = "Too Low"
} else {
Drive3String = string(mDriveCollectionMaster.Drive3FinalPriority)
} 

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour,0.7,fa_left,fa_center,"Drive: " + mDriveCollectionMaster.Drive3Name + " with Priority " + Drive3String,Column2WidthSurface)
TextY += 15
draw_set_colour(DebugRedTextColour)
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + Column2WidthSurface,TextY - DebugScrollOffset())
draw_set_colour(DebugBlackTextColour)
TextY += 30
//--------------------------------------------------

if mDriveCollectionMaster.Drive4FinalPriority &lt; -100 {
Drive4String = "Too Low"
} else {
Drive4String = string(mDriveCollectionMaster.Drive4FinalPriority)
} 

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour,0.7,fa_left,fa_center,"Drive: " + mDriveCollectionMaster.Drive4Name + " with Priority " + Drive4String,Column2WidthSurface)
TextY += 15
draw_set_colour(DebugRedTextColour)
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + Column2WidthSurface,TextY - DebugScrollOffset())
draw_set_colour(DebugBlackTextColour)
TextY += 30
//--------------------------------------------------

if mDriveCollectionMaster.Drive5FinalPriority &lt; -100 {
Drive5String = "Too Low"
} else {
Drive5String = string(mDriveCollectionMaster.Drive5FinalPriority)
} 

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour,0.7,fa_left,fa_center,"Drive: " + mDriveCollectionMaster.Drive5Name + " with Priority " + Drive5String,Column2WidthSurface)
TextY += 15
draw_set_colour(DebugRedTextColour)
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + Column2WidthSurface,TextY - DebugScrollOffset())
draw_set_colour(DebugBlackTextColour)
TextY += 30
//--------------------------------------------------

if mDriveCollectionMaster.Drive6FinalPriority &lt; -100 {
Drive6String = "Too Low"
} else {
Drive6String = string(mDriveCollectionMaster.Drive6FinalPriority)
} 

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour,0.7,fa_left,fa_center,"Drive: " + mDriveCollectionMaster.Drive6Name + " with Priority " + Drive6String,Column2WidthSurface)
TextY += 15
draw_set_colour(DebugRedTextColour)
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + Column2WidthSurface,TextY - DebugScrollOffset())
draw_set_colour(DebugBlackTextColour)
TextY += 30
//--------------------------------------------------

if mDriveCollectionMaster.Drive7FinalPriority &lt; -100 {
Drive7String = "Too Low"
} else {
Drive7String = string(mDriveCollectionMaster.Drive7FinalPriority)
} 

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour,0.7,fa_left,fa_center,"Drive: " + mDriveCollectionMaster.Drive7Name + " with Priority " + Drive7String,Column2WidthSurface)
TextY += 15
draw_set_colour(DebugRedTextColour)
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + Column2WidthSurface,TextY - DebugScrollOffset())
draw_set_colour(DebugBlackTextColour)
TextY += 30
//--------------------------------------------------

if mDriveCollectionMaster.Drive8FinalPriority &lt; -100 {
Drive8String = "Too Low"
} else {
Drive8String = string(mDriveCollectionMaster.Drive8FinalPriority)
} 

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour,0.7,fa_left,fa_center,"Drive: " + mDriveCollectionMaster.Drive8Name + " with Priority " + Drive8String,Column2WidthSurface)
TextY += 15
draw_set_colour(DebugRedTextColour)
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + Column2WidthSurface,TextY - DebugScrollOffset())
draw_set_colour(DebugBlackTextColour)
TextY += 30

//--------------------------------------------------

if mDriveCollectionMaster.Drive10FinalPriority &lt; -100 {
Drive10String = "Too Low"
} else {
Drive10String = string(mDriveCollectionMaster.Drive10FinalPriority)
} 

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour,0.7,fa_left,fa_center,"Drive: " + mDriveCollectionMaster.Drive10Name + " with Priority " + Drive10String,Column2WidthSurface)
TextY += 15
draw_set_colour(DebugRedTextColour)
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + Column2WidthSurface,TextY - DebugScrollOffset())
draw_set_colour(DebugBlackTextColour)
TextY += 30
//--------------------------------------------------

if mDriveCollectionMaster.Drive12FinalPriority &lt; -100 {
Drive12String = "Too Low"
} else {
Drive12String = string(mDriveCollectionMaster.Drive12FinalPriority)
} 

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour,0.7,fa_left,fa_center,"Drive: " + mDriveCollectionMaster.Drive12Name + " with Priority " + Drive12String,Column2WidthSurface)
TextY += 15
draw_set_colour(DebugRedTextColour)
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + Column2WidthSurface,TextY - DebugScrollOffset())
draw_set_colour(DebugBlackTextColour)
TextY += 30
//--------------------------------------------------

if mDriveCollectionMaster.Drive13FinalPriority &lt; -100 {
Drive13String = "Too Low"
} else {
Drive13String = string(mDriveCollectionMaster.Drive13FinalPriority)
} 

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour,0.7,fa_left,fa_center,"Drive: " + mDriveCollectionMaster.Drive13Name + " with Priority " + Drive13String,Column2WidthSurface)
TextY += 14
draw_set_colour(DebugRedTextColour)
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + Column2WidthSurface,TextY - DebugScrollOffset())
draw_set_colour(DebugBlackTextColour)
TextY += 30
//--------------------------------------------------

if mDriveCollectionMaster.Drive15FinalPriority &lt; -100 {
Drive15String = "Too Low"
} else {
Drive15String = string(mDriveCollectionMaster.Drive15FinalPriority)
} 

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour,0.7,fa_left,fa_center,"Drive: " + mDriveCollectionMaster.Drive15Name + " with Priority " + Drive15String,Column2WidthSurface)
TextY += 15
draw_set_colour(DebugRedTextColour)
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + Column2WidthSurface,TextY - DebugScrollOffset())
draw_set_colour(DebugBlackTextColour)
TextY += 30
//--------------------------------------------------

if mDriveCollectionMaster.Drive16FinalPriority &lt; -100 {
Drive16String = "Too Low"
} else {
Drive16String = string(mDriveCollectionMaster.Drive16FinalPriority)
} 

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour,0.7,fa_left,fa_center,"Drive: " + mDriveCollectionMaster.Drive16Name + " with Priority " + Drive16String,Column2WidthSurface)
TextY += 15
draw_set_colour(DebugRedTextColour)
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + Column2WidthSurface,TextY - DebugScrollOffset())
draw_set_colour(DebugBlackTextColour)
TextY += 30
//--------------------------------------------------

if mDriveCollectionMaster.Drive17FinalPriority &lt; -100 {
Drive17String = "Too Low"
} else {
Drive17String = string(mDriveCollectionMaster.Drive17FinalPriority)
} 

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour,0.7,fa_left,fa_center,"Drive: " + mDriveCollectionMaster.Drive17Name + " with Priority " + Drive17String,Column2WidthSurface)
TextY += 15
draw_set_colour(DebugRedTextColour)
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + Column2WidthSurface,TextY - DebugScrollOffset())
draw_set_colour(DebugBlackTextColour)
TextY += 30
//--------------------------------------------------

if mDriveCollectionMaster.Drive18FinalPriority &lt; -100 {
Drive18String = "Too Low"
} else {
Drive18String = string(mDriveCollectionMaster.Drive18FinalPriority)
} 

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour,0.7,fa_left,fa_center,"Drive: " + mDriveCollectionMaster.Drive18Name + " with Priority " + Drive18String,Column2WidthSurface)
TextY += 15
draw_set_colour(DebugRedTextColour)
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + Column2WidthSurface,TextY - DebugScrollOffset())
draw_set_colour(DebugBlackTextColour)
TextY += 30

//--------------------------------------------------

if mDriveCollectionMaster.Drive21FinalPriority &lt; -100 {
Drive21String = "Too Low"
} else {
Drive21String = string(mDriveCollectionMaster.Drive21FinalPriority)
} 

DrawTextRelativeDebugSurface(fDebugStats,DebugBlackTextColour,0.7,fa_left,fa_center,"Drive: " + mDriveCollectionMaster.Drive21Name + " with Priority " + Drive21String,Column2WidthSurface)
TextY += 15
draw_set_colour(DebugRedTextColour)
draw_set_alpha(0.7)
draw_line(TextX,TextY - DebugScrollOffset(),TextX + Column2WidthSurface,TextY - DebugScrollOffset())
draw_set_colour(DebugBlackTextColour)
TextY += 30
//--------------------------------------------------


draw_set_alpha(1)
//Finally, Drawing Buttons

//-----------------------------------------------------------------------------------------------------------

draw_sprite_ext(sDebugButton2,1,mDebugStopFlickerButton.RelativeX,mDebugStopFlickerButton.RelativeY - 250 - DebugScrollOffset(),0.35,0.13,0,mDebugStopFlickerButton.ImageBlend,mDebugStopFlickerButton.ImageAlpha)
draw_set_font(fDebugButton)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
if mWorldController.FlickerActive = false {
draw_set_colour(DebugBlackTextColour)
} else if mWorldController.FlickerActive  = true {
draw_set_colour(DebugRedTextColour)
}
FlickerButtonTextX = mDebugStopFlickerButton.RelativeX + (mDebugStopFlickerButton.sprite_width / 2) + 10
FlickerButtonTextY = mDebugStopFlickerButton.RelativeY - 250 - DebugScrollOffset()
draw_text(FlickerButtonTextX,FlickerButtonTextY,mDebugStopFlickerButton.Text)

if ClickableButton(
FlickerButtonTextX - (mDebugStopFlickerButton.sprite_width / 2),
FlickerButtonTextY - (mDebugStopFlickerButton.sprite_height / 2),
FlickerButtonTextX + (mDebugStopFlickerButton.sprite_width / 2),
FlickerButtonTextY + (mDebugStopFlickerButton.sprite_height / 2)
)
{
with mDebugStopFlickerButton {
if mWorldController.FlickerActive = true {
ImageBlend = c_white
Text = "Light Flicker Off"
mWorldController.FlickerActive = false 
} else if mWorldController.FlickerActive = false {
ImageBlend = DebugRedTextColour
mWorldController.FlickerActive = true
Text = "Light Flicker Active"
}
}
}


//-----------------------------------------------------------------------------------------------------------

draw_sprite_ext(sDebugButton2,1,0,mDebugNoViewportFilterButton.RelativeY - 250 - DebugScrollOffset(),0.35,0.13,0,mDebugNoViewportFilterButton.ImageBlend,mDebugNoViewportFilterButton.ImageAlpha)
draw_set_font(fDebugButton)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
if mWorldController.FilterOn = false {
draw_set_colour(DebugBlackTextColour)
} else if mWorldController.FilterOn = true {
draw_set_colour(DebugRedTextColour)
}
FilterButtonTextX = 0 + (mDebugNoViewportFilterButton.sprite_width / 2) + 10
FilterButtonTextY = mDebugNoViewportFilterButton.RelativeY - 250 - DebugScrollOffset()
draw_text(FilterButtonTextX,FilterButtonTextY,mDebugNoViewportFilterButton.Text)

if ClickableButton(
FilterButtonTextX - (mDebugNoViewportFilterButton.sprite_width / 2),
FilterButtonTextY - (mDebugNoViewportFilterButton.sprite_height / 2),
FilterButtonTextX + (mDebugNoViewportFilterButton.sprite_width / 2),
FilterButtonTextY + (mDebugNoViewportFilterButton.sprite_height / 2)
)
{
with mDebugNoViewportFilterButton {
if mWorldController.FilterOn = true {
ImageBlend = c_white
Text = "Viewport Filter Off"
mWorldController.FilterOn = false
} else if mWorldController.FilterOn = false {
ImageBlend = DebugRedTextColour
Text = "Viewport Filter On"
mWorldController.FilterOn = true
}
}
}

//-----------------------------------------------------------------------------------------------------------

draw_sprite_ext(sDebugButton2,1,0,mDebugLogButton.RelativeY - 250 - DebugScrollOffset(),mDebugLogButton.RelativeXScale,mDebugLogButton.RelativeYScale,0,mDebugLogButton.ImageBlend,mDebugLogButton.ImageAlpha)
draw_set_font(fDebugButton)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
if mWorldController.EventLogActive = false {
draw_set_colour(DebugBlackTextColour)
} else if mWorldController.EventLogActive = true {
draw_set_colour(DebugRedTextColour)
}

LogTogButtonTextX = 0 + (mDebugLogButton.sprite_width / 2) + 5
LogTogButtonTextY = mDebugLogButton.RelativeY - 250 - DebugScrollOffset()

draw_text(LogTogButtonTextX,LogTogButtonTextY,mDebugLogButton.Text)

if ClickableButton(
LogTogButtonTextX - (mDebugLogButton.sprite_width / 2),
LogTogButtonTextY - (mDebugLogButton.sprite_height / 2),
LogTogButtonTextX + (mDebugLogButton.sprite_width / 2),
LogTogButtonTextY + (mDebugLogButton.sprite_height / 2)
)
{
with mDebugLogButton {
if mWorldController.EventLogActive = false {
mWorldController.EventLogActive = true
if file_exists("eventlog.txt") = false {
EventLog = file_text_open_write("eventlog.txt")
file_text_close(EventLog)
}
} else if mWorldController.EventLogActive = true {
mWorldController.EventLogActive = false
}
}
}

//-----------------------------------------------------------------------------------------------------------

draw_sprite_ext(sDebugButton2,1,mDebugWipeLogButton.RelativeX,mDebugWipeLogButton.RelativeY - 250 - DebugScrollOffset(),mDebugWipeLogButton.RelativeXScale,mDebugWipeLogButton.RelativeYScale,0,mDebugWipeLogButton.ImageBlend,mDebugWipeLogButton.ImageAlpha)
draw_set_font(fDebugButton)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
if mDebugWipeLogButton.Countdown = false {
draw_set_colour(DebugBlackTextColour)
} else if mDebugWipeLogButton.Countdown = true {
draw_set_colour(DebugRedTextColour)
}
LogButtonTextX = mDebugWipeLogButton.RelativeX + (mDebugWipeLogButton.sprite_width / 2) + 5
LogButtonTextY = mDebugWipeLogButton.RelativeY - 250 - DebugScrollOffset()
draw_text(LogButtonTextX,LogButtonTextY,mDebugWipeLogButton.Text)



if ClickableButton(
LogButtonTextX - (mDebugWipeLogButton.sprite_width / 2),
LogButtonTextY - (mDebugWipeLogButton.sprite_height / 2),
LogButtonTextX + (mDebugWipeLogButton.sprite_width / 2),
LogButtonTextY + (mDebugWipeLogButton.sprite_height / 2)
)
{
with mDebugWipeLogButton {
EventLog = file_text_open_write("eventlog.txt")
file_text_close(EventLog)
TimeToDisplay = 120
Countdown = true
}
}


//-----------------------------------------------------------------------------------------------------------

draw_sprite_ext(sDebugButton2,1,mDebugObjectLightButton.RelativeX,mDebugObjectLightButton.RelativeY - 250 - DebugScrollOffset(),mDebugObjectLightButton.RelativeXScale,mDebugObjectLightButton.RelativeYScale,0,mDebugObjectLightButton.ImageBlend,mDebugObjectLightButton.ImageAlpha)
draw_set_font(fDebugButton)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
if mWorldController.ObjectLightingOn = false {
draw_set_colour(DebugBlackTextColour)
} else if mWorldController.ObjectLightingOn = true {
draw_set_colour(DebugRedTextColour)
}

ObLightButtonTextX = mDebugObjectLightButton.RelativeX + (mDebugObjectLightButton.sprite_width / 2) + 5
ObLightButtonTextY = mDebugObjectLightButton.RelativeY - 250 - DebugScrollOffset()

draw_text(ObLightButtonTextX,ObLightButtonTextY,mDebugObjectLightButton.Text)


if ClickableButton(
ObLightButtonTextX - (mDebugObjectLightButton.sprite_width / 2),
ObLightButtonTextY - (mDebugObjectLightButton.sprite_height / 2),
ObLightButtonTextX + (mDebugObjectLightButton.sprite_width / 2),
ObLightButtonTextY + (mDebugObjectLightButton.sprite_height / 2)
)
{
with mDebugObjectLightButton {
switch mWorldController.ObjectLightingOn {
case true:
mWorldController.ObjectLightingOn = false;
ImageBlend = c_white;
Text = "Object Lighting Off";
break;
case false:
mWorldController.ObjectLightingOn = true;
Text = "Object Lighting On";
ImageBlend = DebugRedTextColour;
break;
}
}
}

//-----------------------------------------------------------------------------------------------------------

draw_sprite_ext(sDebugButton2,1,0,mWeatherToggleButton.RelativeY - 250 - DebugScrollOffset(),mWeatherToggleButton.RelativeXScale,mWeatherToggleButton.RelativeYScale,0,mWeatherToggleButton.ImageBlend,mWeatherToggleButton.ImageAlpha)
draw_set_font(fDebugButton)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
if mWeatherSubController.WeatherOn = false {
draw_set_colour(DebugBlackTextColour)
} else if mWeatherSubController.WeatherOn = true {
draw_set_colour(DebugRedTextColour)
}

WeatherTogButtonTextX = 0 + (mWeatherToggleButton.sprite_width / 2) + 5
WeatherTogButtonTextY = mWeatherToggleButton.RelativeY - 250 - DebugScrollOffset()

draw_text(WeatherTogButtonTextX,WeatherTogButtonTextY,mWeatherToggleButton.Text)

if ClickableButton(
WeatherTogButtonTextX - (mWeatherToggleButton.sprite_width / 2),
WeatherTogButtonTextY - (mWeatherToggleButton.sprite_height / 2),
WeatherTogButtonTextX + (mWeatherToggleButton.sprite_width / 2),
WeatherTogButtonTextY + (mWeatherToggleButton.sprite_height / 2)
)
{
with mWeatherToggleButton {
switch mWeatherSubController.WeatherOn {
case true:
mWeatherSubController.WeatherOn = false;
ImageBlend = c_white;
Text = "Weather Off";
ex_audio_class_pause("weathers")
break;
case false:
mWeatherSubController.WeatherOn = true;
Text = "Weather On";
ImageBlend = DebugRedTextColour;
ex_audio_class_resume("weathers")
break;
}
}
}

//-----------------------------------------------------------------------------------------------------------

draw_sprite_ext(sDebugButton2,1,mDebugPrintConceptsButton.RelativeX,mDebugPrintConceptsButton.RelativeY - 250 - DebugScrollOffset(),mDebugPrintConceptsButton.RelativeXScale,mDebugPrintConceptsButton.RelativeYScale,0,mDebugPrintConceptsButton.ImageBlend,mDebugPrintConceptsButton.ImageAlpha)
draw_set_font(fDebugButton)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
if mDebugPrintConceptsButton.RedTimer &gt; 0 {
draw_set_colour(DebugRedTextColour)
} else if mDebugPrintConceptsButton.RedTimer &lt;= 0 {
draw_set_colour(DebugBlackTextColour)
}

ConButtonTextX = mDebugPrintConceptsButton.RelativeX + (mDebugPrintConceptsButton.sprite_width / 2) + 5
ConButtonTextY = mDebugPrintConceptsButton.RelativeY - 250 - DebugScrollOffset()

draw_text(ConButtonTextX,ConButtonTextY,mDebugPrintConceptsButton.Text)

if ClickableButton(
ConButtonTextX - (mDebugPrintConceptsButton.sprite_width / 2),
ConButtonTextY - (mDebugPrintConceptsButton.sprite_height / 2),
ConButtonTextX + (mDebugPrintConceptsButton.sprite_width / 2),
ConButtonTextY + (mDebugPrintConceptsButton.sprite_height / 2)
)
{
with mDebugPrintConceptsButton {
if RedTimer &lt;= 0 
{
with mCreatureController{
WriteAllConceptGridsToTextFile()
}
RedTimer = 120
Text = "Writing... "
}
}
}

//-----------------------------------------------------------------------------------------------------------


draw_sprite_ext(sDebugButton2,1,mDebugTabooToggle.RelativeX,mDebugTabooToggle.RelativeY - 250 - DebugScrollOffset(),mDebugTabooToggle.RelativeXScale,mDebugTabooToggle.RelativeYScale,0,mDebugTabooToggle.ImageBlend,mDebugTabooToggle.ImageAlpha)
draw_set_font(fDebugButton)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
if mPlotController.TabooLayersActive = true {
draw_set_colour(DebugRedTextColour)
} else if mPlotController.TabooLayersActive = false {
draw_set_colour(DebugBlackTextColour)
}

TabButtonTextX = mDebugTabooToggle.RelativeX + (mDebugTabooToggle.sprite_width / 2) + 5
TabButtonTextY = mDebugTabooToggle.RelativeY - 250 - DebugScrollOffset()

draw_text(TabButtonTextX,TabButtonTextY,mDebugTabooToggle.Text)

if ClickableButton(
TabButtonTextX - (mDebugTabooToggle.sprite_width / 2),
TabButtonTextY - (mDebugTabooToggle.sprite_height / 2),
TabButtonTextX + (mDebugTabooToggle.sprite_width / 2),
TabButtonTextY + (mDebugTabooToggle.sprite_height / 2)
)
{
with mDebugTabooToggle {

switch mPlotController.TabooLayersActive {
case true:
ImageBlend = c_white
Text = "Taboo Layers Inactive"
mPlotController.TabooLayersActive = false
break;

case false:
ImageBlend = DebugRedTextColour
Text = "Taboo Layers Active"
mPlotController.TabooLayersActive = true
break;
}
}
}

//------------------------------------------------------------------------------------------------------------

draw_sprite_ext(sDebugButton2,1,0,mDebugEnviroLightButton.RelativeY - 250 - DebugScrollOffset(),0.35,0.13,0,mDebugEnviroLightButton.ImageBlend,mDebugEnviroLightButton.ImageAlpha)
draw_set_font(fDebugButton)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
if mEnviroLight.On = true {
draw_set_colour(DebugRedTextColour) 
} else if mEnviroLight.On = false {
draw_set_colour(DebugBlackTextColour)
}

EnvLightButtonTextX = 0 + (mDebugEnviroLightButton.sprite_width / 2) + 10
EnvLightButtonTextY = mDebugEnviroLightButton.RelativeY - 250 - DebugScrollOffset()

draw_text(EnvLightButtonTextX,EnvLightButtonTextY,mDebugEnviroLightButton.Text)


if ClickableButton(
EnvLightButtonTextX - (mDebugEnviroLightButton.sprite_width / 2),
EnvLightButtonTextY - (mDebugEnviroLightButton.sprite_height / 2),
EnvLightButtonTextX + (mDebugEnviroLightButton.sprite_width / 2),
EnvLightButtonTextY + (mDebugEnviroLightButton.sprite_height / 2)
)
{
with mDebugEnviroLightButton {
switch mEnviroLight.On {
case true:
mEnviroLight.On = false;
Text = "Environment Light Off"
ImageBlend = c_white
break;
case false:
mEnviroLight.On = true;
Text = "Environment Light On"
ImageBlend = DebugRedTextColour
break;
}
}
}

//-----------------------------------------------------------------------------------------------------------


draw_sprite_ext(sDebugButton2,1,mDebugFingerToggleButton.RelativeX,mDebugFingerToggleButton.RelativeY - 250 - DebugScrollOffset(),mDebugFingerToggleButton.RelativeXScale,mDebugFingerToggleButton.RelativeYScale,0,mDebugFingerToggleButton.ImageBlend,mDebugFingerToggleButton.ImageAlpha)
draw_set_font(fDebugButton)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
if mInterfaceController.FingerObjectVisible = true {
draw_set_colour(DebugRedTextColour)
} else if mInterfaceController.FingerObjectVisible = false {
draw_set_colour(DebugBlackTextColour)
}

FingerButtonTextX = mDebugFingerToggleButton.RelativeX + (mDebugFingerToggleButton.sprite_width / 2) + 5
FingerButtonTextY = mDebugFingerToggleButton.RelativeY - 250 - DebugScrollOffset()

draw_text(FingerButtonTextX,FingerButtonTextY,mDebugFingerToggleButton.Text)


if ClickableButton(
FingerButtonTextX - (mDebugFingerToggleButton.sprite_width / 2),
FingerButtonTextY - (mDebugFingerToggleButton.sprite_height / 2),
FingerButtonTextX + (mDebugFingerToggleButton.sprite_width / 2),
FingerButtonTextY + (mDebugFingerToggleButton.sprite_height / 2)
)
{
with mDebugFingerToggleButton {

switch mInterfaceController.FingerObjectVisible {
case true:
mInterfaceController.FingerObjectVisible = false;
ImageBlend = c_white;
Text = "Finger Pad Invisible";
ex_audio_class_pause("Weather_Sounds")
break;
case false:
mInterfaceController.FingerObjectVisible = true;
Text = "Finger Pad Visible";
ImageBlend = DebugRedTextColour;
break;
}
}
}

draw_enable_alphablend(true)
surface_reset_target()
draw_surface(ScrollSurface,100,410)

if mDebugScrollMarker.PercentageScrolled &lt; 90 {
draw_sprite_ext(sScrollMarker,0,540,410 + 1400,1,1,270,c_white,0.8)
}


BottomOfColumn2 = TextY
BottomOfDebugText = TextY + 500
FullLengthOfText = BottomOfDebugText - TopOfDebugText
DrawnText = true
}






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Don't Draw Sprite
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
