<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sFinger</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

depth = MetaLayer
x = ControllerObjectX
y = ControllerObjectY

/* Load Eavesdrop */
ExecuteShell("C:/Users/Rob/AppData/Roaming/masterbeast/eavesdrop/app/Knole Eavesdrop/bin/Release/Knole Eavesdrop.exe",false)

/* Load Controllers */

instance_create(x,y,mWorldController)
instance_create(x,y,mCreatureController)
instance_create(x,y,mPlotController)
instance_create(x,y,mInterfaceController)
instance_create(x,y,mWeatherSubController)
instance_create(x,y,mHeadDrawer)
instance_create(x,y,mFurController)
instance_create(x,y,mEmotionSubController)
instance_create(x,y,mLiquidSubController)

/* Load Plans &amp; Behaviours */
instance_create(x,y,mDriveCollectionMaster)
instance_create(x,y,mBehavioursReactive)
instance_create(x,y,mBehavioursDeliberative)


/* Fur Generation */

NumberOfTemplates = 5
TemplatesFinished = 0
FurGenerationFinished = false

/* Blood Splash Variables */

BottomBlood = oHead3.y + (oHead3.sprite_height/ 2) - 160
TopBlood = oHead3.y + (oHead3.sprite_height / 2) - 230
LeftBlood = oHead3.x - (oHead3.sprite_width / 2) + 200
RightBlood = oHead3.x + (oHead3.sprite_width / 2) - 200
StainsToCreate = 70
StainsCreated = 0
StainsFinished = false

StainX = random_range(LeftBlood,RightBlood)
StainY = random_range(TopBlood,BottomBlood)

/*Bloodstained Fur Variables */

FursToStain = 50
FursStained = 0
AllFursStained = false
GeneratingWenClusters = false
GeneratedCellarWens = false

/* Stray Hairs */
StrayHairsFinished = false
StrayHairsCreated = 0
StrayHairsToCreate = 6

/* Moles */
MolesFinished = false

alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add Objects

BellSounder = instance_create(278,3951,oBellSounder)
BellSounder.image_angle = 20
BSTongue = instance_create(287,3971,oBellSounderTongue)
BSTongue.image_angle = 30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fur Generation

//If we are still generating...

if FurGenerationFinished = false {
if TemplatesFinished &lt; NumberOfTemplates {

with mFurTemplateParent {
if FinishedGenerating = false {
if FursGenerated &lt; FursToGenerate {

PosX = random_range(LeftBound,RightBound)
PosY = random_range(TopBound,BottomBound)

if position_meeting(PosX,PosY,self) {
if TypeOfFur = "curled" {
ThisFur = instance_create(PosX,PosY,mFurCurledParent)
ThisFur.OriginalRotation = choose(irandom_range(30,150),irandom_range(210,330))
} else if TypeOfFur = "normal" {
ThisFur = instance_create(PosX,PosY,mFurParent)
ThisFur.OriginalRotation = point_direction(ThisFur.x,ThisFur.y,AreaFocus.x,AreaFocus.y)
}
ThisFur.Tag = Tag
ThisFur.OriginalXScale = random_range(LowerScaleBound,UpperScaleBound)
ThisFur.OriginalYScale = ThisFur.OriginalXScale
with ThisFur {
direction = OriginalRotation
image_angle = direction
BaseXScale = OriginalXScale
BaseYScale = OriginalYScale
CurrentXScale = OriginalXScale
CurrentYScale = OriginalYScale
image_xscale = OriginalXScale
image_yscale = OriginalYScale
}
 
if position_meeting(ThisFur.x,ThisFur.y,mBaldPatchParent) 
or position_meeting(ThisFur.x,ThisFur.y,mCreatureParent) = false
or (position_meeting(ThisFur.x,ThisFur.y,mTopOfHeadTemplate))
or (position_meeting(ThisFur.x,ThisFur.y,mPlotWoundParent))
or position_meeting(ThisFur.x,ThisFur.y,oCaulLead)
{
with ThisFur {instance_destroy()}
} else {
FursGenerated += 1
}
}
} else {
FinishedGenerating = true
mFrontLoading.TemplatesFinished += 1
}
}
}
} else {

if oBrowLeft.FursGenerated &lt; oBrowLeft.FursToGenerate
and oBrowRight.FursGenerated &lt; oBrowRight.FursToGenerate 
{
with oBrowLeft {
GetBounds()
PosX = random_range(LeftBound,RightBound)
PosY = random_range(TopBound,BottomBound)
if position_meeting(PosX,PosY,self) {
ThisFur = instance_create(PosX,PosY,mFurBrowParent)
ThisFur.OriginalRotation = 0
ThisFur.Tag = Tag
ThisFur.Distance = point_distance(x,y,ThisFur.x,ThisFur.y)
ThisFur.Direction = point_direction(x,y,ThisFur.x,ThisFur.y)
ThisFur.OriginalXScale = random_range(LowerScaleBound,UpperScaleBound)
ThisFur.OriginalYScale = ThisFur.OriginalXScale
with ThisFur {
direction = OriginalRotation
image_angle = direction
BaseXScale = OriginalXScale
BaseYScale = OriginalYScale
CurrentXScale = OriginalXScale
CurrentYScale = OriginalYScale
image_xscale = OriginalXScale
image_yscale = OriginalYScale
}
FursGenerated += 1
}
}

with oBrowRight {
GetBounds()
PosX = random_range(LeftBound,RightBound)
PosY = random_range(TopBound,BottomBound)
if position_meeting(PosX,PosY,self) {
ThisFur = instance_create(PosX,PosY,mFurBrowParent)
ThisFur.OriginalRotation = point_direction(ThisFur.x,ThisFur.y,AreaFocus.x,AreaFocus.y)
ThisFur.Tag = Tag
ThisFur.Distance = point_distance(x,y,ThisFur.x,ThisFur.y)
ThisFur.Direction = point_direction(x,y,ThisFur.x,ThisFur.y)
ThisFur.OriginalXScale = random_range(LowerScaleBound,UpperScaleBound)
ThisFur.OriginalYScale = ThisFur.OriginalXScale
with ThisFur {
direction = OriginalRotation
image_angle = direction
BaseXScale = OriginalXScale
BaseYScale = OriginalYScale
CurrentXScale = OriginalXScale
CurrentYScale = OriginalYScale
image_xscale = OriginalXScale
image_yscale = OriginalYScale
}
FursGenerated += 1
}
}
} else {
FurGenerationFinished = true 
}
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generating Wen Clusters
if GeneratingWenClusters = false {
GenerateWenCluster(irandom_range(10,30),218,1723,irandom_range(20,30))
GenerateWenRing(irandom_range(25,45),411,2592,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,30),1102,2450,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,30),920,3328,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,30),361,3181,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,30),888,3823,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,30),1083,3661,irandom_range(20,30))
GenerateWenRing(irandom_range(25,45),956,3602,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,30),238,5158,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,30),4673,5119,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,30),1074,5150,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,30),898,4971,irandom_range(20,30))
GenerateWenRing(irandom_range(25,45),363,4801,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,30),660,5146,irandom_range(20,30))
GenerateWenRing(irandom_range(25,45),207,4984,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,30),1105,5186,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,30),1025,4240,irandom_range(20,30))
GenerateWenRing(irandom_range(25,45),351,3226,irandom_range(20,30))
GenerateWenRing(irandom_range(25,45),323,875,irandom_range(20,30))
GenerateWenRing(irandom_range(25,45),1050,1758,irandom_range(20,30))
GenerateWenRing(irandom_range(25,45),874,3040,irandom_range(20,30))
GenerateWenRing(irandom_range(25,45),215,4146,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,60),1121,4146,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,60),911,4302,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,60),520,4890,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,60),969,4917,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,60),1008,2964,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,60),249,1487,irandom_range(20,30))
GenerateWenCluster(irandom_range(10,60),859,1455,irandom_range(20,30))


//Cellar Wens
GenerateWenCluster(irandom_range(5,25),1104,4236,irandom_range(20,30))
GenerateWenCluster(irandom_range(5,25),1005,4267,irandom_range(20,30))
GenerateWenCluster(irandom_range(5,25),1146,4292,irandom_range(20,30))
GenerateWenCluster(irandom_range(5,25),1137,4260,irandom_range(20,30))
GenerateWenCluster(irandom_range(5,25),963,4273,irandom_range(20,30))
GenerateWenCluster(irandom_range(5,25),993,4219,irandom_range(20,30))
GenerateWenCluster(irandom_range(5,25),1156,4292,irandom_range(20,30))
GenerateWenCluster(irandom_range(5,25),1037,4227,irandom_range(20,30))

GeneratingWenClusters = true
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stray Hairs

if StrayHairsFinished = false
if StrayHairsCreated &lt; StrayHairsToCreate {

if StrayHairsCreated = 0 {
PosX = 210
PosY = 2391

} else if StrayHairsCreated = 1 {
PosX = 1066
PosY = 1834

} else if StrayHairsCreated = 2 {
PosX = 352
PosY = 1152

} else if StrayHairsCreated = 3 {
PosX = 431
PosY = 4938

} else if StrayHairsCreated = 4 {
PosX = 989
PosY = 970

} else if StrayHairsCreated = 5 {
PosX = 181
PosY = 1213
} else {
}

ThisFur = instance_create(PosX,PosY,mFurParent)
ThisFur.OriginalRotation = 90
ThisFur.OriginalXScale = random_range(0.04,0.06)
ThisFur.OriginalYScale = ThisFur.OriginalXScale
with ThisFur {
direction = OriginalRotation
image_angle = direction
BaseXScale = OriginalXScale
BaseYScale = OriginalYScale
CurrentXScale = OriginalXScale
CurrentYScale = OriginalYScale
image_xscale = OriginalXScale
image_yscale = OriginalYScale
}
StrayHairsCreated += 1

} else {
StrayHairsFinished = true
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate Moles

if StrayHairsFinished = true {
if MolesFinished = false {
for (i = 0; i &lt; 20; i++) {
RandomX = irandom_range(oHead1.x - (oHead1.sprite_width/2),oHead1.x + (oHead1.sprite_width/2))
RandomY = irandom_range(1441,2655)

while (
place_meeting(RandomX,RandomY,mTopHeadFurTemplate)
or place_meeting(RandomX,RandomY,oBrowLeft)
or place_meeting(RandomX,RandomY,oBrowRight)
or place_meeting(RandomX,RandomY,oEyeballLeft)
or place_meeting(RandomX,RandomY,oEyeballRight)
or place_meeting(RandomX,RandomY,oNose1)
or !place_meeting(RandomX,RandomY,mCreatureParent)
) 
{
RandomX = irandom_range(oHead1.x - (oHead1.sprite_width/2),oHead1.x + (oHead1.sprite_width/2))
RandomY = irandom_range(1441,2655)
}
instance_create(RandomX,RandomY,oMoleHerd)
}
instance_create(718,2723,oByre)
instance_create(718,2723,oMoleHerdRed)
MolesFinished = true
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Staining Furs On Bottom Trunk

if FurGenerationFinished = true {
if AllFursStained = false {





if FursStained &lt; FursToStain {
CandidateFur = instance_find(mFurParent,irandom(instance_number(mFurParent) - 1))
//If the fur is in the bottom trunk...
if CandidateFur.Tag = "bottomtrunk" {
//And has not already been stained...
if CandidateFur.Stained = false {
//And it is low enough...
if CandidateFur.y &gt;= 4639 {
Diff = CandidateFur.y - 4639
Percent = (Diff / (4988 - 4639)) * 100
Selector = irandom_range(1,100)
if Selector &lt;= Percent {
CandidateFur.Sprite = choose(sHairB1,sHairB2,sHairB3,sHairB4,sHairB5,sHairB6)
CandidateFur.Stained = true
FursStained += 1
}
}
}
}
} else {

AllFursStained = true
}
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Self &amp; Templates After Generation

if FurGenerationFinished = true 
and GeneratingWenClusters = true
and AllFursStained = true
and StrayHairsFinished = true
and MolesFinished = true
{
for (i = 0; i &lt; 30; i++) {
RandX = irandom_range(169,1556)
RandY = irandom_range(4602,5093)
CreateStain(30,0,360,10,80,0.3,0.05,0.1,0.1,0.2,DebugRedTextColour,RandX,RandY)
}
with mBaldPatchParent {
instance_destroy()
}
with mFurTemplateParent {
instance_destroy()
}
instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Loading Text

if instance_exists(mFrontLoading) {
draw_set_colour(DebugRedTextColour)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_set_font(fDebugPaused)
draw_text(view_xview[mInterfaceController.CurrentViewNumber] + (view_wview[mInterfaceController.CurrentViewNumber] / 2),view_yview[mInterfaceController.CurrentViewNumber] + (view_hview[mInterfaceController.CurrentViewNumber] / 2),"Loading...")
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
