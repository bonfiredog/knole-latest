<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCellarBase</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

AnchoredX = x
AnchoredY = y
depth = CellarBaseLayer
BuriedSurface = surface_create(sprite_width + 200,400)
Shade = 1

//Find Bounds

a = point_direction(0, 0, -sprite_xoffset, -sprite_yoffset) + image_angle;
d = point_distance(0, 0, -sprite_xoffset, -sprite_yoffset);
px1 = lengthdir_x(d, a);
py1 = lengthdir_y(d, a);


a = point_direction(0, 0, sprite_width - sprite_xoffset - 1, -sprite_yoffset) + image_angle;
d = point_distance(0, 0, sprite_width - sprite_xoffset - 1, -sprite_yoffset);
px2 = lengthdir_x(d, a);
py2 = lengthdir_y(d, a);


a = point_direction(0, 0, sprite_width - sprite_xoffset - 1, sprite_height - sprite_yoffset - 1) + image_angle;
d = point_distance(0, 0, sprite_width - sprite_xoffset - 1, sprite_height - sprite_yoffset - 1);
px3 = lengthdir_x(d, a);
py3 = lengthdir_y(d, a);

a = point_direction(0, 0, -sprite_xoffset, sprite_height - sprite_yoffset - 1) + image_angle;
d = point_distance(0, 0, -sprite_xoffset, sprite_height - sprite_yoffset - 1);
px4 = lengthdir_x(d, a);
py4 = lengthdir_y(d, a);


LeftBound = x + min(px1, px2, px3, px4);
TopBound = y + min(py1, py2, py3, py4);
RightBound = x + max(px1, px2, px3, px4);
BottomBound = y + max(py1, py2, py3, py4);

DripTimer = 900
DrippingInterval = irandom_range(30,120)
Uncovered = false

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drip Blood From Cellar Base

if Uncovered = true {
if DripTimer &gt; 0 {
DripTimer -= 1 
if DrippingInterval &gt; 0 {
DrippingInterval -= 1
} else if DrippingInterval &lt;= 0 {
PosX = random_range(LeftBound,RightBound)
PosY = random_range(TopBound,BottomBound)
MakeDripSound(PosX,PosY)
ThisDrip = instance_create(PosX,PosY,mDripBlood)
ThisDrip.image_xscale = random_range(0.1,0.2)
ThisDrip.image_yscale = ThisDrip.image_xscale
ThisDrip.Parent = self.id
DrippingInterval = irandom_range(30,120)
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change Sprite With Zoom

ChangeSpriteWithZoom(0.6,0.5,image_xscale,image_yscale)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Touching With Blood

if mouse_check_button_pressed(mb_any) and position_meeting(mouse_x,mouse_y,self) and instance_exists(oCellarTop) = false {
TouchLiquid("blood")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self And Surface

//Draw self (same for each view).

ChangeDrawingWithZoom(sCellarMacro,sCellarBase,0)

//Draw the surface.
SurfaceOriginX = x - (sprite_width / 2) - 100
SurfaceOriginY = y - 400

if !surface_exists(BuriedSurface) {BuriedSurface = surface_create(sprite_width,400)}

//If rooted, draw the body parts to the surface with the Shade variable over the top.

if oSarahHead.Rooted = true {
surface_set_target(BuriedSurface)
draw_clear_alpha(c_black,0)
with oBody {
draw_sprite_ext(sBody,0,x - oCellarBase.SurfaceOriginX,y - oCellarBase.SurfaceOriginY,image_xscale,image_yscale,image_angle,c_white,image_alpha)
draw_sprite_ext(sBody,0,x - oCellarBase.SurfaceOriginX,y - oCellarBase.SurfaceOriginY,image_xscale,image_yscale,image_angle,c_black,((oCellarBase.Shade / 1) * image_alpha))
}
with oNecks {
draw_sprite_ext(sNecks,0,x - oCellarBase.SurfaceOriginX,y - oCellarBase.SurfaceOriginY,image_xscale,image_yscale,image_angle,c_white,image_alpha)
draw_sprite_ext(sNecks,0,x - oCellarBase.SurfaceOriginX,y - oCellarBase.SurfaceOriginY,image_xscale,image_yscale,image_angle,c_black,((oCellarBase.Shade / 1) * image_alpha))
}
with oJosephHead {
draw_sprite_ext(sJosephHead,0,x - oCellarBase.SurfaceOriginX,y - oCellarBase.SurfaceOriginY,image_xscale,image_yscale,image_angle,c_white,image_alpha)
draw_sprite_ext(sJosephHead,0,x - oCellarBase.SurfaceOriginX,y - oCellarBase.SurfaceOriginY,image_xscale,image_yscale,image_angle,c_black,((oCellarBase.Shade / 1) * image_alpha))
}
with oSarahHead {
draw_sprite_ext(sSarahHead,0,x - oCellarBase.SurfaceOriginX,y - oCellarBase.SurfaceOriginY,SpriteIndexInXScale,SpriteIndexInYScale,image_angle,image_blend,SpriteIndexInAlpha)
draw_sprite_ext(sCellarBodyMacro,0,x - oCellarBase.SurfaceOriginX,y - oCellarBase.SurfaceOriginY,SpriteIndexOutXScale,SpriteIndexOutYScale,image_angle,image_blend,SpriteIndexOutAlpha)
draw_sprite_ext(sSarahHead,0,x - oCellarBase.SurfaceOriginX,y - oCellarBase.SurfaceOriginY,SpriteIndexInXScale,SpriteIndexInYScale,image_angle,c_black,((oCellarBase.Shade / 1) * SpriteIndexInAlpha))
}
surface_reset_target()
//If the Cellar isn't rooted, draw them as normal (using small sprite if zoomed out).
} else if oSarahHead.Rooted = false {
with oNecks {
draw_sprite_ext(sNecks,0,x + 4, y + 4, image_xscale,image_yscale,image_angle,c_black,(0.5 / 1) * image_alpha)
draw_sprite_ext(sBody,0,oBody.x + 4,oBody.y + 4, oBody.image_xscale,oBody.image_yscale,oBody.image_angle,c_black,(0.5 / 1) * oBody.image_alpha)
draw_sprite_ext(sJosephHead,0,oJosephHead.x + 4,oJosephHead.y + 4, oJosephHead.image_xscale,oJosephHead.image_yscale,oJosephHead.image_angle,c_black,(0.5 / 1) * oJosephHead.image_alpha)
draw_sprite_ext(sSarahHead,0,oSarahHead.x + 4,oSarahHead.y+4,oSarahHead.image_xscale,oSarahHead.image_yscale,oSarahHead.image_angle,c_black,(0.5 / 1) * oSarahHead.SpriteIndexInAlpha)
draw_sprite_ext(sNecks,0,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha)
draw_sprite_ext(sNecks,0,x,y,image_xscale,image_yscale,image_angle,c_black,((oCellarBase.Shade / 1) * image_alpha))
}
with oBody {
draw_sprite_ext(sBody,0,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha)
draw_sprite_ext(sBody,0,x,y,image_xscale,image_yscale,image_angle,c_black,((oCellarBase.Shade / 1) * image_alpha))
}
with oJosephHead {
draw_sprite_ext(sJosephHead,0,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha)
draw_sprite_ext(sJosephHead,0,x,y,image_xscale,image_yscale,image_angle,c_black,((oCellarBase.Shade / 1) * image_alpha))
}
with oSarahHead {
draw_sprite_ext(sSarahHead,0,x,y,SpriteIndexInXScale,SpriteIndexInYScale,image_angle,image_blend,SpriteIndexInAlpha)
draw_sprite_ext(sCellarBodyMacro,0,x,y,SpriteIndexOutXScale,SpriteIndexOutYScale,image_angle,image_blend,SpriteIndexOutAlpha)
draw_sprite_ext(sSarahHead,1,x,y,SpriteIndexInXScale,SpriteIndexInYScale,image_angle,c_black,(oCellarBase.Shade / 1) * SpriteIndexInAlpha)
}
}

if oSarahHead.Rooted = true {
draw_surface_ext(BuriedSurface,SurfaceOriginX,SurfaceOriginY,1,1,0,c_white,1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
