<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCaulJug</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>mCaulParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

event_inherited()
OriginalX = x
OriginalY = y
OriginalXScale = image_xscale
OriginalYScale = image_yscale
YDifference = 0
GlobalPlucking = false
XDifference = 0

depth = CaulLayer - 0.02
Redness = 0
EngorgedPercentage = 0
CankerGrowRateCurrent = random_range(3000,4000)
ReadyToGrow = false
TouchingTwitch = false
CankerWobbleAmount = 0
CankerWobbleBase = 0
ShakeDiff = 0
Shaking = false
ShakeDir = "left"
BaseCankerRate = 10000
BaseRedness = 0

CaulJugSurface = surface_create(sprite_width,sprite_height)
CaulJugSurfaceCurrentX = 0
CaulJugSurfaceCurrentY = 0
XScaleDifference = 0
YScaleDifference = 0
ShotMod = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Positions &amp; Scales &amp; Clampings

event_inherited()

x = OriginalX + ShakeDiff
y = OriginalY - MouthYDiff + ((41 / 100) * oMouthCentre.PercentageDiff) + ((41 / 100) * EngorgedPercentage)
image_xscale = OriginalXScale + ((0.015 / 100) * oMouthCentre.PercentageDiff) + ((0.015 / 100) * EngorgedPercentage)
image_yscale = OriginalYScale + ((0.015 / 100) * oMouthCentre.PercentageDiff) + ((0.015 / 100) * EngorgedPercentage)

EngorgedPercentage = ((50 / 80) * oCaulLiquid.LiquidHeight) + ((50 / 100) * mCreatureController.Lust)
EngorgedPercentage = clamp(EngorgedPercentage,0,100)

Redness = BaseRedness + ((0.5 / 80) * oCaulLiquid.LiquidHeight) + ((0.5 / 100) * mDriveCollectionMaster.RitualTolerance)

BaseRedness = clamp(BaseRedness,0,0.5)
Redness = clamp(Redness,0,1)


YDifference = y - OriginalY

CaulJugSurfaceCurrentX = x - (sprite_width / 2)
CaulJugSurfaceCurrentY = y - (sprite_height / 2)

XDifference = x - OriginalX
YDifference = y - OriginalY
XScaleDifference = image_xscale - OriginalXScale
YScaleDifference = image_yscale - OriginalYScale
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cutting

if place_meeting(x,y,mFinger) and AmountForward(70)
and mInterfaceController.CurrentHandUse = "knife" {
CreateParticleSplash(mouse_x,mouse_y,
mFinger.sprite_width,
ps_shape_ellipse,
ps_distr_gaussian,
BloodLiquidColour,
10,
20,
0.05,
0.1,
0,
360,
30,
80,
0.5,
10
)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Growing Cankers

//(Grow Rate Affected By Creature Alive Value)

if CankerGrowRateCurrent &gt; 0 and ReadyToGrow = false {
CankerGrowRateCurrent -= 1 
} else if CankerGrowRateCurrent &lt;= 0 {
if (x - (sprite_width / 2)) &gt; (view_xview[mInterfaceController.CurrentViewNumber] + view_wview[mInterfaceController.CurrentViewNumber])
or (x + (sprite_width / 2) &lt; view_xview[mInterfaceController.CurrentViewNumber])
or (y - (sprite_height / 2)) &gt; (view_yview[mInterfaceController.CurrentViewNumber] + view_hview[mInterfaceController.CurrentViewNumber])
or (y + (sprite_height / 2) &lt; view_yview[mInterfaceController.CurrentViewNumber])
{
GrowCanker()
} else {
ReadyToGrow = true
}
}



if ReadyToGrow = true 
and
(
(x - (sprite_width / 2)) &gt; (view_xview[mInterfaceController.CurrentViewNumber] + view_wview[mInterfaceController.CurrentViewNumber])
or (x + (sprite_width / 2) &lt; view_xview[mInterfaceController.CurrentViewNumber])
or (y - (sprite_height / 2)) &gt; (view_yview[mInterfaceController.CurrentViewNumber] + view_hview[mInterfaceController.CurrentViewNumber])
or (y + (sprite_height / 2) &lt; view_yview[mInterfaceController.CurrentViewNumber])
)
{
GrowCanker()
ReadyToGrow = false
}














</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wobbling Controls

CankerWobbleAmount = CankerWobbleBase
+ ((20 / 100) * mEmotionSubController.HappyActivation)
+ ((70 / 100) * mCreatureController.Lust)
- ((20 / 100) * mCreatureController.Tiredness)
- ((20 / 100) * mCreatureController.Stress)
- ((20 / 100) * mCreatureController.Pain)
+ ShotMod

CankerWobbleAmount = clamp(CankerWobbleAmount,0,100)

if ShotMod &gt; 0 {
ShotMod -= 0.03
}

ShotMod = clamp(ShotMod,0,50)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shaking

if Shaking = true {
if ShakeTrack &gt; 0 {
ShakeTrack -= ShakeRate

if ShakeDir = "left" {
ShakeDiff -= ShakeInt
ShakeDir = "right"
} else if ShakeDir = "right" {
ShakeDiff += ShakeInt
ShakeDir = "left"
}

} else {
Shaking = false
ShakeTimer = 0
} 
} else {
if ex_audio_is_playing("twitch") {
ex_audio_stop("twitch")
}
if ShakeDiff != 0 {
if ShakeDiff &lt; 0 {
ShakeDiff += 1
} else if ShakeDiff &gt; 1 {
ShakeDiff -= 1
} else {
ShakeDiff = 0
}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing Self And Shadow and Redness and Veins

draw_sprite_ext(sCaulJug,1,x + 8 + ((8 / 100) * EngorgedPercentage),y + 8 + ((8 / 100) * EngorgedPercentage),image_xscale,image_yscale,image_angle,c_black,0.4)
draw_self()
draw_sprite_ext(sCaulJugRed,1,x,y,image_xscale,image_yscale,image_angle,c_white,Redness)

draw_sprite_ext(oCaulJugVein1,0,
x - 40 - ((20 / 100) * EngorgedPercentage),
y + 20 - ((10 / 100) * EngorgedPercentage),
0 + ((0.12 / 100) * EngorgedPercentage),
0 + ((0.12 / 100) * EngorgedPercentage),
0 + ((20 / 100) * EngorgedPercentage),
c_white,
1
)

draw_sprite_ext(oCaulJugVein2,0,
x + 60 + ((20 / 100) * EngorgedPercentage),
y - 20 - ((10 / 100) * EngorgedPercentage),
0 + ((0.12 / 100) * EngorgedPercentage),
0 + ((0.12 / 100) * EngorgedPercentage),
0 - ((20 / 100) * EngorgedPercentage),
c_white,
1
)

draw_sprite_ext(oCaulJugVein3,0,
x - 80 - ((20 / 100) * EngorgedPercentage),
y - 140 - ((10 / 100) * EngorgedPercentage),
0 + ((0.12 / 100) * EngorgedPercentage),
0 + ((0.12 / 100) * EngorgedPercentage),
0 + ((20 / 100) * EngorgedPercentage),
c_white,
1
)

draw_sprite_ext(oCaulJugVein4,0,
x - 75 - ((20 / 100) * EngorgedPercentage),
y - 50 - ((10 / 100) * EngorgedPercentage),
0 + ((0.12 / 100) * EngorgedPercentage),
0 + ((0.12 / 100) * EngorgedPercentage),
0 - ((20 / 100) * EngorgedPercentage),
c_white,
1
)

draw_sprite_ext(oCaulJugVein5,0,
x + 30 + ((20 / 100) * EngorgedPercentage),
y - 100 - ((10 / 100) * EngorgedPercentage),
0 + ((0.12 / 100) * EngorgedPercentage),
0 + ((0.12 / 100) * EngorgedPercentage),
0 + ((20 / 100) * EngorgedPercentage),
c_white,
1
)

draw_sprite_ext(oCaulJugVein6,0,
x + 100 + ((20 / 100) * EngorgedPercentage),
y - 40 - ((10 / 100) * EngorgedPercentage),
0 + ((0.12 / 100) * EngorgedPercentage),
0 + ((0.12 / 100) * EngorgedPercentage),
0 - ((20 / 100) * EngorgedPercentage),
c_white,
1
)

draw_sprite_ext(oCaulJugVein7,0,
x - 0 - ((20 / 100) * EngorgedPercentage),
y - 30 - ((10 / 100) * EngorgedPercentage),
0 + ((0.12 / 100) * EngorgedPercentage),
0 + ((0.12 / 100) * EngorgedPercentage),
0 + ((20 / 100) * EngorgedPercentage),
c_white,
1
)


draw_sprite_ext(oCaulJugVein8,0,
x + 130 - ((20 / 100) * EngorgedPercentage),
y - 120 - ((10 / 100) * EngorgedPercentage),
0 + ((0.12 / 100) * EngorgedPercentage),
0 + ((0.12 / 100) * EngorgedPercentage),
0 - ((20 / 100) * EngorgedPercentage),
c_white,
1
)


draw_sprite_ext(oCaulJugVein9,0,
x + 20 + ((20 / 100) * EngorgedPercentage),
y + 40 - ((10 / 100) * EngorgedPercentage),
0 + ((0.12 / 100) * EngorgedPercentage),
0 + ((0.12 / 100) * EngorgedPercentage),
0 + ((20 / 100) * EngorgedPercentage),
c_white,
1
)

with oCaulCankerCentral {
if Plucked = true {
draw_sprite_ext(sprite_index,0,x,y,image_xscale,image_yscale,270,c_white,1)
}
}


if (!surface_exists(CaulJugSurface)) { CaulJugSurface = surface_create(sprite_width,sprite_height) }
CleanableSurface(oCaulJug.CaulJugSurface,oCaulJug,1)
draw_surface_ext(CaulJugSurface,x - (sprite_width / 2),y - (sprite_height / 2),1 + XScaleDifference,1 + YScaleDifference,0,c_white,1)




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
