<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sFullMoon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

depth = AnatomyLayer2 + 0.2
Parent = mMoon
Direction = random_range(60,120)

//Place in the room just below the top of the room, at the angle designated by the actual moon.
TopX = mCentreOfRoom.x + lengthdir_x((mCentreOfRoom.x - 200),Direction)
TopY = mCentreOfRoom.y + lengthdir_y((mCentreOfRoom.y - 200),Direction)
TopX = clamp(TopX,130,room_width - 80)
TopY = clamp(TopY,75,room_height - 75)
ZoomMod = 0

x = TopX
y = TopY

//Set Lighting Size &amp; Sprite Based On Phase
switch mWorldController.TonightMoonPhase {
case "Full Moon":
TonightMoonPower = 4
sprite_index = sFullMoon
break;

case "Waxing Gibbous":
TonightMoonPower = 3
sprite_index = sWaxGib
break;

case "First Quarter":
TonightMoonPower = 2
sprite_index = s1Quarter
break;

case "Waxing Crescent":
TonightMoonPower = !
sprite_index = sWaxCres
break;

case "New Moon":
TonightMoonPower = 0
sprite_index = sNewMoon
break;

case "Waning Crescent":
TonightMoonPower = 1
sprite_index = sWanCres
break;

case "Last Quarter":
TonightMoonPower = 2
sprite_index = s3Quarter
break;

case "Waning Gibbous":
TonightMoonPower = 3
sprite_index = sWanGib
break;

default:
TonightMoonPower = 1
break;
}

TonightMoonPowerFinal = TonightMoonPower


image_xscale = random_range(0.5,1)
image_yscale = image_xscale
OriginalXScale = image_xscale
OriginalYScale = image_yscale

image_alpha = 0
CurrentAlpha = image_alpha

alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alpha &amp; Power Tied To Moon Alpha

if mWorldController.MorningTwilightInProgress = true {
BaseAlpha = 1 - ((1 / 30) * mWorldController.CurrentTwilightMinute)
TonightMoonPowerFinal = (TonightMoonPower / 30) * mWorldController.CurrentTwilightMinute
} else if mWorldController.EveningTwilightInProgress = true {
BaseAlpha = 0 + ((1 / 30) * mWorldController.CurrentTwilightMinute)
TonightMoonPowerFinal = TonightMoonPower - ((TonightMoonPower / 30) * mWorldController.CurrentTwilightMinute)
} else {
BaseAlpha = 1
TonightMoonPowerFinal = TonightMoonPower 
}

CurrentAlpha = BaseAlpha - (min(1,(BaseAlpha / 600) * (view_yview[mInterfaceController.CurrentViewNumber])))

image_alpha = clamp(image_alpha,0,1)

alarm[0] = 2000
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disappear If Zoomed Out At All

if mBehavioursDeliberative.PercentForward &lt; 100 {
image_alpha = 0
} else {
image_alpha = CurrentAlpha
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Position In Room Tied To View Y.

if mBehavioursDeliberative.PercentForward &lt; 40 {
DisMod = 500
} else {
DisMod = 500 - ((500 / 60) * (mBehavioursDeliberative.PercentForward - 40))
}

x = TopX + lengthdir_x(ZoomMod,Direction) + mInterfaceController.FloatModX
y = TopY + lengthdir_y(ZoomMod,Direction) - DisMod + mInterfaceController.FloatModY
image_xscale = OriginalXScale + (ZoomMod / 5)
image_yscale = OriginalYScale + (ZoomMod / 5)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
