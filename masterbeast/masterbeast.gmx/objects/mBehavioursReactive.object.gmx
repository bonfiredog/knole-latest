<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

depth = MetaLayer
x = ControllerObjectX
y = ControllerObjectY

//Blinking Variables 
BlinkingActive = false
BlinkIn = false 
BlinkOut = false
StartBlinkIn = false
StartBlinkOut = false
BlinkNumberActive = false
BlinkNumber = 0

//Winking Variables
WinkingActive = false
WinkIn = false
WinkOut = false
StartWinkIn = false
StartWinkOut = false
WhichEyeWink = "neither"

//Open Eyes Variables
OpenEyesActive = false
WhichEyeOpen = "neither"
OpenSpeed = 0

//Close Eyes Variables 
CloseEyesActive = false
WhichEyeClose = "neither"
CloseSpeed = 0

//Sniffing Variables
SniffingActive = false
SniffingMod = 0
SniffRateUp = 0
SniffRateDown = 0
SniffDuration = 0
SniffInComplete = false
SniffOutComplete = false
SniffComplete = false
SniffSoundStarted = false

//Twitching Variables

TwitchingActive = false
TwitchingMod = 0
TwitchRateUp = 0
TwitchRateDown = 0
TwitchInComplete = false
TwitchOutComplete = false
TwitchComplete = false

//Breathing Variables
BreathingActive = false
BreathRate = 0
BreathTimeAmount = 0
BreathTime = 0
BreathStatus = "in"
BreathHoldAmount = 0
BreathHold = 0
BreathingType = "both"
OutMod = 1
ChosenBreathInOut = false
PlayedSoundBreath = false
NoseInBreathSound = "none"
NoseOutBreathSound = "none"
MouthInBreathSound = "none"
MouthOutBreathSound = "none"

//Swallowing Variables
SwallowingActive = false
SwallowRate = 1
SwallowHolding = false
SwallowHold = 5

//Open Mouth Variables
OpenMouthActive = false
OMTarget = 0
OMRate = 0
DrainLiquidSwallow = false

//Close Mouth Variables
CloseMouthActive = false
CMTarget = 0
CMRate = 0

//Squinting Variables
SquintingActive = false
DesiredSquintLevel = 0

//Sleeping Variables
SleepingActive = false
SuddenWaking = false
Blinks = 0
Sleeping = false
DreamCountdown = 0
Dreaming = false
DreamTimer = 0
SleepDroopY = 0
SleepDroopYCurrent = 0

//Eyebrow Twitch Variables
EyebrowTwitchLActive = false
EBLTwitchDir = "up"
EBLTwitchRate = 9

EyebrowTwitchRActive = false
EBRTwitchDir = "up"
EBRTwitchRate = 9


//Mouth Centre Twitch Variables
MCTwitchActive = false
MCTwitchSpeed = 0.04
MCTwitchDir = "out"
MCTwitchAmount = 0.4

//Cheek Twitch Variables
CheekTwitchLActive = false
CheekTwitchLDir = "up"
CheekTwitchLRate = 3

CheekTwitchRActive = false
CheekTwitchRDir = "up"
CheekTwitchRRate = 3

//Caul Vibrate Variables
CaulVibrateActive = false
CaulVibrateAmount = 0

//Mouth Side Twitch Variables
MSLTwitchActive = false
MSLTwitchDir = "none"
MSLTwitchCurrentDir = 1
MSLTwitchRate = 9

MSRTwitchActive = false
MSRTwitchDir = "none"
MSRTwitchCurrentDir = 1
MSRTwitchRate = 9

//Sneezing Variables
SneezeActive = false 
SneezeSpeedIn = 0
SneezeHold = 0
SneezeSpeedOut = 0
SneezePos = "in"
MouthSneezeMod = 0
CheekSneezeMod = 0
ClosingEyesSneeze = false
SneezeStop = false

//Agonising Variables
AgonisingActive = false
AgStart = false
AgMain = false
AgStop = false
AgonyCloudEmitterRate = 0

//Shivering Variables
ShiveringActive = false
ShiveringIntensity = 0
ShiveringSideTime = 0

//Coughing Variables
CoughingActive = false
CoughSound = "none"
SetupCough = false
CoughCloseEyes = 0
TriggerCough = false
CoughTimer = 50

//Yawning Variables
YawningActive = false
YawningEyes = "none"
YawningRate = 0
YawningHold = 0
YawningTime = 0
YawnBlinkNumber = 0
StoppingYawning = false
StartedYawn = false

//Number Of Sniffs
NumberSniffsActive = false
SniffNumber = 0

//Slipping Variables
SlippingActive = false
BreathVolMax = 0.15
CVSoundSetup = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Closing Eyes

if CloseEyesActive = true {

if WhichEyeClose = "both" {
StartEyeMovement(oEyeballLeft,CloseSpeed,0)
StartEyeMovement(oEyeballRight,CloseSpeed,0)
} else if WhichEyeClose = "left" {
StartEyeMovement(oEyeballLeft,CloseSpeed,0)
} else if WhichEyeClose = "right" {
StartEyeMovement(oEyeballRight,CloseSpeed,0)
}

CloseSpeed = 0
WhichEyeClose = "neither"
CloseEyesActive = false
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blinking

if BlinkingActive = true {
if BlinkIn = false and BlinkOut = false {
if StartBlinkIn = false {
// Start going in...
StartCloseEyeBehaviour("both",0)
StartBlinkIn = true
} else if StartBlinkIn = true {
if oEyelidUpperRight.image_index = 0 and oEyelidUpperLeft.image_index = 0
and oEyelidLowerRight.image_index = 0 and oEyelidLowerLeft.image_index = 0
{
BlinkIn = true
with oFloaterRight {
SpeedMod = random_range(10,30)
speed = SpeedMod / room_speed
}
}
}
} else if BlinkIn = true and BlinkOut = false {
if StartBlinkOut = false {
StartOpenEyeBehaviour("both",0)
StartBlinkOut = true
} else if StartBlinkOut = true {
if oEyelidUpperRight.image_index = oEyeballRight.MaxOpenIndex 
and oEyelidUpperLeft.image_index = oEyeballLeft.MaxOpenIndex
and oEyelidLowerRight.image_index = oEyeballRight.MaxOpenIndex
and oEyelidLowerLeft.image_index = oEyeballLeft.MaxOpenIndex
{

BlinkOut = true
}
}
} else if BlinkIn = true and BlinkOut = true {
StartBlinkIn = false
StartBlinkOut = false
BlinkIn = false
BlinkOut = false
BlinkingActive = false
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blink Number

if BlinkNumberActive = true {
if BlinkNumber &gt; 0 {
if BlinkingActive = false {
StartBlinkBehaviour()
BlinkNumber -= 1
}
} else {
BlinkNumber = 0
BlinkNumberActive = false
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Winking

if WinkingActive = true {
if WinkIn = false {

// Start going in...
StartCloseEyeBehaviour(WhichEyeWink,0)
WinkIn = true 
} else if WinkIn = true {
WinkingActive = false
mDriveCollectionMaster.CurrentlyBlinking = true
WhichEyeWink = "neither"
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sniffing

SniffingMod = clamp(SniffingMod,0,100)

//N.B. This controls a single sniff, in and out, with a transition speed, a duration and a power.

if SniffingActive = true {
if SniffInComplete = false {
PauseBreathingBehaviour()
//Play Looped Sniff In Sound Through exAudio. (Fade In)
if SniffSoundStarted = false {
SniffSound = choose("sniff1","sniff2","sniff3","sniff4","sniff5","sniff6")
ex_audio_set_position(SniffSound,oNose1.x,oNose1.y,1)
ex_audio_set_volume(SniffSound,BothVolMod(0.02),10)
ex_audio_set_pitch(SniffSound,random_range(0.9,1.1),0)
ex_audio_play(SniffSound,1)
WriteToLog("Started sniff.")
SniffSoundStarted = true
} else if SniffSoundStarted {
//Transition the nose in and up.
StartScreenShake(1,2,1)
if SniffingMod &lt; 100 {
SniffingMod += SniffRateUp
} else if SniffingMod &gt;= 100 {
SniffInComplete = true
}
}
} else if SniffInComplete = true and SniffComplete = false {

if SniffDuration &gt; 0 {
SniffDuration -= 1
} else if SniffDuration &lt;= 0 {
SniffComplete = true
EndTimer = 20
if ex_audio_is_playing(SniffSound) {
ex_audio_stop(SniffSound)
}
}

} else if SniffComplete = true and SniffInComplete = true {

if SniffOutComplete = false {

if SniffingMod &gt; 0 {
SniffingMod -= SniffRateDown
} else if SniffingMod &lt;= 0 {
SniffOutComplete = true
SniffingMod = 0
}


} else if SniffOutComplete = true {
ResumeBreathingBehaviour()
SniffInTimer = 0
SniffRateUp = 0
SniffRateDown = 0
SniffComplete = false
SniffingMod = 0
SniffInComplete = false
SniffingActive = false
SniffSoundStarted = false
SniffDuration = 0
ex_audio_set_volume("sniff1",0,0)
ex_audio_set_volume("sniff2",0,0)
ex_audio_set_volume("sniff3",0,0)
ex_audio_set_volume("sniff4",0,0)
ex_audio_set_volume("sniff5",0,0)
ex_audio_set_volume("sniff6",0,0)
SniffOutComplete = false
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Number Of Sniffs 

if NumberSniffsActive = true {
if SniffNumber &gt; 0 {
if SniffingActive = false {
StartSniffBehaviour(irandom_range(30,40),irandom_range(45,55),irandom_range(10,30),irandom_range(0.7,0.9))
SniffNumber -= 1
}
} else {
NumberSniffsActive = false
SniffNumber = 0
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Twitching

TwitchingMod = clamp(TwitchingMod,0,100)

//N.B. This controls a single Twitch, in and out, with a transition speed, a duration and a power.

if TwitchingActive = true {
if TwitchInComplete = false {

//Transition the nose in and up.

if TwitchingMod &lt; 100 {
TwitchingMod += TwitchRateUp
} else if TwitchingMod &gt;= 100 {
TwitchInComplete = true
}

} else if TwitchInComplete = true  {
if TwitchOutComplete = false {
if TwitchingMod &gt; 0 {
TwitchingMod -= TwitchRateDown
} else if TwitchingMod &lt;= 0 {
TwitchOutComplete = true
}
} else if TwitchOutComplete = true {
//Fade out the Twitch In Sound and stop.
TwitchInTimer = 0
TwitchRateUp = 0
TwitchRateDown = 0
TwitchComplete = false
TwitchingMod = 0
TwitchInComplete = false
TwitchingActive = false
TwitchOutComplete = false
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Opening Eyes

if OpenEyesActive = true {

if WhichEyeOpen = "both" {
StartEyeMovement(oEyeballLeft,OpenSpeed,9)
StartEyeMovement(oEyeballRight,OpenSpeed,9)
} else if WhichEyeOpen = "left" {
StartEyeMovement(oEyeballLeft,OpenSpeed,9)
} else if WhichEyeOpen = "right" {
StartEyeMovement(oEyeballRight,OpenSpeed,9)
}

OpenSpeed = 0
WhichEyeOpen = "neither"
OpeningEyesActive = false

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Breathing

OutMod = clamp(OutMod,1,2)

if BreathingActive = true {
if BreathStatus = "in" {
if ChosenBreathInOut = false {
ex_audio_class_stop("breathingnoseinhealthy")
ex_audio_class_stop("breathingnoseinsick")
ex_audio_class_stop("breathingmouthinhealthy")
ex_audio_class_stop("breathingmouthinsick")
if mCreatureController.Alive &lt; 30 {
NoseInBreathSound = choose("binnose1h","binnose2h","binnose3h")
MouthInBreathSound = choose("binmouth1s","binmouth2s")
} else {
NoseInBreathSound = choose("binnose1h","binnose2h","binnose3h")
MouthInBreathSound = choose("binmouth1h","binmouth2h","binmouth3h","binmouth4h")
}
ex_audio_set_position(NoseInBreathSound,oNose1.x,oNose1.y,1)
ex_audio_set_position(MouthInBreathSound,oMouthCentre.x,oMouthCentre.y,1)

BreathVol = BothVolMod(0.1)

ex_audio_set_volume(NoseInBreathSound,BothVolMod(BreathVol),30)
ex_audio_set_volume(MouthInBreathSound,BothVolMod(BreathVol),30)
if BreathingType = "both" {
ex_audio_play(NoseInBreathSound,0)
ex_audio_play(MouthInBreathSound,0)
} else if BreathingType = "nose" {
ex_audio_play(NoseInBreathSound,0)
} else if BreathingType = "mouth" {
ex_audio_play(MouthInBreathSound,0)
}
ChosenBreathInOut = true
} 

if BreathTimeAmount &lt; BreathTime {
BreathTimeAmount += (1 * BreathRate)
mInterfaceController.BreathYMod += (1 * BreathRate)
ex_audio_set_position(NoseInBreathSound,oNose1.x,oNose1.y,1)
ex_audio_set_position(MouthInBreathSound,oMouthCentre.x,oMouthCentre.y,1)
ex_audio_set_volume(NoseInBreathSound,BothVolMod(BreathVol))
ex_audio_set_volume(MouthInBreathSound,BothVolMod(BreathVol))
} else if BreathTimeAmount &gt;= BreathTime {
BreathTimeAmount = BreathTime
BreathStatus = "hold"
ChosenBreathInOut = false
ex_audio_class_set_volume("breathingnoseinsick",0,10)
ex_audio_class_set_volume("breathingnoseinhealthy",0,10)
ex_audio_class_set_volume("breathingmouthinsick",0,10)
ex_audio_class_set_volume("breathingmouthinhealthy",0,10)
}
} else if BreathStatus = "hold" {
if BreathHold &gt; 0 {
BreathHold -= 1
OutMod += 0.01
} else if BreathHold &lt;= 0 {
BreathStatus = "out"
}
} else if BreathStatus = "out" {
if ChosenBreathInOut = false {
ex_audio_class_stop("breathingnoseouthealthy")
ex_audio_class_stop("breathingnoseoutsick")
ex_audio_class_stop("breathingmouthouthealthy")
ex_audio_class_stop("breathingmouthoutsick")
if mCreatureController.Alive &lt; 30 {
NoseOutBreathSound = choose("bonose1h","bonose2h","bonose3h")
MouthOutBreathSound = choose("bomouth1s","bomouth2s","bomouth3s")
} else {
NoseOutBreathSound = choose("bonose1h","bonose2h","bonose3h")
MouthOutBreathSound = choose("bomouth1h","bomouth2h","bomouth3h")
}
ex_audio_set_position(NoseOutBreathSound,oNose1.x,oNose1.y,1)
ex_audio_set_position(MouthOutBreathSound,oMouthCentre.x,oMouthCentre.y,1)
ex_audio_set_volume(NoseOutBreathSound,BothVolMod(BreathVol), 30)
ex_audio_set_volume(MouthOutBreathSound,BothVolMod(BreathVol), 30)
if BreathingType = "both" {
ex_audio_play(NoseOutBreathSound,0)
ex_audio_play(MouthOutBreathSound,0)
} else if BreathingType = "mouth" {
ex_audio_play(MouthOutBreathSound,0)
} else if BreathingType = "nose" {
ex_audio_play(NoseOutBreathSound,0)
}
ChosenBreathInOut = true
}

if BreathTimeAmount &gt; 0 {
BreathInColdAir(BreathingType)
BreathTimeAmount -= (1 * BreathRate)
mInterfaceController.BreathYMod -= (1 * BreathRate)
ex_audio_set_position(NoseOutBreathSound,oNose1.x,oNose1.y,1)
ex_audio_set_position(MouthOutBreathSound,oMouthCentre.x,oMouthCentre.y,1)
ex_audio_set_volume(NoseOutBreathSound,BothVolMod(BreathVol))
ex_audio_set_volume(MouthOutBreathSound,BothVolMod(BreathVol))
} else if BreathTimeAmount &lt;= 0 {
BreathTimeAmount = 0
OutMod = 1
BreathHold = BreathHoldAmount
ChosenBreathInOut = false
BreathStatus = "in"
ex_audio_class_set_volume("breathingnoseoutsick",0,10)
ex_audio_class_set_volume("breathingnoseouthealthy",0,10)
ex_audio_class_set_volume("breathingmouthoutsick",0,10)
ex_audio_class_set_volume("breathingmouthouthealthy",0,10)
}
}
} else if BreathingActive = false {
if mInterfaceController.BreathYMod != 0 {
if mInterfaceController.BreathYMod &gt; 0 {
mInterfaceController.BreathYMod -= 2
} else if mInterfaceController.BreathYMod &lt; 0 {
mInterfaceController.BreathYMod += 2
} else {
mInterfaceController.BreathYMod = 0
}
}
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swallowing

if SwallowingActive = true {
if oThroat.SwallowTrackPos &lt; 50 {
oThroat.SwallowTrackPos += SwallowRate
}

if oThroat.SwallowTrackPos &gt;= 50 and SwallowHolding = false {
if SwallowHold &gt; 0 {
SwallowHold -= 1
} else if SwallowHold &lt;= 0 {
SwallowHolding = true
ex_audio_set_position("swallow",oThroat.x,oThroat.y,1)
ex_audio_set_volume("swallow",BothVolMod(0.07),0)
ex_audio_play("swallow",0)
}
}

if oThroat.SwallowTrackPos &gt;= 50 and SwallowHolding = true {
oThroat.SwallowTrackPos += SwallowRate
if oThroat.SwallowTrackPos &gt;= 100 {
SwallowRate = 1
SwallowHolding = false
SwallowHold = 1
oThroat.SwallowTrackPos = 0
mDriveCollectionMaster.CurrentlyBreathing = true
if DrainLiquidSwallow = true {
with oBottomHeadDrip {
part_emitter_region(PartCaulSys,CaulEmit,x - (oCaulJug.sprite_width / 2),x + (oCaulJug.sprite_width / 2),
y - (oCaulJug.sprite_height / 2),y + (oCaulJug.sprite_height / 2),ps_shape_ellipse,ps_distr_gaussian)
part_emitter_burst(PartCaulSys,CaulEmit,CaulPart,random_range(200,400))
}
}
WriteToLog("Swallowed.")
SwallowingActive = false
DrainLiquidSwallow = false
}
}

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open Mouth

if OpenMouthActive = true {

OMTarget = clamp(OMTarget,0,0.3)

if oMouthCentre.BaseXScale &lt; OMTarget {
oMouthCentre.BaseXScale += OMRate
} else {
OpenMouthActive = false
OMTarget = 0
OMRate = 0
}
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Close Mouth

if CloseMouthActive = true {

CMTarget = clamp(CMTarget,0,100)

if oMouthCentre.BaseXScale &gt; CMTarget {
oMouthCentre.BaseXScale -= (1 * CMRate)
} else {
CloseMouthActive = false
CMTarget = 0
CMRate = 0
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slipping

if SlippingActive = true {
if FinishedSlip = false {
if SlipAmount &gt; 0 {
mInterfaceController.SlipMod += SlipRate
SlipAmount -= SlipRate
} else {
FinishedSlip = true
SlipModStart = mInterfaceController.SlipMod
}
} else if FinishedSlip = true {
if ReturnTimer &lt; ReturnRate {
ReturnTimer += 1
mInterfaceController.SlipMod = ease_inout_sine(ReturnTimer,SlipModStart,-SlipModStart,ReturnRate)
} else {
mInterfaceController.SlipMod = 0
WriteToLog("Slipped.")
SlippingActive = false
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shivering

if ShiveringActive = true {
if ShiveringTime &gt; 0 {
ShiveringTime -= 1 
StartScreenShake(5,ShiveringIntensity,ShiveringSideTime)
} else if ShiveringTime &lt;= 0 {
StopShiverBehaviour()
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Yawning

if YawningActive = true {
if StoppingYawning = false {
if StartedYawn = false {
FinishBreatheBehaviour()
if mBehavioursReactive.BreathingActive = false {
if YawningEyes = "squint" {
EyeSquint(irandom_range(1,3),false,0)
} else if YawningEyes = "shut" {
if mBehavioursReactive.Sleeping = false {
StartCloseEyeBehaviour("both",3)
}
}
mCreatureController.BaseTiredness += 3  * mPlotController.ISModifier
StartBreatheBehaviour(YawningRate,YawningTime,YawningHold,"mouth")
ex_audio_class_set_volume("breathingnoseinhealthy",BothVolMod(0.3))
ex_audio_class_set_volume("breathingnoseinsick",BothVolMod(0.3))
ex_audio_class_set_volume("breathingmouthinhealthy",BothVolMod(0.3))
ex_audio_class_set_volume("breathingmouthinsick",BothVolMod(0.3))
ex_audio_class_set_volume("breathingnoseouthealthy",BothVolMod(0.3))
ex_audio_class_set_volume("breathingnoseoutsick",BothVolMod(0.3))
ex_audio_class_set_volume("breathingmouthouthealthy",BothVolMod(0.3))
ex_audio_class_set_volume("breathingmouthoutsick",BothVolMod(0.3))



StartedYawn = true
}
} else if StartedYawn = true {
if BreathStatus = "out" and BreathTimeAmount &lt;= 0 {
FinishBreatheBehaviour()
if mBehavioursReactive.Sleeping = false {
StartOpenEyeBehaviour("both",3)
}
if YawningEyes = "squint" and SquintingActive = true {
StopEyeSquint(false)
}
StartBlinkBehaviour()
YawningActive = false
YawningEyes = "none"
YawningRate = 0
YawningHold = 0
YawningTime = 0
YawnBlinkNumber = 0
StoppingYawning = false
StartedYawn = false
}
}

} else if StoppingYawning = true {
FinishBreatheBehaviour()
StartOpenEyeBehaviour("both",3)
if YawningEyes = "squint" {
if SquintingActive = true {
StopEyeSquint(false)
}
}
StartBlinkBehaviour()
YawningActive = false
YawningEyes = "none"
YawningRate = 0
YawningHold = 0
YawningTime = 0
YawnBlinkNumber = 0
StoppingYawning = false
StartedYawn = false
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Squinting

if SquintingActive = true {
oEyeballLeft.MaxOpenIndex = DesiredSquintLevel
oEyeballRight.MaxOpenIndex = DesiredSquintLevel

if oCheekLeft.SquintMod &lt; 30 {
oCheekLeft.SquintMod += 0.5
}

if oCheekRight.SquintMod &lt; 30 {
oCheekRight.SquintMod += 0.5
}
if SquintingTimed = true {
if SquintTime &gt; 0 {
SquintTime -= 1
} else if SquintTime &lt;= 0 {
StopEyeSquint(false)
}
}
} else {

if oCheekLeft.SquintMod &gt; 0 {
oCheekLeft.SquintMod -= 1
}

if oCheekRight.SquintMod &gt; 0 {
oCheekRight.SquintMod -= 1
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sleeping And Waking 

if SleepingActive = true {
if Sleeping = false {
if Blinks &gt; 0 and BlinkingActive = false  {
StartBlinkBehaviour()
Blinks -= 1
} else if Blinks = 0 {
if BlinkingActive = false {
StartCloseEyeBehaviour("both", 0)
if oEyelidUpperRight.image_index = 0 {
Blinks = 0
mDriveCollectionMaster.CurrentlyWinking = false
mDriveCollectionMaster.CurrentlyBlinking = false
mDriveCollectionMaster.CurrentlySquinting = false
Sleeping = true
DreamOrNot = random_range(-1,1) + ((0.5 / 100) * (100 - mCreatureController.Alive))
if DreamOrNot = 1 {
DreamingActive = true
DreamCDComp = false
DreamCountdown = irandom_range(30000,40000)
} else {
DreamingActive = false
}
}
}
}
} else if Sleeping = true {

if SleepDroopYCurrent &lt; SleepDroopY {
SleepDroopYCurrent += 1
}

if mEmotionSubController.AngerBaseActivation &gt; 0 {
mEmotionSubController.AngerBaseActivation -= 0.001
}

if mEmotionSubController.FearBaseActivation &gt; 0 {
mEmotionSubController.FearBaseActivation -= 0.001
}

if mCreatureController.BaseStress &gt; 0 {
mCreatureController.BaseStress -= 0.06 
}

if DreamingActive = false {
if mCreatureController.BaseTiredness &gt; 0 {
mCreatureController.BaseTiredness -= 0.001  * mPlotController.ISModifier
}
} else {
if mCreatureController.BaseTiredness &gt; 0 {
mCreatureController.BaseTiredness -= 0.002
}
}

if mCreatureController.BasePain &gt; 0 {
mCreatureController.BasePain -= 0.001 * mDriveCollectionMaster.ISModifier
}


//Wake Up Naturally If Tiredness Is Low Enough

if mCreatureController.BaseTiredness &lt;= 3 {
StopSleepBehaviour(irandom_range(1,4),false)
}
}
}

//Waking Up
if SleepingActive = false and Sleeping = true {

if SuddenWaking = false {
StartOpenEyeBehaviour("both",10)
} else if SuddenWaking = true {
StartOpenEyeBehaviour("both",20)
}
if Chance(50) {
RandomShake()
}
if Chance(40) {
StartTwitchNoseSideBehaviour(irandom_range(20,80))
}
mDriveCollectionMaster.CurrentlyBlinking = true
mDriveCollectionMaster.CurrentlyWinking = true
mDriveCollectionMaster.CurrentlySquinting = true
Sleeping = false
SuddenWaking = false
Blinks = 0
DreamCountdown = 0
Dreaming = false
}


if SleepingActive = false and Sleeping = false {
if SleepDroopYCurrent &gt; 0 {
SleepDroopYCurrent -= 14
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eyebrow Twitch Left

if EyebrowTwitchLActive = true {
if EBLTwitchDir = "up" {
if oBrowLeft.TwitchMod &lt; 40 {
oBrowLeft.TwitchMod += EBLTwitchRate
} else if oBrowLeft.TwitchMod &gt;= 40 {
EBLTwitchDir = "down"
}
} else if EBLTwitchDir = "down" {
if oBrowLeft.TwitchMod &gt; 0 {
oBrowLeft.TwitchMod -= EBLTwitchRate
} else if oBrowLeft.TwitchMod &lt;= 0 {
oBrowLeft.TwitchMod = 0
EBLTwitchDir = "up"
EyebrowTwitchLActive = false
}
}
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eyebrow Twitch Right

if EyebrowTwitchRActive = true {
if EBRTwitchDir = "up" {
if oBrowRight.TwitchMod &lt; 40 {
oBrowRight.TwitchMod += EBRTwitchRate
} else if oBrowRight.TwitchMod &gt;= 40 {
EBRTwitchDir = "down"
}
} else if EBRTwitchDir = "down" {
if oBrowRight.TwitchMod &gt; 0 {
oBrowRight.TwitchMod -= EBRTwitchRate
} else if oBrowRight.TwitchMod &lt;= 0 {
oBrowRight.TwitchMod = 0
EBRTwitchDir = "up"
EyebrowTwitchRActive = false
}
}
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Twitch Mouth Centre

if MCTwitchActive = true {
if MCTwitchDir = "out" {
if oMouthCentre.TwitchDiff &lt; MCTwitchAmount {
oMouthCentre.TwitchDiff += MCTwitchSpeed
} else if oMouthCentre.TwitchDiff &gt;= MCTwitchAmount {
MCTwitchDir = "in"
}
} else if MCTwitchDir = "in" {
if oMouthCentre.TwitchDiff &gt; 0 {
oMouthCentre.TwitchDiff -= MCTwitchSpeed
} else if oMouthCentre.TwitchDiff &lt;= 0 {
MCTwitchDir = "out"
MCTwitchAmount = 0
MCTwitchSpeed = 0
MCTwitchActive = false
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Twitch Mouth Side Left

if MSLTwitchActive = true {
if MSLTwitchDir = "up" {
if MSLTwitchCurrentDir = 1 {
if oMouthLeft.TwitchBend &lt; 40 {
oMouthLeft.TwitchBend += MSLTwitchRate
} else if oMouthLeft.TwitchBend &gt;= 40 {
MSLTwitchCurrentDir = 2
}
} else if MSLTwitchCurrentDir = 2 {
if oMouthLeft.TwitchBend &gt; 0 {
oMouthLeft.TwitchBend -= MSLTwitchRate
} else if oMouthLeft.TwitchBend &lt;= 0 {
MSLTwitchActive = false
MSLTwitchDir = "none"
MSLTwitchCurrentDir = 1
}
}
} else if MSLTwitchDir = "down" {
if MSLTwitchCurrentDir = 1 {
if oMouthLeft.TwitchBend &gt; -40 {
oMouthLeft.TwitchBend -= MSLTwitchRate
} else if oMouthLeft.TwitchBend &lt;= -40 {
MSLTwitchCurrentDir = 2
}
} else if MSLTwitchCurrentDir = 2 {
if oMouthLeft.TwitchBend &lt; 0 {
oMouthLeft.TwitchBend += MSLTwitchRate
} else if oMouthLeft.TwitchBend &gt;= 0 {
MSLTwitchActive = false
MSLTwitchDir = "none"
MSLTwitchCurrentDir = 1
}
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Twitch Mouth Side Right

if MSRTwitchActive = true {
if MSRTwitchDir = "up" {
if MSRTwitchCurrentDir = 1 {
if oMouthRight.TwitchBend &lt; 40 {
oMouthRight.TwitchBend += MSRTwitchRate
} else if oMouthRight.TwitchBend &gt;= 40 {
MSRTwitchCurrentDir = 2
}
} else if MSRTwitchCurrentDir = 2 {
if oMouthRight.TwitchBend &gt; 0 {
oMouthRight.TwitchBend -= MSRTwitchRate
} else if oMouthRight.TwitchBend &lt;= 0 {
MSRTwitchActive = false
MSRTwitchDir = "none"
MSRTwitchCurrentDir = 1
}
}
} else if MSRTwitchDir = "down" {
if MSRTwitchCurrentDir = 1 {
if oMouthRight.TwitchBend &gt; -40 {
oMouthRight.TwitchBend -= MSRTwitchRate
} else if oMouthRight.TwitchBend &lt;= -40 {
MSRTwitchCurrentDir = 2
}
} else if MSRTwitchCurrentDir = 2 {
if oMouthRight.TwitchBend &lt; 0 {
oMouthRight.TwitchBend += MSRTwitchRate
} else if oMouthRight.TwitchBend &gt;= 0 {
MSRTwitchActive = false
MSRTwitchDir = "none"
MSRTwitchCurrentDir = 1
}
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cheek Twitch Left

if CheekTwitchLActive = true {
if CheekTwitchLDir = "up" {
if oCheekLeft.TwitchMod &lt; 20 {
oCheekLeft.TwitchMod += CheekTwitchLRate
} else if oCheekLeft.TwitchMod &gt;= 20 {
CheekTwitchLDir = "down"
}
} else if CheekTwitchLDir = "down" {
if oCheekLeft.TwitchMod &gt; 0 {
oCheekLeft.TwitchMod -= CheekTwitchLRate
} else if oCheekLeft.TwitchMod &lt;= 0 {
oCheekLeft.TwitchMod = 0
CheekTwitchLDir = "up"
CheekTwitchLActive = false
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cheek Twitch Right

if CheekTwitchRActive = true {
if CheekTwitchRDir = "up" {
if oCheekRight.TwitchMod &lt; 20 {
oCheekRight.TwitchMod += CheekTwitchRRate
} else if oCheekRight.TwitchMod &gt;= 20 {
CheekTwitchRDir = "down"
}
} else if CheekTwitchRDir = "down" {
if oCheekRight.TwitchMod &gt; 0 {
oCheekRight.TwitchMod -= CheekTwitchRRate
} else if oCheekRight.TwitchMod &lt;= 0 {
oCheekRight.TwitchMod = 0
CheekTwitchRDir = "up"
CheekTwitchRActive = false
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Caul Vibrate

if CaulVibrateActive = true {
if CVSoundSetup = false {
ex_audio_set_volume("cvibrate",BothVolMod(0.03),0)
ex_audio_set_position("cvibrate",oCaulNub.x,oCaulNub.y,1)
ex_audio_play("cvibrate",1)
CVSoundSetup = true 
}

if CaulVibrateAmount &gt; 0 {
ex_audio_set_volume("cvibrate",BothVolMod(0.03),0)
ex_audio_set_position("cvibrate",oCaulNub.x,oCaulNub.y,1)
CaulVibrateAmount -= 1
with oCaulNub {
if VibrateDir = "left" {
if VibrateMod &gt; -0.7 {
VibrateMod -= 0.7
BendPercentage -= 4
StretchPercentage -= 4
} else if VibrateMod &lt;= -0.7 {
VibrateDir = "right"
}
} else if VibrateDir = "right" {
if VibrateMod &lt; 0.7 {
VibrateMod += 0.7
BendPercentage += 4
StretchPercentage += 4
} else if VibrateMod &gt;= 0.7 {
VibrateDir = "left"
}
}
}

} else if CaulVibrateAmount &lt;= 0 {
oCaulNub.VibrateMod = 0
CaulVibrateAmount = 0
CaulVibrateActive = false
CVSoundSetup = false
ex_audio_stop("cvibrate")
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sneezing 

MouthSneezeMod = clamp(MouthSneezeMod,0,0.07)
CheekSneezeMod = clamp(CheekSneezeMod,0,30)

if SneezeActive = true {
if SneezePos = "in" {
if ClosingEyesSneeze = false {
if mBehavioursReactive.Sleeping = false {
StartCloseEyeBehaviour("both",2)
}
SnotsToCreate = irandom_range(3,5)
NoseInBreathSoundS = choose("sneezebreath1", "sneezebreath2","sneezebreath3")
ex_audio_set_position(NoseInBreathSoundS,oNose1.x,oNose1.y,1)
ex_audio_set_volume(NoseInBreathSoundS,BothVolMod(0.9),0)
ex_audio_play(NoseInBreathSoundS,1)
ClosingEyesSneeze = true
}


if SniffingMod &lt; 100 {
SniffingMod += SneezeSpeedIn
}
if CheekSneezeMod &lt; 30 {
CheekSneezeMod += SneezeSpeedIn
}
if MouthSneezeMod &lt; 0.07 {
MouthSneezeMod += (SneezeSpeedIn / 1000)
}

if SniffingMod &gt;= 100 and CheekSneezeMod &gt;= 30 and MouthSneezeMod &gt;= 0.05 {
SneezePos = "hold"
ex_audio_stop(NoseInBreathSoundS)
}

} else if SneezePos = "hold" {
if SneezeHold &gt; 0 {
SneezeHold -= 1
} else if SneezeHold &lt;= 0 {
mCreatureController.Dirt += 3
SneezePos = "out" 

ex_audio_class_set_volume("sneezes",BothVolMod(0.9),0)
ex_audio_class_set_position("sneezes",oMouthCentre.x,oMouthCentre.y,1)
ex_audio_class_play_unique("sneezes",0.9,1.1)
StartScreenShake(2,9,1)
CreateParticleSplash(oTLNostril.x,oTLNostril.y,oTLNostril.sprite_width,ps_shape_ellipse,ps_distr_invgaussian,c_black,30,40,0.1,0.2,210,330,30,60,0.0005,200)
CreateParticleSplash(oMLNostril.x,oMLNostril.y,oMLNostril.sprite_width,ps_shape_ellipse,ps_distr_invgaussian,c_black,30,40,0.1,0.2,210,330,30,60,0.0005,200)
CreateParticleSplash(oTRNostril.x,oTRNostril.y,oTRNostril.sprite_width,ps_shape_ellipse,ps_distr_invgaussian,c_black,30,40,0.1,0.2,210,330,30,60,0.0005,200)
CreateParticleSplash(oMRNostril.x,oMRNostril.y,oMRNostril.sprite_width,ps_shape_ellipse,ps_distr_invgaussian,c_black,30,40,0.1,0.2,210,330,30,60,0.0005,200)
}

} else if SneezePos = "out" {

if SniffingMod &gt; 0 {
SniffingMod -= SneezeSpeedIn
}
if CheekSneezeMod &gt; 0 {
CheekSneezeMod -= SneezeSpeedIn
}
if MouthSneezeMod &gt; 0 {
MouthSneezeMod -= (SneezeSpeedIn / 1000)
}

if SniffingMod &lt;= 0 and CheekSneezeMod &lt;= 0 and MouthSneezeMod &lt;= 0 {
if mBehavioursReactive.Sleeping = false {
StartOpenEyeBehaviour("both",0)
}
ResumeBreathingBehaviour()
SniffingMod = 0
oNose1.Redness += 0.09
CheekSneezeMod = 0
ClosingEyesSneeze = false
MouthSneezeMod = 0
SneezeSpeedIn = 0
SneezeHold = 0
SneezeSpeedOut = 0
SneezePos = "in"
SneezeActive = false
if mBehavioursReactive.Sleeping = false {
mDriveCollectionMaster.CurrentlyBlinking = true
mDriveCollectionMaster.CurrentlyWinking = true
mDriveCollectionMaster.CurrentlySquinting = true
if Chance(40) {
RandomShake()
}
}
}
}
} else {

if SniffingMod &gt; 0 {
SniffingMod -= 10
}
if CheekSneezeMod &gt; 0 {
CheekSneezeMod -= 10
}
if MouthSneezeMod &gt; 0 {
MouthSneezeMod -= (10 / 1000)
}
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dreaming

if Sleeping = true {
if DreamingActive = true {
if DreamCDComp = false {
if DreamCountdown &gt; 0 {
DreamCountdown -= 1
} else if DreamCountdown &lt;= 0 {
DreamCDComp = true
DreamTimerBase = irandom_range(400,3000)
DreamTimer = DreamTimerBase - ((DreamTimerBase / 2) / 100) * (100 - mCreatureController.Alive)
}
} else {
//Actual Dreaming Behaviour
if DreamTimer &gt; 0 {
DreamTimer -= 1
} else if DreamTimer &lt;= 0 {
CurrentOption = choose("twitchbrowleft","twitchbrowright","twitchbrowboth","twitchcheekleft",
"twitchcheekright","twitchcheekboth","twitchnose","blink","twitchmouth","twitchleftmouth",
"twitchrightmouth","voc","swallow")
if mCreatureController.Lust &gt; 50 {
CurrentOption = choose(CurrentOption,"vibratecaul","fillandemptycaul",CurrentOption,CurrentOption,CurrentOption,CurrentOption,CurrentOption,CurrentOption,CurrentOption,CurrentOption,CurrentOption,CurrentOption)
}
switch CurrentOption {
case "twitchbrowleft":
StartEyebrowTwitchLeftBehaviour()
break; 
case "twitchbrowright":
StartEyebrowTwitchRightBehaviour()
break; 
case "twitchbrowboth":
StartEyebrowTwitchLeftBehaviour()
StartEyebrowTwitchRightBehaviour()
break; 
case "twitchcheekleft":
StartCheekTwitchLeftBehaviour()
break; 
case "twitchcheekright":
StartCheekTwitchRightBehaviour()
break; 
case "twitchcheekboth":
StartCheekTwitchLeftBehaviour()
StartCheekTwitchRightBehaviour()
break; 
case "twitchnose":
StartTwitchBehaviour(random_range(2,4),random_range(2,4),random_range(0.8,1.8))
break;
case "blink":
StartBlinkBehaviour()
break; 
case "twitchmouth":
StartMouthCentreTwitchBehaviour(0.03,random_range(0.03,0.13))
break; 
case "twitchleftmouth":
StartMouthSideLeftTwitchBehaviour(choose("up","down"))
break; 
case "twitchrightmouth":
StartMouthSideRightTwitchBehaviour(choose("up","down"))
break; 
case "voc":
StartVocalisation(choose("shorthigh","shortlow"),random_range(0.3,0.6),choose("rise","fall","risefall","same","fallrise"),60)
break; 
case "vibratecaul":
StartCaulVibrateBehaviour(irandom_range(60,120))
break; 
case "swallow":
StartSwallowBehaviour(2,5)
}

EmotionToChange = choose("happy","sad","anger","fear","shame","surprise","none")

switch EmotionToChange {
case "happy":
ChangeEmotion("happy","up",random_range(2,4),((20 / 100) * (mCreatureController.Triad * 100)) + ((20 / 100) * (mCreatureController.Trust * 100)))
break;
case "sad":
ChangeEmotion("sad","up",random_range(2,4),((-20 / 100) * (mCreatureController.Triad * 100)) + ((-20 / 100) * (mCreatureController.Trust * 100)))
break;
case "anger":
ChangeEmotion("anger","up",random_range(2,4),((-20 / 100) * (mCreatureController.Triad * 100)) + ((-20 / 100) * (mCreatureController.Trust * 100)))
break;
case "fear":
ChangeEmotion("fear","up",random_range(2,4),((-20 / 100) * (mCreatureController.Triad * 100)) + ((-20 / 100) * (mCreatureController.Trust * 100)))
break;
case "shame":
ChangeEmotion("shame","up",random_range(2,4),((-20 / 100) * (mCreatureController.Triad * 100)) + ((-20 / 100) * (mCreatureController.Trust * 100)))
break;
}


DreamTimerBase = irandom_range(400,3000)
DreamTimer = DreamTimerBase - ((DreamTimerBase / 2) / 100) * (100 - mCreatureController.Alive)
}

}
}
} else {
DreamingActive = false
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Coughing

if CoughingActive = true {
if SetupCough = false {
HoldBreathFor(30)
CoughCloseEyes = choose(-1,1,1)
if CoughCloseEyes = 1 {
if mBehavioursReactive.Sleeping = false {
StartCloseEyeBehaviour("both",0)
}
}
StartOpenMouthBehaviour(0.15,irandom_range(60,80))
ex_audio_set_volume(CoughSound,BothVolMod(0.4),1)
ex_audio_set_position(CoughSound,oMouthCentre.x,oMouthCentre.y,1)
SetupCough = true
} else if SetupCough = true {
if TriggerCough = false {
ex_audio_play(CoughSound,0)

if mCreatureController.Alive &lt; 50 {
if Chance(20 + ((80 / 100) * (100 - mCreatureController.Alive))) {
part_type_colour1(mCreatureController.CoughPart,DebugRedTextColour)
} else {
part_type_colour1(mCreatureController.CoughPart,c_black)
} 
} else {
part_type_colour1(mCreatureController.CoughPart,c_black)
}


part_emitter_region(mCreatureController.PartBreathSys,mCreatureController.BreathEmit,oMouthCentre.x - (oMouthCentre.sprite_width / 2) - 10, oMouthCentre.x,oMouthCentre.y,oMouthCentre.y + (oMouthCentre.sprite_width / 2) - 5,ps_shape_ellipse,ps_distr_gaussian)
part_emitter_burst(mCreatureController.PartBreathSys,mCreatureController.BreathEmit,mCreatureController.CoughPart,400)
StartScreenShake(60,10,2)
CoughTimer = 30
mCreatureController.Dirt += 0.5
TriggerCough = true
} else if TriggerCough = true {
if CoughTimer &gt; 0 {
CoughTimer -= 1 
} else if CoughTimer &lt;= 0 {
if CoughCloseEyes = 1 {
if mBehavioursReactive.Sleeping = false {
StartOpenEyeBehaviour("both",0)
}
}
CoughingActive = false
mDriveCollectionMaster.CurrentlyBreathing = true
if Chance(40) {
RandomShake()
}
}
}
}

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
