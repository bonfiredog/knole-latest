<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCloud1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

depth = choose(AnatomyLayer2, AnatomyLayer2 + 0.06)
x = oCloudEmitter.x
y = (random_range(-200,oCloudEmitter.y + 200))
OriginalY = y

image_xscale = random_range(1,1.4)
image_yscale = image_xscale

StartingSpeed = ((mWeatherSubController.SimpleWindS * 2) / room_speed)
speed = StartingSpeed
direction = SimpleWindDAsDirection()

if depth = AnatomyLayer2 {
image_alpha = 0.85
} else if depth &gt; AnatomyLayer2 and depth &lt;= AnatomyLayer2 + 0.05 {
image_alpha = 0.75
} else if depth &gt; AnatomyLayer2 + 0.05 {
image_alpha = 0.65
}
OriginalAlpha = image_alpha
InRoom = false

SpriteChoice1 = choose(
sCloud1,
sCloud2,
sCloud3,
sCloud4,
sCloud5,
sCloud6,
sCloud7,
sCloud8,
sCloud9,
sCloud10,
sCloud11,
sCloud12,
sCloud13,
sCloud14,
sCloud15,
sCloud16
)

SpriteChoice2 = choose(sCloud17,
sCloud18,
sCloud19,
sCloud20,
sCloud21,
sCloud22,
sCloud23,
sCloud24,
sCloud25,
sCloud26,
sCloud27,
sCloud28,
sCloud29,
sCloud30,
sCloud31,
sCloud32
)

sprite_index = choose(SpriteChoice1,SpriteChoice2)

alarm[0] = 30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delete Upon Exiting Room

//If inside room at all, set in room. If has come inside room and then goes outside room (depending on wind speed) destroy it.

if mWeatherSubController.SimpleWindD = -1 {
if InRoom = false 
and (bbox_left &lt; room_width)
{InRoom = true}

if InRoom = true and
(bbox_right &lt; 0)
{
instance_destroy()
}
}

if mWeatherSubController.SimpleWindD = 1 {
if InRoom = false 
and (bbox_right &gt; 0)
{InRoom = true}

if InRoom = true and
(bbox_left &gt; room_width)
{
instance_destroy()
}
}

alarm[0] = 30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Y According To In/Out, Disappear.

if mInterfaceController.ChangingView = false {
if mInterfaceController.CurrentView = MicroView {
ZoomMod = 300
} else {
ZoomMod = 0 
}
} else {

if mInterfaceController.ChangingTo = "Micro" {
ZoomMod = (100 / mInterfaceController.ZoomRate) * mInterfaceController.ZoomTimer
} else {
ZoomMod = 100 - ((100 / mInterfaceController.ZoomRate) * mInterfaceController.ZoomTimer)
}
}

ZoomMod = clamp(ZoomMod,0,100)

DisappearMod = 100 - ((100 / 100) * mBehavioursDeliberative.PercentForward)
DisappearMod = clamp(DisappearMod,0,100)

y = OriginalY - ZoomMod - DisappearMod - mInterfaceController.JumpMod + mInterfaceController.SlipMod + mInterfaceController.DeadMod + mBehavioursReactive.SleepDroopYCurrent + mInterfaceController.FloatModY
image_alpha = 1 - (DisappearMod / 100)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
