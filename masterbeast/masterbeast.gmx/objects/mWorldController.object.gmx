<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

depth = ViewportFilterLayer
x = ControllerObjectX
y = ControllerObjectY

date_set_timezone(timezone_local)

ThisPeriodWindS = "null"
ThisPeriodWindD = "null"
ThisPeriodTemp = "null"
ThisPeriodWT = "null"
ThisPeriodHumidity = "null"

NextPeriodWindS = "null"
NextPeriodWindD = "null"
NextPeriodTemp = "null"
NextPeriodWT = "null"
NextPeriodHumidity = "null"

CurrentWindSound = "none"
NextWindSound = "none"
CurrentWeatherSound = "none"
NextWeatherSound = "none"

CurrentTemp = 0
CurrentWindS = 0
CurrentWindD = 0
CurrentWTMod = 0
CurrentHumidity = 0

//-------------------Session Time Setup
CurrentSessionBaseTime = 0
Seconds = 0
Minutes = 0
Hours = 0
Days = 0

//-------------------Current Hour Setup
CurrentHour = 0
CurrentMinute = 0
CurrentSecond = 0
CurrentTOD = "Morning"

//-------------------Current Date Setup
CurrentWeekday = "Sunday"
CurrentDay = 0
CurrentMonth = "January"
CurrentYear = "2016"
CurrentTOY = "Spring"

//-------------------Debug Variables
global.MicrophoneNotSupported = false
EventLogActive = false
CurrentWeatherMod = 0
NextWeatherMod = 0

//-------------------Viewport Initial Variables

ViewportZoomedInMin = 0.3
ViewportZoomedInMax = 0.4

ViewportZoomedOutMin = 1.3
ViewportZoomedOutMax = 1.5

ViewportMinScale = ViewportZoomedOutMin
ViewportMaxScale = ViewportZoomedOutMax
CurrentViewportScale = ViewportMinScale
CurrentViewportAlpha = 1
ViewportFlickerTimeToWait = irandom_range(10,50)
ViewportResult = 0.8
ViewportFlickerChanging = false
FilterOn = true
FlickerActive = true

//-------------------SunMoon Setup
InitialSunMoonSetup = false
TodaySunCreated = false
TodayMoonCreated = false

//Sunrise
TodaySunriseHour = 0
TodaySunriseMinute = 0

//Sunset
TodaySunsetHour = 0
TodaySunsetMinute = 0

TodayLength = 0
TodaySunshineLength = 0
CurrentSunMinute = 0
SunMinuteCounted = false
StartWithSun = false
StartWithMoon = false

//Moon
TonightMoonPhase = "null"

LatestMicVolume = 0

//-----------Twilight

CurrentTwilightMinute = 0
TriggeredTwilightMinute = false

//Morning Twilight
ThisMorningTwilightStartHour = 0
ThisMorningTwilightStartMinute = 0
ThisMorningTwilightEndHour = 0
ThisMorningTwilightEndMinute = 0
MorningTwilightInProgress = false

//Evening Twilight
ThisEveningTwilightStartHour = 0
ThisEveningTwilightStartMinute = 0
ThisEveningTwilightEndHour = 0
ThisEveningTwilightEndMinute = 0
EveningTwilightInProgress = false

//------------------Create Orientation Points
instance_create(x,y,mCentreOfRoom)

//-----------------Weather Variables
WeatherChange = false
WeatherDoubleCheck = false
WeatherMinuteProgress = false

//----------------------------- Enviro Lighting Variables

instance_create(x,y,mEnviroLight)
CurrentEnviroLightAlpha = 0.5
CurrentEnviroLightColour = c_orange
ObjectLightingOn = true
alarm[0] = 40
LightLevelInMB = 0 
LightLevelInRL = 0

//----------------------------- Liquid Global Variables

WobbleDirection = "left"
WobbleDuration = 20
WobbleTimer = WobbleDuration

HighestVolume = 0
SoundThreshold = 3000
LoudSoundThreshold = 7000

CreatingDrop = false

///Get Initial Weather Values

//--------- Get weather for the first time. 

CurrentWeatherSound = "none"
NextWeatherSound = "none"

TodayMidnightWindD = "NNE"
TodayMidnightWindS = 10
TodayMidnightWT = 1
TodayMidnightTemp = 20
TodayMidnightHumidity = 30

Today3amWindD = "NNE"
Today3amWindS = 10
Today3amWT = 1
Today3amTemp = 20
Today3amHumidity = 30

Today6amWindD = "NNE"
Today6amWindS = 10
Today6amWT = 1
Today6amTemp = 20
Today6amHumidity = 30

Today9amWindD = "NNE"
Today9amWindS = 10
Today9amWT = 1
Today9amTemp = 20
Today9amHumidity = 30

TodayMiddayWindD = "NNE"
TodayMiddayWindS = 10
TodayMiddayWT = 1
TodayMiddayTemp = 20
TodayMiddayHumidity = 30

Today3pmWindD = "NNE"
Today3pmWindS = 10
Today3pmWT = 1
Today3pmTemp = 20
Today3pmHumidity = 30

Today6pmWindD = "NNE"
Today6pmWindS = 10
Today6pmWT = 1
Today6pmTemp = 20
Today6pmHumidity = 30

Today9pmWindD = "NNE"
Today9pmWindS = 10
Today9pmWT = 1
Today9pmTemp = 20
Today9pmHumidity = 30

TomorrowMidnightWindD = "NNE"
TomorrowMidnightWindS = 10
TomorrowMidnightWT = 1
TomorrowMidnightTemp = 20
TomorrowMidnightHumidity = 30

Tomorrow3amWindD = "NNE"
Tomorrow3amWindS = 10
Tomorrow3amWT = 1
Tomorrow3amTemp = 20
Tomorrow3amHumidity = 30

if os_is_network_connected() {
PullInWeather()
GetCurrentWeatherValues()
} else {
ThisPeriodWindS = 5;
ThisPeriodWindD = 90;
ThisPeriodTemp = 10;
ThisPeriodWT = 0;
ThisPeriodHumidity = 0

NextPeriodWindS = 5;
NextPeriodWindD = 90;
NextPeriodTemp = 10;
NextPeriodWT = 0;
NextPeriodHumidity = 0
}

if current_hour &gt;= 0 and current_hour &lt; 3 {

WorkOutInitialWeatherDifference(0)

} else if current_hour &gt;= 3 and current_hour &lt; 6 {

WorkOutInitialWeatherDifference(3)

} else if current_hour &gt;= 6 and current_hour &lt; 9 {

WorkOutInitialWeatherDifference(6)

} else if current_hour &gt;= 9 and current_hour &lt; 12 {

WorkOutInitialWeatherDifference(9)

} else if current_hour &gt;= 12 and current_hour &lt; 15 {

WorkOutInitialWeatherDifference(12)

} else if current_hour &gt;= 15 and current_hour &lt; 18 {

WorkOutInitialWeatherDifference(15)

} else if current_hour &gt;= 18 and current_hour &lt; 21 {

WorkOutInitialWeatherDifference(18)

} else if current_hour &gt;= 21 {

WorkOutInitialWeatherDifference(21)

}

WeatherInitialise = true
TirWeekMod = 0
MoonLustMod = 0
HeardSound = false
HeardLoudSound = false
HeardInEarLoud = false
HeardInEar = false

CurrentStep = 0
HeardSoundRustle = 0

//----------------------------- Mic Volume Variables

MicrophoneVolume = 0;
Silence = false

NightDriveMod = 0
NightEmoMod = 0
NightMod = 0

drawing = false
us_old = -1;

//Begin audio recording and create buffer and graph
if (audio_get_recorder_count() == 0) {
    //There is no microphone or recording is not supported.
    exit;
}

CurrentMic = 0

audio_record = audio_start_recording(CurrentMic);
if (drawing)
    graph = ds_list_create();
audio_buffer = buffer_create(4800*2, buffer_fixed, 2);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Light Levels

LightLevelInMB = CurrentEnviroLightAlpha  
LightLevelInRL = GetLightLevel()

LightLevelInMB = clamp(LightLevelInMB,0,1)
LightLevelInRL = clamp(LightLevelInRL,0,100)

alarm[0] = 40
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sun &amp; Moon Outside Variables
//Setup Sun &amp; Moon Variables and Initial Pull

if InitialSunMoonSetup = false {
GetSunMoonData()
WriteToLog("Got Sun and Moon data from Eavesdrop.")


//Create Sun or Moon, depending on current time, and set
//their position, colour, intensity etc. based on current time.
CreateSunMoonBoot()

InitialSunMoonSetup = true

} else if InitialSunMoonSetup = true {

//Once this initial pull has happened, 
//check for new results from Eavesdrop (which only come at midnight).

if file_exists("new sunmoon result.txt") {
GetSunMoonData()
WriteToLog("Got Sun and Moon data from Eavesdrop.")
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Getting Session Time

CurrentSessionBaseTime += 1

if CurrentSessionBaseTime &gt;= 60 {
Seconds += 1
CurrentSessionBaseTime = 0
}

if Seconds &gt;= 60 {
Minutes += 1
Seconds = 0
}

if Minutes &gt;= 60 {
Hours += 1
Minutes = 0
}

if Hours &gt;= 24 {
Days += 1
Hours = 0
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weather: 1 Hour Doublecheck, 3 Hour Update


if current_minute = 0 and current_second = 0 {
WeatherDoubleCheck = true
}

if 
(current_hour = 0 or current_hour = 3 or current_hour = 6 or current_hour = 9 or current_hour = 12 
or current_hour = 15 or current_hour = 18 or current_hour = 21)
and current_minute = 0 and current_second = 0 
{
WeatherChange = true
}


if WeatherDoubleCheck = true {
//Double-Check the server for changes in weather and update the daily variables.
if os_is_network_connected() {
PullInWeather()
GetCurrentWeatherValues()
} else {
ThisPeriodWindS = 5;
ThisPeriodWindD = 90;
ThisPeriodTemp = 10;
ThisPeriodWT = 0;
ThisPeriodHumidity = 0

NextPeriodWindS = 5;
NextPeriodWindD = 90;
NextPeriodTemp = 10;
NextPeriodWT = 0;
NextPeriodHumidity = 0
}
WeatherDoubleCheck = false
}

if WeatherChange = true {
//Reset modifiers.
if os_is_network_connected() {
PullInWeather()
GetCurrentWeatherValues()
} else {
ThisPeriodWindS = 5;
ThisPeriodWindD = 90;
ThisPeriodTemp = 10;
ThisPeriodWT = 0;
ThisPeriodHumidity = 0

NextPeriodWindS = 5;
NextPeriodWindD = 90;
NextPeriodTemp = 10;
NextPeriodWT = 0;
NextPeriodHumidity = 0
}
WeatherChange = false
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Progressing Weather Display

if current_minute != 0 and current_second != 0  {
//Usual Weather Progression, as long as setup is completed and we are not at an hourly transition.

if current_second = 0 and WeatherMinuteProgress = false{
CurrentWindS = CurrentWindS + (abs(ThisPeriodWindS - NextPeriodWindS) / 180)
CurrentTemp = CurrentTemp + (abs(ThisPeriodTemp - NextPeriodTemp) / 180)
CurrentWTMod = CurrentWTMod + 1
CurrentWindD = CurrentWindD + (abs(ThisPeriodWindD - NextPeriodWindD) / 180)
CurrentHumidity = CurrentHumidity + (abs(ThisPeriodHumidity - NextPeriodHumidity) / 180)
WeatherMinuteProgress = true
} else if current_second != 0 {
WeatherMinuteProgress = false
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Times, Dates, Seasons &amp; Mods


if current_hour &gt;= 6 and current_hour &lt; 12 {
CurrentTOD = "Morning"
NightMod = 0
NightEmoMod = 0
NightDriveMod = -100
} else if current_hour &gt;= 12 and current_hour &lt; 18 {
CurrentTOD = "Afternoon"
NightMod = 0
NightEmoMod = 0
NightDriveMod = -100
} else if current_hour &gt;= 18 and current_hour &lt; 6 {
CurrentTOD = "Night"
NightMod = 35
NightEmoMod = 100
NightDriveMod = 100
}

switch (current_weekday) 
{
case 0:
CurrentWeekday = "Sunday";
TirWeekMod = 6
break;
case 1:
CurrentWeekday = "Monday";
TirWeekMod = 7
break;
case 2:
CurrentWeekday = "Tuesday";
TirWeekMod = 0
break;
case 3:
CurrentWeekday = "Wednesday";
TirWeekMod = 1
break;
case 4:
CurrentWeekday = "Thursday";
TirWeekMod = 2
break;
case 5:
CurrentWeekday = "Friday";
TirWeekMod = 3
break;
case 6:
CurrentWeekday = "Saturday";
TirWeekMod = 4
break;
}

switch (current_day) {
case 1:
CurrentDay = "1st";
break;
case 2:
CurrentDay = "2nd";
break;
case 3:
CurrentDay = "3rd";
break;
case 4:
CurrentDay = "4th";
break;
case 5:
CurrentDay = "5th";
break;
case 6:
CurrentDay = "6th";
break;
case 7:
CurrentDay = "7th";
break;
case 8:
CurrentDay = "8th";
break;
case 9:
CurrentDay = "9th";
break;
case 10:
CurrentDay = "10th";
break;
case 11:
CurrentDay = "11th";
break;
case 12:
CurrentDay = "12th";
break;
case 13:
CurrentDay = "13th";
break;
case 14:
CurrentDay = "14th";
break;
case 15:
CurrentDay = "15th";
break;
case 16:
CurrentDay = "16th";
break;
case 17:
CurrentDay = "17th";
break;
case 18:
CurrentDay = "18th";
break;
case 19:
CurrentDay = "19th";
break;
case 20:
CurrentDay = "20th";
break;
case 21:
CurrentDay = "21st";
break;
case 22:
CurrentDay = "22nd";
break;
case 23:
CurrentDay = "23rd";
break;
case 24:
CurrentDay = "24th";
break;
case 25:
CurrentDay = "25th";
break;
case 26:
CurrentDay = "26th";
break;
case 27:
CurrentDay = "27th";
break;
case 28:
CurrentDay = "28th";
break;
case 29:
CurrentDay = "29th";
break;
case 30:
CurrentDay = "30th";
break;
case 31:
CurrentDay = "31st";
break;
}

switch (current_hour) {
case 1:
CurrentHour = "01";
break;
case 2:
CurrentHour = "02";
break;
case 3:
CurrentHour = "03";
break;
case 4:
CurrentHour = "04";
break;
case 5:
CurrentHour = "05";
break;
case 6:
CurrentHour = "06";
break;
case 7:
CurrentHour = "07";
break;
case 8:
CurrentHour = "08";
break;
case 9:
CurrentHour = "09";
break;
default:
CurrentHour = string(current_hour)
break;
}

switch (current_minute) {
case 1:
CurrentMinute = "01";
break;
case 2:
CurrentMinute = "02";
break;
case 3:
CurrentMinute = "03";
break;
case 4:
CurrentMinute = "04";
break;
case 5:
CurrentMinute = "05";
break;
case 6:
CurrentMinute = "06";
break;
case 7:
CurrentMinute = "07";
break;
case 8:
CurrentMinute = "08";
break;
case 9:
CurrentMinute = "09";
break;
default:
CurrentMinute = string(current_minute)
break;
}

switch (current_second) {
case 1:
CurrentSecond = "01";
break;
case 2:
CurrentSecond = "02";
break;
case 3:
CurrentSecond = "03";
break;
case 4:
CurrentSecond = "04";
break;
case 5:
CurrentSecond = "05";
break;
case 6:
CurrentSecond = "06";
break;
case 7:
CurrentSecond = "07";
break;
case 8:
CurrentSecond = "08";
break;
case 9:
CurrentSecond = "09";
break;
default:
CurrentSecond = string(current_second)
break;
}

switch (current_month) {
case 1:
CurrentMonth = "January";
break;
case 2:
CurrentMonth = "February";
break;
case 3:
CurrentMonth = "March";
break;
case 4:
CurrentMonth = "April";
break;
case 5:
CurrentMonth = "May";
break;
case 6:
CurrentMonth = "June";
break;
case 7:
CurrentMonth = "July";
break;
case 8:
CurrentMonth = "August";
break;
case 9:
CurrentMonth = "September";
break;
case 10:
CurrentMonth = "October";
break;
case 11:
CurrentMonth = "November";
break;
case 12:
CurrentMonth = "December";
break;
}

CurrentYear = string(current_year)

if CurrentMonth = "January" 
or CurrentMonth = "February"
or CurrentMonth = "March"
or CurrentMonth = "December"
{
CurrentTOY = "Winter"
mCreatureController.TOYRate = -2
SeasonFurMod = -2
TOYFloaterMod = 1
SeasonShedRate = 10000
SeasonWenRate = 1000
}
else if CurrentMonth = "April"
or CurrentMonth = "May"
or CurrentMonth = "June"
{
CurrentTOY = "Spring"
mCreatureController.TOYRate = 0
TOYFloaterMod = 2
SeasonFurMod = 1
SeasonShedRate = -10000
SeasonWenRate = -1000
} 
else if CurrentMonth = "July"
or CurrentMonth = "August"
or CurrentMonth = "September"
{
CurrentTOY = "Summer"
mCreatureController.TOYRate = 2
TOYFloaterMod = 1
SeasonFurMod = 2
SeasonShedRate = -10000
SeasonWenRate = -1000
} else if CurrentMonth = "October"
or CurrentMonth = "November"
{
CurrentTOY = "Autumn"
mCreatureController.TOYRate = 0
TOYFloaterMod = 2
SeasonFurMod = -1
SeasonWenRate = 1000
SeasonShedRate = 10000
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Opening &amp; Closing The Debug Menu

if 
((keyboard_check(vk_shift) and keyboard_check(ord('D')) 
and keyboard_check_pressed(ord('L')))
or
(device_mouse_check_button(0,mb_any) and global.LatestRecognisedPhrase = "Elohim El Adonnay Tetragrammaton"))
{
if instance_exists(mDebug) = false {
global.LatestRecognisedPhrase = "none"
ex_audio_play("debugopen",0)
Debug = instance_create(x,y,mDebug)
Debug.State = "opening"
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creating Viewport 'Flicker'
//Setting The Max And Min Scales Based On Viewport


if mBehavioursDeliberative.PercentForward &gt;= 100 {
if mInterfaceController.ChangingView = true {
if mInterfaceController.ChangingTo = "Micro" {
ViewportMinScale = ease_inout_sine(mInterfaceController.ZoomTimer,ViewportZoomedOutMin,ViewportZoomedInMin - ViewportZoomedOutMin,mInterfaceController.ZoomRate)
ViewportMaxScale = ease_inout_sine(mInterfaceController.ZoomTimer,ViewportZoomedOutMax,ViewportZoomedInMax - ViewportZoomedOutMax,mInterfaceController.ZoomRate)
} else if mInterfaceController.ChangingTo = "Macro" {
ViewportMinScale = ease_inout_sine(mInterfaceController.ZoomTimer,ViewportZoomedInMin,ViewportZoomedOutMin - ViewportZoomedInMin,mInterfaceController.ZoomRate)
ViewportMaxScale = ease_inout_sine(mInterfaceController.ZoomTimer,ViewportZoomedInMax,ViewportZoomedOutMax - ViewportZoomedInMax,mInterfaceController.ZoomRate)
}
} else {
if mInterfaceController.CurrentView = MacroView {
ViewportMinScale = ViewportZoomedOutMin
ViewportMaxScale = ViewportZoomedOutMax
} else if mInterfaceController.CurrentView = MicroView {
ViewportMinScale = ViewportZoomedInMin                  
ViewportMaxScale = ViewportZoomedInMax
}
}
} else {
ViewportMinScale = 4
ViewportMaxScale = 4
}




//Random Time Change

if FlickerActive = true {
if ViewportFlickerChanging = false {
ViewportFlickerTimeToWait -= 1

if ViewportFlickerTimeToWait = 0 {
ViewportFlickerChanging = true
if mInterfaceController.CurrentView = MacroView {
ViewportFlickerTimeToWait = irandom_range(10,50)
} else if mInterfaceController.CurrentView = MicroView {
ViewportFlickerTimeToWait = irandom_range(10,50)
}

}
} else if ViewportFlickerChanging = true {

if CurrentViewportScale &gt;= (ViewportMaxScale) {
Direction = -1
} else if CurrentViewportScale &lt;= (ViewportMinScale) {
Direction = 1
} else {
Direction = choose(-1, 1)
}

if mInterfaceController.CurrentView = MacroView {
Speed = random_range(0.008,0.02)
Time = random_range(20,70)
} else if mInterfaceController.CurrentView = MicroView {
Speed = random_range(0.0001,0.006)
Time = random_range(20,70)
}

if Direction = -1 {
if CurrentViewportScale &gt; ViewportMinScale {
if Time &gt; 0 {
CurrentViewportScale += (Speed * Direction)
Time -= 1
} else if Time &lt;= 0 {
ViewportFlickerChanging = false
}
} else if CurrentViewportScale &lt;= ViewportMinScale {
CurrentViewportScale = ViewportMinScale
ViewportFlickerChanging = false
}


} else if Direction = 1 {
if CurrentViewportScale &lt; ViewportMaxScale {
if Time &gt; 0 {
CurrentViewportScale += (Speed * Direction)
Time -= 1
} else if Time &lt;= 0 {
ViewportFlickerChanging = false
}
} else if CurrentViewportScale &gt;= ViewportMaxScale {
CurrentViewportScale = ViewportMaxScale
ViewportFlickerChanging = false
}
}
}





CurrentViewportScale = clamp(CurrentViewportScale,ViewportMinScale,ViewportMaxScale)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alerting Start &amp; End Of Twilight

//Morning

if current_hour = ThisMorningTwilightStartHour and current_minute = ThisMorningTwilightStartMinute and MorningTwilightInProgress = false {
MorningTwilightInProgress = true
EveningTwilightInProgress = false
CurrentTwilightMinute = 0
}

if MorningTwilightInProgress = true {
if current_second = 59 and TriggeredTwilightMinute = false {
CurrentTwilightMinute += 1
TriggeredTwilightMinute = true
} else if current_second != 59 {
TriggeredTwilightMinute = false
}

if current_hour = ThisMorningTwilightEndHour and current_minute = ThisMorningTwilightEndMinute {
MorningTwilightInProgress = false
CurrentTwilightMinute = 0
TriggeredTwilightMinute = false
}
} 

//Evening

if current_hour = ThisEveningTwilightStartHour and current_minute = ThisEveningTwilightStartMinute and EveningTwilightInProgress = false {
EveningTwilightInProgress = true
MorningTwilightInProgress = false
CurrentTwilightMinute = 0
}

if EveningTwilightInProgress = true {
if current_second = 59 and TriggeredTwilightMinute = false {
CurrentTwilightMinute += 1
TriggeredTwilightMinute = true
} else if current_second != 59 {
TriggeredTwilightMinute = false
}
if current_hour = ThisEveningTwilightEndHour and current_minute = ThisEveningTwilightEndMinute {
EveningTwilightInProgress = false
CurrentTwilightMinute = 0
TriggeredTwilightMinute = false
}
} 


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Progressing The Day

if 
(current_hour = ThisMorningTwilightStartHour and current_minute &gt;= ThisMorningTwilightStartMinute)
or ((current_hour &gt; ThisMorningTwilightStartHour) and (current_hour &lt; ThisEveningTwilightEndHour))
or (current_hour = ThisEveningTwilightEndHour and current_minute &lt;= ThisEveningTwilightEndMinute)
{
if current_second = 59 and SunMinuteCounted = false {
SunMinuteCounted = true
CurrentSunMinute += 1
} else if current_second != 59 {
SunMinuteCounted = false
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cycle Mics With Arrow Button

if keyboard_check_pressed(vk_left) {

audio_stop_recording(CurrentMic)

TotalMics = audio_get_recorder_count()
if CurrentMic &gt;= TotalMics - 1 {
CurrentMic = 0
} else {
CurrentMic += 1
}

audio_record = audio_start_recording(CurrentMic);
if (drawing)
    graph = ds_list_create();
audio_buffer = buffer_create(4800*2, buffer_fixed, 2);

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creating Sun And Moon

if InitialSunMoonSetup = true {

if current_hour = TodaySunsetHour and current_minute = TodaySunsetMinute and TodayMoonCreated = false {
TonightsMoon = instance_create(x,y,mMoon)
with TonightsMoon {
CurrentDirection = random_range(60,120)
Direction = CurrentDirection
x = mCentreOfRoom.x + lengthdir_x(DistanceFromCentreOfRoom,Direction)
y = mCentreOfRoom.y + lengthdir_y(DistanceFromCentreOfRoom,Direction)
SetMoonPowerAndIntensity()
instance_create(x,y,mMoonVisible)
}
TodayMoonCreated = true
}

if current_hour = ThisMorningTwilightStartHour and current_minute = ThisMorningTwilightStartMinute and TodaySunCreated = false {
TodaysSun = instance_create(x,y,mSun)


with TodaysSun {
CurrentR = MorningTwilightStartR
CurrentG = MorningTwilightStartG
CurrentB = MorningTwilightStartB

CurrentX = mCentreOfRoom.x - DistanceFromCentreOfRoom
CurrentY = RiseAndSetYPlane

CurrentDirection = RiseDirection - 0
DirectionModifier = 0

CurrentSunAlpha = MorningTwilightStartAlpha
}
TodaySunCreated = true
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HeardSoundRustle

if HeardSoundRustle &gt; 0 {
HeardSoundRustle -= 1
}

HeardSoundRustle = clamp(HeardSoundRustle,0,200)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setting Colour And Alpha For Enviro Lighting


//If at night, alpha relies on moon, and colour is black

if (current_hour = ThisEveningTwilightEndHour and current_minute &gt; ThisEveningTwilightEndMinute)
or
(current_hour &gt; ThisEveningTwilightEndHour and current_hour &lt;= 23)
or
(current_hour &gt;= 0 and current_hour &lt; ThisMorningTwilightStartHour)
or
(current_hour = ThisMorningTwilightStartHour and current_minute &lt; ThisMorningTwilightStartMinute)
{

CurrentEnviroLightColour = c_black
CurrentEnviroLightAlphaBase = TonightsMoon.TonightMoonAlpha
CurrentEnviroLightAlpha = SetWeatherModsNight()

}

//If in the day, alpha relies on the current sun alpha, and colour is sun colour

if (current_hour = ThisMorningTwilightStartHour and current_minute &gt;= ThisMorningTwilightStartMinute)
or
(current_hour &gt; ThisMorningTwilightStartHour and current_hour &lt; ThisEveningTwilightEndHour)
or
(current_hour = ThisEveningTwilightEndHour and current_minute &lt;= ThisEveningTwilightEndMinute)
{
CurrentEnviroLightColour = c_black
if instance_exists(mSun) {
CurrentEnviroLightAlpha = mSun.CurrentSunAlpha
} else {
CurrentEnviroLightAlpha = TonightsMoon.TonightMoonAlpha
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Working Out Current Step

CurrentStep += 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Audio Volume

//Get length of audio and copy part of buffer
len = async_load[? "data_len"];
buffer_seek(audio_buffer,buffer_seek_start,0);
buffer_copy(async_load[? "buffer_id"], 0, len, audio_buffer, 0);

//Alpha used for lowpass
var alpha = 0.003;
/** Looping through PCM output **/
for (var i = 0;i &lt; len/16; i++) {
    var us = buffer_read(audio_buffer, buffer_s16);
    us = abs(us);
    
    /** Lowpass **/
    if (us_old == -1) us_old = us;
    us = alpha * us + (1.0 - alpha) * us_old;
    us_old = us;
    /**/
    
    MicrophoneVolume = round(us);
    
}

if (MicrophoneVolume &lt;= SoundThreshold) {
Silence = true
} else {
Silence = false

if mBehavioursDeliberative.Vocalising = false 
and mBehavioursReactive.SniffingActive = false and mBehavioursReactive.SneezeActive = false  
and mBehavioursReactive.CoughingActive = false 
{
//Check For Highest Volume 
if mCreatureController.Alive &gt; 0 and Heard() = true {
if MicrophoneVolume &gt; LoudSoundThreshold and mCreatureController.HeardLoudSound = false {
mCreatureController.HeardLoudSound = true
mCreatureController.HeardLoudSoundConf = false
mCreatureController.HeardLoudSoundReset = false
mCreatureController.HeardLoudSoundReact = false
mDriveCollectionMaster.TimeSinceLastSound = 0
if mInterfaceController.CurrentView = MicroView {
HeardSoundRustle = 120
}
LatestMicVolume = MicrophoneVolume
mCreatureController.HighVolumeTimer = irandom_range(60,90)
mDriveCollectionMaster.TimeSinceLastSpeech = 0

if (instance_exists(oEarLeft) and PlayerViewOverObject(oEarLeft)) or (instance_exists(oEarRight) and PlayerViewOverObject(oEarRight)) and mInterfaceController.CurrentView = MicroView {
HeardInEarLoud = true
LoudQuietEarReactions()
}
}

if MicrophoneVolume &lt; LoudSoundThreshold and MicrophoneVolume &gt; SoundThreshold and mCreatureController.HeardSound = false {
mCreatureController.HeardSound = true
mCreatureController.HeardSoundConf = false
mCreatureController.HeardSoundReset = false
mCreatureController.HeardSoundReact = false
mDriveCollectionMaster.TimeSinceLastSound = 0
mDriveCollectionMaster.TimeSinceLastSpeech = 0
mCreatureController.HeardSoundTimer = irandom_range(60,90)
LatestMicVolume = MicrophoneVolume
if (instance_exists(oEarLeft) and PlayerViewOverObject(oEarLeft)) or (instance_exists(oEarRight) and PlayerViewOverObject(oEarRight)) and mInterfaceController.CurrentView = MicroView {
HeardInEar = true
LoudQuietEarReactions()
}
}
}
}

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Filter Drawing

if FilterOn = true {
draw_sprite_ext(sViewportFilter,0,
view_xview[mInterfaceController.CurrentViewNumber] + (view_wview[mInterfaceController.CurrentViewNumber] / 2) - mInterfaceController.FloatModX - ((700 / 100) * (100 - mBehavioursDeliberative.PercentForward)),
view_yview[mInterfaceController.CurrentViewNumber] + (view_hview[mInterfaceController.CurrentViewNumber] / 2) - mInterfaceController.FloatModY,
CurrentViewportScale,
CurrentViewportScale,
0,
c_white,
CurrentViewportAlpha)
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
