<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sNose1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>mCollisionParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

OriginalX = x
BaseX = x
OriginalY = y
BaseY = OriginalY
OriginalXScale = image_xscale
OriginalYScale = image_yscale
BaseXScale = OriginalXScale
depth = NoseLayer
XLimit = 30
YLimit = 30
ScaleUpLimit = 0.02
ScaleDownLimit = 0.02
YUpPercentage = 0
SnotWellRate = 5000

//Limits
XLeftLimit = OriginalX - XLimit 
XRightLimit = OriginalX + XLimit 
YUpLimit = OriginalY - YLimit
YDownLimit = OriginalY + YLimit

XScaleUpLimit = OriginalXScale + ScaleUpLimit
XScaleDownLimit = OriginalXScale - ScaleDownLimit
YScaleUpLimit = OriginalYScale + ScaleUpLimit
YScaleDownLimit = OriginalYScale - ScaleDownLimit

RotateLimit = 10

//Relatives 
XDifference = 0
YDifference = 0
XScaleDifference = 0
YScaleDifference = 0
RotateDifference = 0
YUpPercentageDifference = 0
ScaleOutPercentage = 0
ScaleInPercentage = 0

//Wrinkles

WrinkleBaseLeftRotate = 20
WrinkleBaseRightRotate = -20
WrinkleTopRotate = 0
WrinkleBaseSize = 0
WrinkleTopSize = 0.6

BreathingMod = 0

NoseSurface = surface_create(sprite_width,sprite_height)
NoseSurfaceCurrentX = 0
NoseSurfaceCurrentY = 0
Redness = 0
RednessTemp = 0

Touching = false
XOffset = 0
YOffset = 0
LastXPos = 0
LastYPos = 0
ResetXY = true
SideTwitchMod = 0
SideTwitchDir = "left"

TwitchSteps = 0
TwitchTotal = 18
TwitchRate = 18

EyeShutChanceTimer = 200
EyesOpen = true
StrokingNose = false

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move If Grabbed

if 
(
position_meeting(mouse_x,mouse_y,self)
or position_meeting(mouse_x,mouse_y,oTLNostrilSocket)
or position_meeting(mouse_x,mouse_y,oMLNostrilSocket)
or position_meeting(mouse_x,mouse_y,oBLNostrilSocket)
or position_meeting(mouse_x,mouse_y,oTRNostrilSocket)
or position_meeting(mouse_x,mouse_y,oMRNostrilSocket)
or position_meeting(mouse_x,mouse_y,oBRNostrilSocket)
)
and mouse_check_button_pressed(mb_any)
and instance_exists(mDebug) = false
and mInterfaceController.HandWet = false
and mInterfaceController.CurrentHandUse = "none"
and AmountForward(80)
and position_meeting(mouse_x,mouse_y,mFurCurledParent) = false
and Touching = false {
XOffset = mouse_x - x
YOffset = mouse_y - y
if ResetXY = true {
LastXPos = x
LastYPos = y
}
if mInterfaceController.GrabbingBodyPart = false {
mInterfaceController.GrabbingBodyPart = true
VocaliseChance(20 + ((20 / 100) * mCreatureController.Resistance))
}
ex_audio_set_pitch("movebp",random_range(0.95,1.05),0)
ex_audio_play("movebp",1)
WriteToLog("Grabbed nose.")
Touching = true 
ResetXY = false
}

if Touching = true {
if mInterfaceController.DragSpeed &lt;= 0 {
if ex_audio_is_paused("movebp") = false {
ex_audio_pause("movebp")
}
} else {
if ex_audio_is_paused("movebp") {
ex_audio_resume("movebp")
}
}
RednessTemp += 0.001
x = mouse_x - XOffset
y = mouse_y - YOffset
mDriveCollectionMaster.SneezeTimer -= 1
if mouse_check_button_released(mb_any) {
ex_audio_stop("movebp")
mInterfaceController.GrabbingBodyPart = false
Touching = false
XOffset = 0
YOffset = 0
XDiff = abs(x - LastXPos)
YDiff = abs(y - LastYPos)
}
}



if Touching = false {
RednessTemp -= 0.01
if ResetXY = false {
if x &gt; LastXPos + 6
{
x -= 5
} else if x &lt; LastXPos - 6 {
x += 5
}
if y &gt; LastYPos + 6 {
y -= 5
} else if y &lt; LastYPos - 6 {
y += 5
}

if (x&gt; (LastXPos - 6)) and (x &lt; (LastXPos + 6))
and (y &gt; (LastYPos - 6)) and (y &lt; (LastYPos + 6))
ResetXY = true
}
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tiredness Wrinkle Calculation

if mCreatureController.Tiredness &gt; 10 {
if mCreatureController.Tiredness &lt;= 30 {
TirednessWrinkleScale = (0.3 / 20) * mCreatureController.Tiredness - 10
TirednessWrinkleAlpha = (1 / 20) * mCreatureController.Tiredness - 10
} else {
TirednessWrinkleScale = 0.3
TirednessWrinkleAlpha = 1
}

} else {
TirednessWrinkleScale = 0.3
TirednessWrinkleAlpha = 0
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If Stroked, Increase Tiredness (&amp; Other Reactions)

if DrivesAreOn() {

if position_meeting(mouse_x,mouse_y,self)
and position_meeting(mouse_x,mouse_y,mFurCurledParent)
and mInterfaceController.DragBegun = true 
and mInterfaceController.DragSpeed &gt; 0 
and instance_exists(mDebug) = false
and AmountForward(70)
and mCreatureController.Alive &gt; 0
and mInterfaceController.GrabbingBodyPart = false
{
StrokingNose = true
if Chance(-mCreatureController.Triad * 100) {HoldBreathFor(irandom_range(25,85))}
if mCreatureController.Triad &gt; 0 {if Chance(70){MoveToXY(oNose1.x,oNose1.y,150,mInterfaceController.CurrentView,1500)}}
if mCreatureController.Triad &gt; 0 {if Chance(mCreatureController.Triad * 100) and mBehavioursDeliberative.PercentForward &lt; 100 {MoveBackForwardUnCapped("comeforward",30 + ((100 / 100) * mEmotionSubController.FearActivation),100 - mBehavioursDeliberative.PercentForward)}}
}

if StrokingNose = true {
mCreatureController.BaseTiredness += 0.1
mCreatureController.BaseStress -= 0.25
mCreatureController.BaseAlive += 0.0001
mCreatureController.BaseResistance -= 0.025

mDriveCollectionMaster.BaseBreathRate -= 0.01
if Chance(0.2){StartTwitchNoseSideBehaviour(irandom_range(30,50))}
if Chance(0.2){StartSwallowBehaviour(3,10)}
if Chance(0.2){ShedNearbyFur(mouse_x,mouse_y,30)}
if Chance(0.1){StartYawnBehaviour()}
if Chance(0.2){TwitchRun(irandom_range(10,25))}

ChangeEmotionStep("happy","up",0.025 + ((0.025 / 100) * (mCreatureController.Triad * 100)))
ChangeEmotionStep("sad","down",0.025 + ((0.025 / 100) * (mCreatureController.Triad * 100)))
ChangeEmotionStep("anger","down",0.025 + ((0.025 / 100) * (mCreatureController.Triad * 100)))
ChangeEmotionStep("fear","down",0.025 + ((0.025 / 100) * (mCreatureController.Triad * 100)))
ChangeEmotionStep("shame","down",0.025 + ((0.025 / 100) * (mCreatureController.Triad * 100)))

if mBehavioursReactive.Sleeping = false {
mCreatureController.BaseSubIntent += 0.004
mCreatureController.BaseTrust += 0.025
mCreatureController.CloseToAnne -= 0.025

if EyesOpen = true {
if EyeShutChanceTimer &gt; 0 {
EyeShutChanceTimer -= 1
} else if EyeShutChanceTimer &lt;= 0 {
mDriveCollectionMaster.CurrentlyBlinking = false
mDriveCollectionMaster.CurrentlyWinking = false
mDriveCollectionMaster.CurrentlySquinting = false
EyesOpen = false
StartCloseEyeBehaviour("both",3)
}
}

if Chance(0.2){StartVocalisation("shortlow",0.2,choose("risefall","same","fall"),50)}
}

if mouse_check_button_released(mb_any) or position_meeting(mouse_x,mouse_y,oNose1) = false {
StrokingNose = false
if EyesOpen = false {
mDriveCollectionMaster.CurrentlyBlinking = true
mDriveCollectionMaster.CurrentlyWinking = true
mDriveCollectionMaster.CurrentlySquinting = true
StartOpenEyeBehaviour("both",3)
EyesOpen = true
}
EyeShutChanceTimer = irandom_range(400,800)
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Side-To-Side Twitch

if TwitchSteps &gt; 0 {
TwitchSteps -= 1
if SideTwitchDir = "left" {
if SideTwitchMod &gt; -TwitchTotal {
SideTwitchMod -= TwitchRate
} else {
SideTwitchDir = "right"
}
} else if SideTwitchDir = "right" {
if SideTwitchMod &lt; TwitchTotal {
SideTwitchMod += TwitchRate
} else {
SideTwitchDir = "left"
}
}
} else {
TwitchSteps = 0
if SideTwitchMod != 0 {
if SideTwitchMod &gt; 5 {
SideTwitchMod -= 5
} else if SideTwitchMod &lt; -5 {
SideTwitchMod += 5
} else {
SideTwitchMod = 0
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setting XScale And Y Based On Modifiers

if mBehavioursReactive.BreathingType = "both" or mBehavioursReactive.BreathingType = "nose" {
Breathing()
} else {
if BreathingMod &gt; 0 {
BreathingMod -= 5
} else {
BreathingMod = 0
}
}

HappyModFlareUp = ((25 / 100) * mEmotionSubController.HappyActivation)
HappyModFlareSize = ((0.05 / 100) * mEmotionSubController.HappyActivation)
HappyModDown = ((25 / 100) * mEmotionSubController.HappyActivation)
SadModIn = ((0.05 / 100) * mEmotionSubController.SadActivation)
AngryModFlareUp = ((25 / 100) * mEmotionSubController.AngerActivation)
AngryModFlareSize = ((0.05 / 100) * mEmotionSubController.AngerActivation)
AngryModOut = ((0.05 / 100) * mEmotionSubController.AngerActivation)
AngryModUp = ((35 / 100) * mEmotionSubController.AngerActivation)
LustModFlareUp = (25 / 100) * mCreatureController.Lust
LustModFlareSize = (0.05 / 100) * mCreatureController.Lust
SadModFlareSize = ((0.05 / 100) * mEmotionSubController.SadActivation)
LustModUp = (20 / 100) * mCreatureController.Lust
StressModUp = (30 / 100) * mCreatureController.Stress
SurpriseModFlareUp = ((25 / 100) * mEmotionSubController.SurpriseActivation)
SurpriseModFlareSize = ((0.05 / 100) * mEmotionSubController.SurpriseActivation)
SurpriseModUp = ((30 / 100) * mEmotionSubController.SurpriseActivation)
SurpriseModOut = ((0.05 / 100) * mEmotionSubController.SurpriseActivation)
ShameModIn = ((0.05 / 100) * mEmotionSubController.ShameActivation)
ShameModDown = ((30 / 100) * mEmotionSubController.ShameActivation)
PainModFlareUp = (25 / 100) * mCreatureController.Pain
PainModFlareSize = (0.05 / 100) * mCreatureController.Pain
PainModOut = (0.05 / 100) * mCreatureController.Pain
PainModUp = (20 / 100) * mCreatureController.Pain
FearModFlareUp = ((25 / 100) * mEmotionSubController.FearActivation)
FearModFlareSize = ((0.05 / 100) * mEmotionSubController.FearActivation)
FearModOut = ((0.05 / 100) * mEmotionSubController.FearActivation)
FearModUp = ((30 / 100) * mEmotionSubController.FearActivation)


image_xscale = BaseXScale - ((0.05 / 100) * (oCheekLeft.UpPercentageDifference / 2)) + ((0.05 / 100) * (oCheekRight.UpPercentageDifference / 2)) 
+ AngryModOut + SurpriseModOut - ShameModIn + PainModOut + FearModOut - SadModIn + ((0.09 / 100) * mBehavioursReactive.SniffingMod) + ((0.05 / 100) * mBehavioursReactive.TwitchingMod) + ((0.05 / 100) * BreathingMod) + ((0.025 / 100) * oBrowLeft.UpDifferencePercentage) + ((0.025 / 100) * oBrowRight.UpDifferencePercentage)

if ResetXY = true {
x = BaseX + SideTwitchMod
y = BaseY + HappyModDown - AngryModUp - LustModUp - SurpriseModUp - StressModUp + ShameModDown - PainModUp - FearModUp - ((50 / 100) * mBehavioursReactive.SniffingMod) - ((40 / 100) * mBehavioursReactive.TwitchingMod) - ((30 / 100) * BreathingMod) - ((10 /100) * (oBrowLeft.UpDifferencePercentage)) - ((10 /100) * (oBrowRight.UpDifferencePercentage))
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculating Differences


XDifference = x - OriginalX
XDifference = clamp(XDifference,-XLimit,XLimit)
YDifference = y - OriginalY
YDifference = clamp(YDifference,-YLimit,YLimit)

if y &lt;= OriginalY {
YUpPercentageDiff = (OriginalY - y) / (OriginalY - YUpLimit) * 100
} else {
YUpPercentageDiff = 0
}

YUpPercentageDiff = clamp(YUpPercentageDiff,0,100)

XScaleDifference = image_xscale - OriginalXScale
YScaleDifference = image_yscale - OriginalYScale
RotateDifference = direction

if oNose1.image_xscale &gt; OriginalXScale {
ScaleOutPercentage = (((image_xscale - OriginalXScale) / (XScaleUpLimit - OriginalXScale)) * 100)
ScaleInPercentage = 0
} else if oNose1.image_xscale &lt; OriginalXScale {
ScaleOutPercentage = 0
ScaleInPercentage = (((OriginalXScale - image_xscale) / (OriginalXScale - XScaleDownLimit)) * 100)
} else if oNose1.image_xscale = OriginalXScale {
ScaleOutPercentage = 0
ScaleInPercentage = 0
}
ScaleInPercentage = clamp(ScaleInPercentage,0,100)
ScaleOutPercentage = clamp(ScaleOutPercentage,0,100)

NoseSurfaceCurrentX = x - (sprite_width / 2)
NoseSurfaceCurrentY = y - (sprite_height / 2)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Staying Within Limits

image_angle = direction

x = clamp(x,XLeftLimit,XRightLimit)
y = clamp(y,YUpLimit,YDownLimit)
image_xscale = clamp(image_xscale,XScaleDownLimit,XScaleUpLimit)
image_yscale = clamp(image_yscale,YScaleDownLimit,YScaleUpLimit)
direction = clamp(direction,(0 - RotateLimit),RotateLimit)
Redness = clamp(Redness,0,1)
RednessTemp = clamp(RednessTemp,0,1)

if Redness &gt; 0 {
Redness -= 0.0001
}
if RednessTemp &gt; 0 {
RednessTemp -= 0.001
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprite, Fur &amp; Stain Surface

draw_sprite_ext(sNose1,1,x + 10 + ((10 / 100) * ScaleOutPercentage),
y + 10 + ((10 / 100) * ScaleOutPercentage),image_xscale,image_yscale,direction,c_black,0.5)
draw_self()
draw_sprite_ext(sNoseRed,1,x,y,image_xscale,image_yscale,direction,c_white,Redness + RednessTemp)

with mFurCurledParent {
draw_sprite_ext(PoreSprite,0,x,y,image_xscale * 0.8,image_yscale * 0.8,90,c_white,1)
}

if (!surface_exists(NoseSurface)) { NoseSurface = surface_create(sprite_width,sprite_height) }
CleanableSurface(oNose1.NoseSurface,oNose1,1)
draw_surface_ext(NoseSurface,x - (sprite_width / 2),y - (sprite_height / 2),1 + XScaleDifference,1 + YScaleDifference,0,c_white,1)



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
