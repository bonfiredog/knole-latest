<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sLiquidDrop</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

WelledX = 0
WelledY = 0
image_xscale = 0
image_yscale = 0
GrownToSize = false
ReadyToGrow = false
depth = 0
Status = "welling"
PickedUp = false
Colour = c_white
GrowToSizeRate = 0
TrickleWobbleAmount = 0.3
WellingWobbleAmount = 0.7
ViscosityBase = 1
Viscosity = ViscosityBase
StartSmear = false
CurrentAlpha = 1
CurrentSpeedBase = 0
CurrentSpeed = CurrentSpeedBase
CurrentDirection = 0
SmearExtent = 0
ChangingDirectionTimer = irandom_range(10,30)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Grow To Size

if ReadyToGrow = true {
if GrownToSize = false {
if image_xscale &lt; TopXScale {
image_xscale += GrowToSizeRate
image_yscale = image_xscale
} else if image_xscale &gt;= TopXScale {
CurrentXScaleBase = image_xscale
CurrentYScaleBase = image_yscale
GrownToSize = true
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Picking Up

if GrownToSize = true {
if mouse_x &gt; (x - (sprite_width / 2))
and mouse_x &lt; (x + (sprite_width / 2))
and mouse_y &gt; (y - (sprite_height / 2))
and mouse_y &lt; (y + (sprite_height / 2))
and mouse_check_button_pressed(mb_right)
and Status != "pickedup"
{
Status = "pickedup"
CurrentDirection = 0
image_angle = direction
PickUpOscillate = false
OscillateNumber = irandom_range(2,4)
OscillateDirection = "out"
image_xscale = (CurrentXScaleBase * 1.3)
image_yscale = (CurrentYScaleBase * 1.3)
}



if Status = "pickedup" {

if PickUpOscillate = false {
if OscillateNumber &gt; 0 {
if OscillateDirection = "out" {
if image_xscale &lt; (CurrentXScaleBase * 1.7) {
image_xscale += 0.1 * OscillateNumber
image_yscale = image_xscale
} else {
OscillateDirection = "in"
}
} else if OscillateDirection = "in" {
if image_xscale &gt; (CurrentXScaleBase * 1.3) {
image_xscale -= 0.1 * OscillateNumber
image_yscale = image_xscale
} else {
OscillateNumber -= 1
OscillateDirection = "out"
}
}
} else if OscillateNumber &lt;= 0 {
PickUpOscillate = true
}
}

if mouse_check_button(mb_right) {
x = mouse_x
y = mouse_y
} else {
CurrentDirection = 270
direction = CurrentDirection
image_angle = direction
CurrentSpeedBase = 6
CurrentSpeed = (CurrentSpeedBase / Viscosity) * (image_xscale * 1.5)
speed = CurrentSpeed
image_xscale = (CurrentXScaleBase)
image_yscale = (CurrentYScaleBase)
Status = "trickling"
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Evaporating

if GrownToSize = true {
if Status = "welling" {
image_alpha -= 0.00003
if CurrentXScaleBase &lt;= 0 {
instance_destroy()
}
} else if Status = "trickling" {
image_alpha -= 0.0003
if image_alpha &lt;= 0  {
instance_destroy()
}
} else if Status = "stopped" {
image_alpha -= 0.003
if image_alpha &lt;= 0  {
instance_destroy()
}
}
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Smearing

if GrownToSize = true {
if mouse_x &gt; (x - (sprite_width / 2))
and mouse_x &lt; (x + (sprite_width / 2))
and mouse_y &gt; (y - (sprite_height / 2))
and mouse_y &lt; (y + (sprite_height / 2))
and mouse_check_button_pressed(mb_left) {
Status = "smeared"
speed = 0
SmearDistance = 0
StartOfSmearX = x
StartOfSmearY = y
SmearExtent = 60 * image_xscale
StartSmear = true
}
}

if StartSmear = true {
//Create a smear in the direction of the hand travelling, with a lower alpha.
SmearDistance = point_distance(StartOfSmearX,StartOfSmearY,x,y)
mMetaballController.Dirt += 0.0005
//As long as the smear has not travelled too far, and the finger is pressed down,
//smear.
if (mouse_check_button(mb_left) and SmearDistance &lt; SmearExtent) {
x = mouse_x
y = mouse_y
mMetaballController.Dirt += 1
CreateSmear(image_blend,0.3)
image_xscale -= 0.0003
image_yscale = image_xscale
} else {
instance_destroy()
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Trickling

image_angle = direction
if CurrentSpeed &gt; 0 {
Status = "trickling"
}
if GrownToSize = true {
if Status = "trickling" {

speed = CurrentSpeed
image_xscale = CurrentXScaleBase + (0.05 * CurrentSpeed)

if CurrentSpeed &gt; 0 {
//Slowdown
CurrentSpeedBase -= 0.03
} else if CurrentSpeed &lt;= 0 {
Status = "stopped"
}

//-----------------------------------------------------------------------------------------

//Contextual Rules For Contact With Other Objects (Will Need To Be Updated)

//Mouth Parts
if place_meeting(x,y,oMouthCentre) or place_meeting(x,y,oMouthTop) or place_meeting(x,y,oMouthLeft) or place_meeting(x,y,oMouthRight) {
speed = 0
Status = "eaten"
}

//---------------------------------------------------------------------------------------

//Trails

if instance_exists(mMetaballController) {
surface_set_target(mMetaballController.TrailSurface)
draw_sprite_ext(sTrail,0,x,y,image_yscale * 0.15,image_yscale * 0.15,direction,merge_colour(image_blend,c_black,0.8),1)
surface_reset_target()
}

//If touch other metaballs, just mix as normal, but travel in same direction...

TouchingMetaball = instance_place(x,y,mLiquidParent)

if TouchingMetaball != noone {
if TouchingMetaball.image_yscale &lt; image_yscale {
CurrentDirection = TouchingMetaball.direction
} else {
//Actual Direction Calculation
if ChangingDirectionTimer &gt; 0 {
ChangingDirectionTimer -= 1
} else if ChangingDirectionTimer &lt;= 0 {
CurrentDirection = random_range(250,290)
//direction = CurrentDirection
ChangingDirectionTimer = irandom_range(5,30)
}

}
} else {

//Actual Direction Calculation
if ChangingDirectionTimer &gt; 0 {
ChangingDirectionTimer -= 1
} else if ChangingDirectionTimer &lt;= 0 {
CurrentDirection = random_range(250,290)
//direction = CurrentDirection 
ChangingDirectionTimer = irandom_range(5,30)
}
}

if direction != CurrentDirection {
if CurrentDirection &lt; direction {
direction -= 1
} else if CurrentDirection &gt; direction {
direction += 1
}
}


}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eaten

if Status = "eaten" {
image_xscale -= 0.003
image_yscale = image_xscale

if image_xscale &lt;= 0 {
instance_destroy()
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wobbling

if mMetaballController.WobbleTimer &gt; 0 {
if mMetaballController.WobbleDirection = "left" {
if Status = "welling" {
x -= WellingWobbleAmount
} else if Status = "trickling" or Status = "stopped" {
x -= TrickleWobbleAmount
}
} else if mMetaballController.WobbleDirection = "right" {
if Status = "welling" {
x += WellingWobbleAmount
} else if Status = "trickling" or Status = "stopped" {
x += TrickleWobbleAmount
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increase Viscosity If In Contact With Other Metaballs

if GrownToSize = true {
if place_meeting(x,y,mLiquidParent) {
Viscosity = (ViscosityBase * 2)
} else {
Viscosity = ViscosityBase
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dynamically Set Speed And Transparency Based On Size, Viscosity

CurrentAlpha = ((1 * image_xscale) * Viscosity)
CurrentSpeed = (CurrentSpeedBase / Viscosity) * (image_xscale * 1.1)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delete Sprite
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
