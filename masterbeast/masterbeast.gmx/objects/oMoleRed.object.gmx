<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSigilMoleSmall1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>mMoleParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

OriginalX = x
OriginalY = y
Status = "whole"
ZoomedOutSprite = choose(sSigilMoleSmall1,sSigilMoleSmall2,sSigilMoleSmall3,sSigilMoleSmall4,sSigilMoleSmall5,sSigilMoleSmall6,sSigilMoleSmall7,sSigilMoleSmall8)
ZoomedOutDirection = random(360)
direction = 0
ZoomedOutXScale = image_xscale / 2.9
ZoomedOutYScale = ZoomedOutXScale
ZoomedInScale = random_range(0.04,0.06)

ZoomedInSprite = choose(sSigilMoleLarge1,sSigilMoleLarge4,sSigilMoleLarge6,sSigilMoleLarge7,sSigilMoleLarge8,sSigilMoleLarge9,sSigilMoleLarge10)
switch ZoomedInSprite {
case sSigilMoleLarge1:
Bottom = sSigilMoleBottom1
Red = sSigilMoleRed1
break;
case sSigilMoleLarge2:
Bottom = sSigilMoleBottom2
Red = sSigilMoleRed2
break;
case sSigilMoleLarge3:
Bottom = sSigilMoleBottom3
Red = sSigilMoleRed3
break;
case sSigilMoleLarge4:
Bottom = sSigilMoleBottom4
Red = sSigilMoleRed4
break;
case sSigilMoleLarge5:
Bottom = sSigilMoleBottom5
Red = sSigilMoleRed5
break;
case sSigilMoleLarge6:
Bottom = sSigilMoleBottom6
Red = sSigilMoleRed6
break;
case sSigilMoleLarge7:
Bottom = sSigilMoleBottom7
Red = sSigilMoleRed7
break;
case sSigilMoleLarge8:
Bottom = sSigilMoleBottom8
Red = sSigilMoleRed8
break;
case sSigilMoleLarge9:
Bottom = sSigilMoleBottom9
Red = sSigilMoleRed9
break;
case sSigilMoleLarge10:
Bottom = sSigilMoleBottom10
Red = sSigilMoleRed10
break;
}

ZoomedInDirection = 0
UnoccupiedRotation = random(360)

Redness = 0
Occupied = true
ID = 0
ChangeMultiplier = 0
XDir = 0
depth = MoleLayer

CutAmount = 0
Cutting = false

Ripped = false
DripTimer = irandom_range(30,120)

XDifference = 0
YDifference = 0
UpAmount = 60

BaseRedness = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cutting Out

CutAmount = clamp(CutAmount,0,100)


//Cutting Begin

if position_meeting(mouse_x,mouse_y,self)
and instance_exists(mDebug) = false
and mInterfaceController.CurrentHandUse = "knife"
and mInterfaceController.CurrentView = MicroView
and Occupied = true
and CutAmount &lt; 100
and mInterfaceController.DragStatus = "dragging"
and mInterfaceController.DragSpeed &gt; 10
{
if Cutting = false {
CutMoleInitial()
}
Cutting = true
mInterfaceController.NoNewCut = true
} else {
Cutting = false 
}

if Cutting = true {
CutMoleReactions()
Redness += 0.04
CreateParticleSplash(x,y,10,ps_shape_ellipse,ps_distr_gaussian,DebugRedTextColour,5,15,0.03,0.06,45,135,60,95,0.5,10)
CreateStain(1,0,360,5,10,0.1,0.6,0.8,0.05,0.06,BloodLiquidColour,x,y)
CutAmount += 1
}

if CutAmount &gt;= 100 and Cutting = true {
CreateParticleSplash(x,y,3,ps_shape_ellipse,ps_distr_gaussian,DebugRedTextColour,5,15,0.04,0.07,0,360,70,125,0.5,30)
CreateStain(10,0,360,5,10,0.2,0.3,0.5,0.05,0.06,BloodLiquidColour,x,y)
WriteToLog("Cut out normal mole.")
Ripped = true
mInterfaceController.CurrentHandUse = "holding"
Occupied = false
ShakeModX = 0
ShakeModY = 0
ShakeModMod = 0
PulledMole = instance_create(mouse_x,mouse_y,sSigilMolePicked)
PulledMole.image_xscale = ZoomedInScale
PulledMole.image_yscale = ZoomedInScale
PulledMole.ZoomedInSprite = ZoomedInSprite
PulledMole.ZoomedOutSprite = ZoomedOutSprite
PulledMole.ZoomedOutDirection = ZoomedOutDirection
PulledMole.ZoomedOutXScale = ZoomedOutXScale
PulledMole.ZoomedOutYScale = ZoomedOutYScale
PulledMole.ZoomedInScale = ZoomedInScale
PulledMole.ZoomedInDirection = ZoomedInDirection
PulledMole.Bottom = Bottom
PulledMole.Holding = true
PulledMole.PullingXOffset =  mouse_x - x
PulledMole.PullingYOffset = mouse_y - y
Cutting = false
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Touching

if place_meeting(x,y,mFinger) and  mInterfaceController.CurrentView = MicroView and instance_exists(mDebug) = false{
TouchMoleReactions()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///In Line With Head

x = OriginalX
y = OriginalY

Redness = BaseRedness + 0.5
BaseRedness = clamp(BaseRedness,0,0.5)

if Occupied = true {
sprite_index = ZoomedInSprite
image_xscale = ZoomedInScale
image_yscale = ZoomedInScale
} else if Occupied = false {
if mInterfaceController.CurrentView = MicroView {
sprite_index = sSigilMoleBottom
image_xscale = ZoomedInScale - 0.01 
image_yscale = ZoomedInScale - 0.01 
}
}

ChangeSpriteWithZoom(ZoomedOutXScale,ZoomedOutYScale,ZoomedInScale,ZoomedInScale)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing Sprite Depending On View
if Occupied = true {
ChangeDrawingWithZoom(ZoomedOutSprite,ZoomedInSprite,UnoccupiedRotation)
} else {
draw_self()
}

if mInterfaceController.CurrentView = MicroView and Occupied = true {
draw_sprite_ext(Red,0,x,y,ZoomedInScale,ZoomedInScale,0,DebugRedTextColour,Redness)
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
