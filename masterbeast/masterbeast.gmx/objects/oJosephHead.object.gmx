<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sJosephHead</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>mCellarParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

depth = OffObjectsLayer + 0.01
OriginalRotation = image_angle
OrigX = x
OrigY = y
RootedXOffset = x - oCellarBase.x
RootedYOffset = y - oCellarBase.y

DistNeckX = 10
DistNeckY = -5

Angle = point_direction(0,0,DistNeckX,DistNeckY)
Distance = point_distance(0,0,DistNeckX,DistNeckY)
RotateMod = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

//Keep in line with neck.
x = oNecks.x + lengthdir_x(Distance,oNecks.image_angle + Angle)
y = oNecks.y + lengthdir_y(Distance,oNecks.image_angle + Angle)

//Keep at the correct angle of the neck, plus the rotation caused by movement.
image_angle = oNecks.image_angle + RotateMod

RotateMod = clamp(RotateMod,-40,40)

//As long as picked up...
if oSarahHead.Rooted = false {
if oSarahHead.PickedUp = true {
//If the hand is moving left, rotate the head outwards.
if mInterfaceController.HMove = "left" {
RotateMod += (10 / mInterfaceController.SpeedMax) * mInterfaceController.CurrentSpeed
//If the hand is moving right, rotate the head inwards.
} else if mInterfaceController.HMove = "right" {
RotateMod -= (10 / mInterfaceController.SpeedMax) * mInterfaceController.CurrentSpeed
//Both changes faster if current speed is higher.
} else {
//Fall depending on gravity if not perfectly centred.
if RotateMod &gt; 0 {
RotateMod += 3
} else if RotateMod &lt; 0 {
RotateMod -= 3
}
} 
}
} else {
//If rooted, slowly rotate back to the centre (with a built-in redundancy for dithering).
if RotateMod &gt; 2 {
RotateMod -= 1
} else if RotateMod &lt; -2 {
RotateMod += 1
}
}

FadeInWithZoom()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Don't Draw Sprite
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
