<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

depth = MetaLayer
x = ControllerObjectX
y = ControllerObjectY

//Disappearing/Reappearing Variables

LessThanPresent = false
PercentForward = 100
DisappearingActive = false
StartDisappearing = false
StartDSneeze = false
FocusSpeed = 5
DScreen = noone
BlownNose = false
MovingActive = false
BuckingAfter = false
MoveXYAfter = false

ReappearingActive = false
ReappearDir = "none"
ReappearAmount = 0
ReappearSpeed = 0

//Vocalising Variables

Vocalising = false
VX = oMouthCentre.x
VY = oMouthCentre.y
VZ = 1
VVelX = 0
VVelY = 0
VVelZ = 0
VFRefDist = 200
VFMaxDist =  300
VFFactor = 1

PlayedClack = false
CloseRate = 4 
BendEndRate = 4
Stopping = false
VolumeRate = 0.03
VocSound = "none"
CurrentVocalClack = "none"
ComeToInitialVol = false
StartedThisVocal = false
VocType = "none"
VocReps = 0
VocIntensity = 0
CurrentVocVolume = 0
CurrentVocPitch = 0
Steps = 0
TargetPitch = 0
TargetOpen = 0 
TargetBend = 0 
VolumeLower = 0
VolumeHigher = 1
PitchLowest = 0.8
PitchHighest = 1.2
FiredAlarm = false 

PitchLower = 1
PitchHigher = 1.5
ChangeRate = 0
CurrentChangePoint = 0
CurrentChangeDir = "same"

VocalPhrasing = false
StoppingVocalPhrasing = false
VPhrases = 0
CurrentVocalRunning = false
GapTimer = 0

//Crunch Variables
CrunchingActive = false
Repeats = 0
TotalCrunches = irandom_range(10,25)
CrunchingTimer = 0
CrunchReset = false
CrunchingPauseTimer = 0

XYMove = false

//Bucking Variables 
Bucking = false
BuckMovedOut = false
BMOPause = irandom_range(20,40)
Bucked = false

//Nodding Variables
NoddingActive = false
Nods = 0

//Move
MovingBackAfter = false
MovingBackSteps = 0
MovingBackAmount = 0
MovingBackAfterCapped = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop Vocalising

ex_audio_stop(VocSound)
ResumeBreathingBehaviour()
VocSound = "none"
VocType = "none"
VocReps = 0
VocIntensity = 0
ComeToInitialVol = false
StartedThisVocal = false
Stopping = true
StartingPitch = 0
TopVolume = 0
FiredAlarm = false
Vocalising = false
FiredAlarm = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bone Crunching

if CrunchingActive = true
and mBehavioursDeliberative.PercentForward &lt;= 0 {
if Repeats &lt; TotalCrunches {
if CrunchingTimer &gt; 0 {
CrunchingTimer -= 1 
} else if CrunchingTimer &lt;= 0 {
CrunchSound = choose("crunch1","crunch2","crunch3","crunch4","crunch5","crunch6","crunch7","crunch8","swallow")

ex_audio_set_volume(CrunchSound,1,0)
ex_audio_play(CrunchSound,0)
CrunchingTimer = irandom_range(200,400)
Repeats += 1
}
} else {
CrunchingActive = false
ex_audio_class_stop("crunches")
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vocal Phrase

if VocalPhrasing = true {
if VPhrases &gt; 0 {

if CurrentVocalRunning = false {
VocaliseChance(100)
CurrentVocalRunning = true
Vocalising = true
GapTimer = 0
}

if CurrentVocalRunning = true and Vocalising = false {
if GapTimer &gt; 0 {
GapTimer -= 1
} else if GapTimer &lt;= 0 {
VPhrases -= 1
CurrentVocalRunning = false
}
}

} else if VPhrases &lt;= 0 {
VocalPhrasing = false
StoppingVocalPhrasing = false
}

if StoppingVocalPhrasing = true {
StopVocalisation()
VPhrases = 0
VocalPhrasing = false
StoppingVocalPhrasing = false
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vocalisation

//Maintain Position Of Emitter
VX = oMouthCentre.x
VY = oMouthCentre.y

///Vocalising
if Vocalising = true {
if StartedThisVocal = false {
switch VocType {
case "longhigh":
VocSound = choose("longhigh1","longhigh2","longhigh3")
StepsOfSound = VocSteps
break;
case "longlow":
VocSound = choose("longhigh1","longhigh2","longhigh3")
StepsOfSound = VocSteps
break;
case "shorthigh":
VocSound = choose("shorthigh1","shorthigh2","shorthigh3","shorthigh4","shorthigh5","shorthigh6","shorthigh7","shorthigh8","shorthigh9","shorthigh11")
StepsOfSound = ex_audio_get_track_duration(VocSound) * 50
break;
case "shortlow":
VocSound = choose("shortlow1","shortlow2","shortlow3","shortlow4","shortlow5","shortlow6")
StepsOfSound = ex_audio_get_track_duration(VocSound) * 50
break;
}
CurrentStep = 0
ProgressionVariables()
StartScreenShake(StepsOfSound,3,2)
ex_audio_set_position(VocSound,VX,VY,0)
ex_audio_set_volume(VocSound,BothVolMod(TopVolume),0)
ex_audio_set_pitch(VocSound,StartingPitch,0)
if VocType = "shorthigh" or VocType = "shortlow" {
ex_audio_play(VocSound,false)
} else if VocType = "longhigh" or VocType = "longlow" {
ex_audio_play(VocSound,true)
}
mCreatureController.Pain += (1 + ((2/100) * (100 - mCreatureController.Alive)))
StartedThisVocal = true 
} else if StartedThisVocal = true {

CurrentStep += 1


if mBehavioursReactive.OpenMouthActive = false {
VocalProgression()
HoldBreathFor(5)
CurrentVocVolume = clamp(CurrentVocVolume,0,1)
CurrentVocPitch = clamp(CurrentVocPitch,PitchLowest,PitchHighest)

if VocType = "shorthigh" or VocType = "shortlow" {
if ex_audio_is_playing(VocSound) {
ex_audio_set_position(VocSound,VX,VY,0)
ex_audio_set_volume(VocSound,CurrentVocVolume,0)
ex_audio_set_pitch(VocSound,CurrentVocPitch,0)
} else if ex_audio_is_playing(VocSound) = false {
HoldBreathFor(10)
VocSound = "none"
VocType = "none"
VocReps = 0
VocIntensity = 0
ComeToInitialVol = false
StartedThisVocal = false
Stopping = true
StartingPitch = 0
TopVolume = 0
FiredAlarm = false
Vocalising = false
WriteToLog("Vocalised.")
}
} else if VocType = "longhigh" or VocType = "longlow" {
if CurrentStep &lt; StepsOfSound {
ex_audio_set_position(VocSound,VX,VY,0)
ex_audio_set_volume(VocSound,CurrentVocVolume,0)
ex_audio_set_pitch(VocSound,CurrentVocPitch,0)
} else {
ex_audio_stop(VocSound)
HoldBreathFor(10)
VocSound = "none"
VocType = "none"
VocReps = 0
VocIntensity = 0
ComeToInitialVol = false
StartedThisVocal = false
Stopping = true
StartingPitch = 0
TopVolume = 0
FiredAlarm = false
Vocalising = false
WriteToLog("Vocalised.")
MakeMouthSplatter(c_black)
}
}
}
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disappearing &amp; Reappearing

//If you come forward at all, stop crunching. 
if PercentForward &gt; 0 {
if mBehavioursDeliberative.CrunchingActive = true {
StopCrunchingBehaviour()
if mDriveCollectionMaster.EatWaitTimer &gt; 0 {
mDriveCollectionMaster.EatWaitTimer = 0
}
}
}

if PercentForward &lt; 100 {
if LessThanPresent = false {
LessThanPresent = true
}

if PercentForward &lt;= 70 {
if instance_exists(DScreen) = false {
DScreen = instance_create(room_width / 2,room_height / 2,mDisappearScreen)
}
}

} else {
if LessThanPresent = true {
LessThanPresent = false
view_wview[0] = 1400
view_hview[0] = 1920
view_xview[0] = 0
view_yview[0] = 1000
mWorldController.ViewportMinScale = 0.9
mWorldController.ViewportMaxScale = 1.14

if PercentForward &gt; 70 {
if instance_exists(DScreen) {
with DScreen {
instance_destroy()
}
}
}

}
}

if LessThanPresent = true {
view_wview[0] = 1400 + ((1199 / 100) * (100 - PercentForward))
view_hview[0] = 1920 + ((1199 / 100) * (100 - PercentForward))
mInterfaceController.BaseXView = 0 - ((1250 / 100) * (100 - PercentForward))
mInterfaceController.BaseYView = 1000 - ((1000 / 100) * (100 - PercentForward))
mWorldController.ViewportMinScale = 0.9 + ((2 / 100) * (100 - PercentForward))
mWorldController.ViewportMaxScale = 1.14 + ((2 / 100) * (100 - PercentForward))

with mWorldController {
CurrentViewportScale = clamp(CurrentViewportScale,ViewportMinScale,ViewportMaxScale)
}
}

if MovingActive = true {
switch MovingDir {

case "retreat":
if mInterfaceController.CurrentView = MacroView and mInterfaceController.ChangingView = false {
if PercentForward &gt; 0 {
if MoveCalc = false {
MovingTimer = 0
MovingStart = PercentForward
if MovingChange &gt; 5 {
ex_audio_set_volume("lowrumblerf",1.2,0)
ex_audio_set_pitch("lowrumblerf",random_range(0.8,0.9))
ex_audio_play("lowrumblerf",1)
}
MoveCalc = true
} else if MoveCalc = true {
if PercentForward &gt; 0 {
if MovingTimer &lt; MovingSpeed {
MovingTimer += 1
PercentForward = ease_inout_sine(MovingTimer, MovingStart, -MovingChange,MovingSpeed)
} else { 
ex_audio_set_volume("lowrumblerf",0,5)
MovingActive = false
}
} else {
ex_audio_set_volume("lowrumblerf",0,5)
MovingActive = false
}
}
} else { 
ex_audio_set_volume("lowrumblerf",0,5)
MovingActive = false
}
}
break;




case "comeforward":
if PercentForward &lt; 100 {
if MoveCalc = false {
MovingTimer = 0
MovingStart = PercentForward
if MovingChange &gt; 5 {
ex_audio_set_volume("lowrumblerf",1.2,0)
ex_audio_set_pitch("lowrumblerf",random_range(0.8,0.9))
ex_audio_play("lowrumblerf",1)
}
MoveCalc = true
} else if MoveCalc = true {
if PercentForward &lt; 100 {
if MovingTimer &lt; MovingSpeed {
MovingTimer += 1
PercentForward = ease_inout_sine(MovingTimer,MovingStart,MovingChange,MovingSpeed)
} else { 
//ex_audio_set_volume("lowrumblerf",0,5)
ex_audio_stop("lowrumblerf")
MovingActive = false
}
} else {
//ex_audio_set_volume("lowrumblerf",0,5)
ex_audio_stop("lowrumblerf")
MovingActive = false
}
}
} else {
//ex_audio_set_volume("lowrumblerf",0,5)
ex_audio_stop("lowrumblerf")
MovingActive = false
}
break;
}

} else {
//ex_audio_set_volume("lowrumblerf",0,5)
ex_audio_stop("lowrumblerf")
MovingActive = false
} 


if ex_audio_is_playing("lowrumblerf") {
if ex_audio_get_volume("lowrumblerf") &lt;= 0 {
ex_audio_stop("lowrumblerf")
}
}


if MovingActive = false {
if BuckingAfter = true {
StartBuck()
BuckingAfter = false
}
}


PercentForward = clamp(PercentForward,0,100)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bucking

Buck()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move To XY

if XYMove = true {
if XYMoveType = "movein" {
if mInterfaceController.ChangingView = false {
if MoveTime &lt; DestSpeed {
MoveTime += 1
mInterfaceController.BaseXView = ease_inout_sine(MoveTime,StartX,XChange,DestSpeed)
mInterfaceController.BaseYView = ease_inout_sine(MoveTime,StartY,YChange,DestSpeed)

} else {
XYMove = false
DestX = 0
DestY = 0
StartX = 0
StartY = 0
XDiff = 0
YDiff = 0
DestSpeed = 0
MoveTime = 0
DestZoom = 0
DestZoomSpeed = 0
ex_audio_stop("skintouch")

if MovingBackAfter = true {

if MovingActive = false  {
MovingActive = true
}
WriteToLog("Moved back or forward.")
MovingDir = "retreat"
MovingTimer = 0
MovingSpeed = MovingBackSteps
MoveCalc = false
MovingChange = MovingBackAmount
MovingBackAfter = false
MovingBackSteps = 0
MovingBackAmount = 0
MovingBackAfterCapped = false
}


}
}

} else if XYMoveType = "moveout" {
if mInterfaceController.ChangingView = false {
if MoveTime &lt; DestSpeed {
MoveTime += 1
mInterfaceController.BaseYView = ease_inout_sine(MoveTime,StartY,YChange,DestSpeed)
} else {
XYMove = false
DestX = 0
DestY = 0
StartX = 0
StartY = 0
XDiff = 0
YDiff = 0
DestSpeed = 0
MoveTime = 0
DestZoom = 0
DestZoomSpeed = 0
ex_audio_stop("skintouch")


if MovingBackAfter = true {

if MovingActive = false  {
MovingActive = true
}

WriteToLog("Moved back or forward.")
MovingDir = "retreat"
MovingTimer = 0
MovingSpeed = MovingBackSteps
MoveCalc = false

if MovingBackAfterCapped = true {
if PercentForward &lt;= 50 {
MovingChange = 0
} else if PercentForward &gt; 50 {
if MovingBackAmount &gt; (PercentForward - 50) {
MovingChange = (PercentForward - 50)
} else {
MovingChange = MovingBackAmount
}
}
} else {
MovingChange = MovingBackAmount
}
MovingBackAfter = false
MovingBackSteps = 0
MovingBackAmount = 0
MovingBackAfterCapped = false
}
}
}
}
}

if MoveXYAfter = true {
if PercentForward &gt;= 100 and MovingActive = false {
MoveToXY(AfterDestX,AfterDestY,AfterSpeed,AfterZoom,AfterZoomSpeed)
}
MoveXYAfter = false
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Nodding

if NoddingActive = true {
if Nods &gt; 0 {
if mInterfaceController.Jumping = false {
LittleJump()
Nods -= 1
}
} else {
NoddingActive = false 
Nods = 0
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
