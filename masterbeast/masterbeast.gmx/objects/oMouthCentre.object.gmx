<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sMouthCentreInvisible</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>mMouthParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

ClosedMinX = x
ClosedMinY = y
ClosedXScale = image_xscale
ClosedYScale = image_yscale
BaseXScale = ClosedXScale
depth = MouthOuterLayer
OpenMaxX = ClosedMinX - 5
OpenMaxY = ClosedMinY + 66

//Limits
YUpLimit = ClosedMinY - 100
YDownLimit = ClosedMinY + 100
XLeftLimit = ClosedMinX - 100
XRightLimit = ClosedMinX + 100
OpenXScale = 0.3
OpenYScale = 0.3

//Differences

XDifference = 0
YDifference = 0
XScaleDifference = 0
YScaleDifference = 0
PercentageDiff = 0


Touching = false
LastPercentage = 0
ResetXY = true

BreathingMod = 0
BreathOpenAmount = 0.1
RobDiff = 0
TwitchDiff = 0
VibrateDiff = 0
VibrateTimer =1
VibrateDir = "left"

MouthSurface = surface_create(room_width,800)
MouthSurfaceX = 0
MouthSurfaceY = 1953

ReadyToClack = true
Snapping = false
SnapNumber = 0
MouthSnapReactionTimer = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open If Grabbed

MouthSnapReactions()

if position_meeting(mouse_x,mouse_y,self)
and mouse_check_button_pressed(mb_any)
and AmountForward(70)
and instance_exists(mDebug) = false
and mInterfaceController.CurrentHandUse = "none"
and Touching = false
and mCreatureController.Alive &lt;= 0 {
if mInterfaceController.GrabbingBodyPart = false {
mInterfaceController.GrabbingBodyPart = true
}
if mDriveCollectionMaster.CoughTimer &gt; 0 {
mDriveCollectionMaster.CoughTimer -= 2000
}
WriteToLog("Grabbing mouth.")
Touching = true 
ex_audio_set_pitch("movebp",random_range(0.95,1.05),0)
ex_audio_play("movebp",1)
ResetXY = false
}

if Touching = true {
if mInterfaceController.DragSpeed &lt;= 0 {
if ex_audio_is_paused("movebp") = false {
ex_audio_pause("movebp")
}
} else {
if ex_audio_is_paused("movebp") {
ex_audio_resume("movebp")
}
}
if mInterfaceController.DragBegun = true {
//Closing Mouth
if mInterfaceController.DragDirection &gt; point_direction(mouse_x,mouse_y,x,y) - 30
and mInterfaceController.DragDirection &lt; point_direction(mouse_x,mouse_y,x,y) + 30
{
RobDiff -= 0.02 
}
//Opening Mouth
if mInterfaceController.DragDirection &gt; point_direction(x,y,mouse_x,mouse_y) - 30
and mInterfaceController.DragDirection &lt; point_direction(x,y,mouse_x,mouse_y) + 30
{
RobDiff += 0.02
}
}

if mouse_check_button_released(mb_any) {
mInterfaceController.GrabbingBodyPart = false 
ex_audio_stop("movebp")
Touching = false
}
}

if Touching = false {

if RobDiff &lt; 0 - 0.4 {
RobDiff += 0.03
}
if RobDiff &gt; 0 + 0.4 {
RobDiff -= 0.03
}
if RobDiff &gt; (0 - 0.04) and RobDiff &lt; (0 + 0.04) {
RobDiff = 0
}
}

RobDiff = clamp(RobDiff,0,60)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate Differences

if mBehavioursReactive.BreathingType = "both" or mBehavioursReactive.BreathingType = "mouth" {
Breathing()
} else {
if BreathingMod &gt; 0 {
BreathingMod -= 5
} else {
BreathingMod = 0
}

}

XDifference = x - ClosedMinX
YDifference = y - ClosedMinY
XScaleDifference = image_xscale - ClosedXScale
YScaleDifference = image_yscale - ClosedYScale

FearModOpen = ((0.2 / 100) * mEmotionSubController.FearActivation)
ThirstModOpen = ((0.2 / 100) * mCreatureController.Thirst)
SurpriseModOpen = ((0.2 / 100) * mEmotionSubController.SurpriseActivation)
LustModOpen = ((0.2 / 100) * mCreatureController.Lust)

image_xscale = BaseXScale + ((BreathOpenAmount / 100) * BreathingMod) + FearModOpen + ThirstModOpen + SurpriseModOpen + LustModOpen + RobDiff + TwitchDiff + mBehavioursReactive.MouthSneezeMod

PercentageDiff = ((image_xscale - ClosedXScale) / (OpenXScale - ClosedXScale) * 100)
PercentageDiff = clamp(PercentageDiff,0,100)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Other Dimensions Calculate

y = ClosedMinY + (oNose1.YDifference / 2) + (((OpenMaxY - ClosedMinY) / 100) * PercentageDiff) 
x = ClosedMinX - (((ClosedMinX - OpenMaxX) / 100) * PercentageDiff) + VibrateDiff
image_yscale = ClosedYScale + (((OpenYScale - ClosedYScale) / 100) * PercentageDiff)


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vibrate If Vocalising

if mBehavioursDeliberative.Vocalising = true and ex_audio_get_volume(mBehavioursDeliberative.VocSound) &gt; 0 {
if VibrateTimer &gt; 0 {
VibrateTimer -= 1
if VibrateDir = "left" {
VibrateDiff -= (14 * mBehavioursDeliberative.VocIntensity)
} else if VibrateDir = "right" {
VibrateDiff += (14 * mBehavioursDeliberative.VocIntensity)
}
} else if VibrateTimer &lt;= 0 {
if VibrateDir = "left" {
VibrateDir = "right" 
} else if VibrateDir = "right" {
VibrateDir = "left"
}
VibrateTimer = 1
}

} else {
VibrateDiff = 0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Close To Base
if mBehavioursDeliberative.Vocalising = false
and Touching = false {
if oMouthCentre.BaseXScale &gt; 0 {
oMouthCentre.BaseXScale -= 0.01
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stay Within Limits

x = clamp(x,XLeftLimit,XRightLimit)
y = clamp(y,YUpLimit,YDownLimit)
image_xscale = clamp(image_xscale,ClosedXScale,OpenXScale)
image_yscale = clamp(image_yscale,ClosedYScale,OpenYScale)
BaseXScale = clamp(BaseXScale,0,OpenXScale)

 


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clacking

if ReadyToClack = true {
if PercentageDiff != 0 {
ClackSound = choose("clack1","clack2","clack3","clack4","clack5","clack6")
ex_audio_set_volume(ClackSound,BothVolMod(0.1),0)
ex_audio_set_position(ClackSound,oMouthCentre.x,oMouthCentre.y,1)
ex_audio_play(ClackSound,0)
ReadyToClack = false
}
}

if PercentageDiff = 0 {
if ReadyToClack = false {
ReadyToClack = true
}
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Touch Liquid

if mouse_check_button_pressed(mb_any) and position_meeting(mouse_x,mouse_y,self) {
TouchLiquid("drool")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Wrinkles &amp; Surface (mouth with alpha-ed background)

if !surface_exists(MouthSurface) {MouthSurface = surface_create(oHead2.sprite_width,800)}


//Central Mouth Wrinkles
draw_sprite_ext(
sWrinkleMouthBottom,
1,
x,
y + 150 + ((150 / 100) * PercentageDiff),
0.1 + ((0.2 / 100) * PercentageDiff),
0.1 + ((0.2 / 100) * PercentageDiff),
0,
c_white,
1
)


draw_sprite_ext(
sWrinkleMouthTop2,
1,
x - 70 - ((40 / 100) * oMouthCentre.PercentageDiff),
y - 100 - ((30 / 100) * oMouthCentre.PercentageDiff),
0.2 + ((0.1 / 100) * oMouthCentre.PercentageDiff),
0.2 + ((0.1 / 100) * oMouthCentre.PercentageDiff),
0 + ((20 / 100) * oMouthCentre.PercentageDiff),
c_white,
0.9
)

draw_sprite_ext(
sWrinkleMouthTop4,
1,
x + 75 + ((40 / 100) * oMouthCentre.PercentageDiff),
y - 100 - ((30 / 100) * oMouthCentre.PercentageDiff),
0.2 + ((0.1 / 100) * oMouthCentre.PercentageDiff),
0.2 + ((0.1 / 100) * oMouthCentre.PercentageDiff),
0 - ((20 / 100) * oMouthCentre.PercentageDiff),
c_white,
0.9
)





draw_sprite_ext(
sWrinkleCheekLeftUpper,
1,
x - 100 - ((140 / 100) * oMouthCentre.PercentageDiff),
y - 50 - ((40 / 100) * oMouthCentre.PercentageDiff),
0.2 + ((0.1 / 100) * oMouthCentre.PercentageDiff),
0.2 + ((0.1 / 100) * oMouthCentre.PercentageDiff),
0 - ((10 / 100) * oMouthCentre.PercentageDiff),
c_white,
1
)

draw_sprite_ext(
sWrinkleCheekRightUpper,
1,
x + 40 + ((110 / 100) * oMouthCentre.PercentageDiff),
y - 55 - ((40 / 100) * oMouthCentre.PercentageDiff),
0.2 + ((0.1 / 100) * oMouthCentre.PercentageDiff),
0.2 + ((0.1 / 100) * oMouthCentre.PercentageDiff),
5 + ((10 / 100) * oMouthCentre.PercentageDiff),
c_white,
1
)

draw_sprite_ext(
sWrinkleCheekLeftLower,
1,
x - 350 - ((70 / 100) * PercentageDiff),
y + 350 + ((70 / 100) * PercentageDiff),
0 + ((0.3 / 100) * PercentageDiff),
0 + ((0.3 / 100) * PercentageDiff),
0 + ((30 / 100) * PercentageDiff),
c_white,
1
)

draw_sprite_ext(
sWrinkleCheekRightLower,
1,
x + 300 + ((70 / 100) * PercentageDiff),
y + 300 + ((70 / 100) * PercentageDiff),
0 + ((0.3 / 100) * PercentageDiff),
0 + ((0.3 / 100) * PercentageDiff),
0 - ((30 / 100) * PercentageDiff),
c_white,
1
)

surface_set_target(MouthSurface)
draw_clear_alpha(c_black,0)
draw_sprite_ext(sMouthCentreInvisible,1,oMouthCentre.x - MouthSurfaceX,
oMouthCentre.y - MouthSurfaceY,oMouthCentre.image_xscale,
oMouthCentre.image_yscale,oMouthCentre.direction,c_white,1)
draw_sprite_ext(sMouthTopInvisible,1,oMouthTop.x - MouthSurfaceX,oMouthTop.y - MouthSurfaceY,oMouthTop.image_xscale,
oMouthTop.image_yscale,oMouthTop.direction,c_white,1)

DrawPathSprite(
pMouthLeft,
oMouthLeft.x - 210 - MouthSurfaceX,
oMouthLeft.y - 174 - MouthSurfaceY,
30,
sTest,
1,
1,
1,
c_white,
1,
8,
0
)

DrawPathSprite(
pMouthRight,
oMouthRight.x - MouthSurfaceX,
oMouthRight.y - 174 - MouthSurfaceY,
30,
sTest2,
1,
1,
1,
c_white,
1,
8,
0
)

draw_set_colour_write_enable(1,1,1,0)
draw_sprite_ext(sMouthBackWall,0,0,0,3,5,0,c_white,1)
draw_sprite_ext(sMouthInside,0,oMouthGullet.x - MouthSurfaceX, oMouthGullet.y - MouthSurfaceY,oMouthGullet.image_xscale,oMouthGullet.image_yscale,0,c_white,1)
draw_sprite_ext(sMouthShader,0,0,0,0.5,0.5,0,c_white,0.5)
draw_sprite_ext(sTeethBottom,0,oTeethBottom.x - MouthSurfaceX, oTeethBottom.y - MouthSurfaceY,1,1,0,c_white,1)
draw_sprite_ext(sTeethBottom,0,oTeethBottom.x - MouthSurfaceX, oTeethBottom.y - MouthSurfaceY,1,1,0,c_black,0.5 - ((0.3 / 100) * oMouthCentre.PercentageDiff))
draw_sprite_ext(sTeethTop,0,oTeethTop.x - MouthSurfaceX, oTeethTop.y - MouthSurfaceY,1,1,0,c_white,1)
draw_sprite_ext(sTeethTop,0,oTeethTop.x - MouthSurfaceX, oTeethTop.y - MouthSurfaceY,1,1,0,c_black,0.5 - ((0.3 / 100) * oMouthCentre.PercentageDiff))
draw_set_colour_write_enable(1,1,1,1)

surface_reset_target()
draw_surface_ext(MouthSurface,MouthSurfaceX,MouthSurfaceY,1,1,0,c_white,1)



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
