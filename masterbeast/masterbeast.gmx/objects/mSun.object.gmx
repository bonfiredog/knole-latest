<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

depth = ShaderLayer
DistanceFromCentreOfRoom = 3000
RiseAndSetYPlane = room_height / 2
RiseDirection = 180
SetDirection = 0
x = (room_width / 2) - DistanceFromCentreOfRoom
y = RiseAndSetYPlane

CurrentR = 0
CurrentG = 0
CurrentB = 0

CurrentSunColour = make_colour_rgb(CurrentR,CurrentG,CurrentB)

CurrentDirection = 0
DirectionModifier = 0
CurrentSunAlpha = 0

//Twilight Morning Attributes
MorningTwilightStartR = 0
MorningTwilightStartG = 0
MorningTwilightStartB = 0
MorningTwilightStartAlpha = 0.9

MorningTwilightMiddleR = 17
MorningTwilightMiddleG = 43
MorningTwilightMiddleB = 145

MorningTwilightEndR = 227
MorningTwilightEndG = 148
MorningTwilightEndB = 0
MorningTwilightEndAlpha = 0.7

MorningTwilightX = (room_width / 2) - DistanceFromCentreOfRoom
MorningTwilightY = RiseAndSetYPlane

//Dawn Attributes

DawnR = 240
DawnG = 190
DawnB = 81

DawnX = MorningTwilightX
DawnY = MorningTwilightY

DawnAlpha = 0.7

//Midday Attributes
MiddayR = 250
MiddayG = 255
MiddayB = 120

MiddayX = (room_width / 2) + lengthdir_x(DistanceFromCentreOfRoom, 90)
MiddayY = (room_height / 2) + lengthdir_y(DistanceFromCentreOfRoom, 90)

MiddayAlpha = 0.5

//Sunset Attributes

SunsetR = 250
SunsetG = 160
SunsetB = 36

SunsetX = (room_width / 2) + DistanceFromCentreOfRoom
SunsetY = RiseAndSetYPlane

SunsetAlpha = 0.7

//Twilight Evening Attributes

EveningTwilightStartR = 189
EveningTwilightStartG = 63
EveningTwilightStartB = 21
EveningTwilightStartAlpha = 0.7

EveningTwilightMiddleR = 17
EveningTwilightMiddleG = 43
EveningTwilightMiddleB = 145

EveningTwilightEndR = 0
EveningTwilightEndG = 0
EveningTwilightEndB = 0
EveningTwilightEndAlpha = 0.9

EveningTwilightX = (room_width / 2) +  DistanceFromCentreOfRoom
EveningTwilightY = RiseAndSetYPlane







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Colour Change Throughout Day

if mWorldController.InitialSunMoonSetup = true {

//Morning Twilight 1st Half

if mWorldController.MorningTwilightInProgress = true and mWorldController.CurrentTwilightMinute &lt;= 15 {

if MorningTwilightStartR &lt; MorningTwilightMiddleR {
CurrentR = CurrentR + (((abs(MorningTwilightMiddleR - MorningTwilightStartR) / 15) / 60) / room_speed)
} else if MorningTwilightStartR &gt; MorningTwilightMiddleR {
CurrentR = CurrentR - (((abs(MorningTwilightMiddleR - MorningTwilightStartR) / 15) / 60) / room_speed)
} else if MorningTwilightStartR = MorningTwilightMiddleR {
CurrentR = MorningTwilightStartR
}


if MorningTwilightStartG &lt; MorningTwilightMiddleG {
CurrentG = CurrentG + (((abs(MorningTwilightMiddleG - MorningTwilightStartG) / 15) / 60) / room_speed)
} else if MorningTwilightStartG &gt; MorningTwilightMiddleG {
CurrentG = CurrentG - (((abs(MorningTwilightMiddleG - MorningTwilightStartG) / 15) / 60) / room_speed)
} else if MorningTwilightStartG = MorningTwilightMiddleG {
CurrentG = MorningTwilightStartG
}

if MorningTwilightStartB &lt; MorningTwilightMiddleB {
CurrentB = CurrentB + (((abs(MorningTwilightMiddleB - MorningTwilightStartB) / 15) / 60) / room_speed)
} else if MorningTwilightStartB &gt; MorningTwilightMiddleB {
CurrentB = CurrentB - (((abs(MorningTwilightMiddleB - MorningTwilightStartB) / 15) / 60) / room_speed)
} else if MorningTwilightStartB = MorningTwilightMiddleB {
CurrentB = MorningTwilightStartB
}

CurrentSunColour = make_colour_rgb(CurrentR,CurrentG,CurrentB)

//Morning Twilight 2nd Half

} else if mWorldController.MorningTwilightInProgress = true and mWorldController.CurrentTwilightMinute &gt; 15 {

if MorningTwilightMiddleR &lt; DawnR {
CurrentR = CurrentR + (((abs(DawnR - MorningTwilightMiddleR) / 15) / 60) / room_speed)
} else if MorningTwilightMiddleR &gt; DawnR {
CurrentR = CurrentR - (((abs(DawnR - MorningTwilightMiddleR) / 15) / 60) / room_speed)
} else if MorningTwilightMiddleR = DawnR {
CurrentR = DawnR
}

if MorningTwilightMiddleG &lt; DawnG {
CurrentG = CurrentG + (((abs(DawnG - MorningTwilightMiddleG) / 15) / 60) / room_speed)
} else if MorningTwilightMiddleG &gt; DawnG {
CurrentG = CurrentG - (((abs(DawnG - MorningTwilightMiddleG) / 15) / 60) / room_speed)
} else if MorningTwilightMiddleG = DawnG {
CurrentG = DawnG
}

if MorningTwilightMiddleB &lt; DawnB {
CurrentB = CurrentB + (((abs(DawnB - MorningTwilightMiddleB) / 15) / 60) / room_speed)
} else if MorningTwilightStartB &gt; DawnB {
CurrentB = CurrentB - (((abs(DawnB - MorningTwilightMiddleB) / 15) / 60) / room_speed)
} else if MorningTwilightMiddleB = DawnB {
CurrentB = DawnB
}

CurrentSunColour = make_colour_rgb(CurrentR,CurrentG,CurrentB)


//Dawn -&gt; Midday
} else if mWorldController.CurrentSunMinute &gt; 30 and mWorldController.CurrentSunMinute &lt; (mWorldController.TodaySunshineLength / 2) {


if DawnR &lt; MiddayR {
CurrentR = CurrentR + ((abs(MiddayR - DawnR) / (mWorldController.TodaySunshineLength / 2) / 60) / room_speed)
} else if DawnR &gt; MiddayR {
CurrentR = CurrentR - ((abs(MiddayR - DawnR) / (mWorldController.TodaySunshineLength / 2) / 60) / room_speed)
} else if DawnR = MiddayR {
CurrentR = DawnR
}

if DawnG &lt; MiddayG {
CurrentG = CurrentG + ((abs(MiddayG - DawnG) / (mWorldController.TodaySunshineLength / 2) / 60) / room_speed)
} else if DawnG &gt; MiddayG {
CurrentG = CurrentG - ((abs(MiddayG - DawnG) / (mWorldController.TodaySunshineLength / 2) / 60) / room_speed)
} else if DawnG = MiddayG {
CurrentG = DawnG
}

if DawnB &lt; MiddayB {
CurrentB = CurrentB + ((abs(MiddayB - DawnB) / (mWorldController.TodaySunshineLength / 2) / 60) / room_speed)
} else if DawnB &gt; MiddayB {
CurrentB = CurrentB - ((abs(MiddayB - DawnB) / (mWorldController.TodaySunshineLength / 2) / 60) / room_speed)
} else if DawnB = MiddayB {
CurrentB = DawnB
}

CurrentSunColour = make_colour_rgb(CurrentR,CurrentG,CurrentB)

//Midday -&gt; Sunset
} else if (mWorldController.CurrentSunMinute &gt; (mWorldController.TodaySunshineLength / 2)) and mWorldController.CurrentSunMinute &lt; (mWorldController.TodayLength - 30) {

if MiddayR &lt; SunsetR {
CurrentR = CurrentR + ((abs(MiddayR - SunsetR) / (mWorldController.TodaySunshineLength / 2) / 60) / room_speed)
} else if MiddayR &gt; SunsetR {
CurrentR = CurrentR - ((abs(MiddayR - SunsetR) / (mWorldController.TodaySunshineLength / 2) / 60) / room_speed)
}  else if MiddayR = SunsetR {
CurrentR = SunsetR
}

if MiddayG &lt; SunsetG {
CurrentG = CurrentG + ((abs(MiddayG - SunsetG) / (mWorldController.TodaySunshineLength / 2) / 60) / room_speed)
} else if MiddayG &gt; SunsetG {
CurrentG = CurrentG - ((abs(MiddayG - SunsetG) / (mWorldController.TodaySunshineLength / 2) / 60) / room_speed)
} else if MiddayG = SunsetG {
CurrentG = SunsetG
}

if MiddayB &lt; SunsetB {
CurrentB = CurrentB + ((abs(MiddayB - SunsetB) / (mWorldController.TodaySunshineLength / 2) / 60) / room_speed)
} else if MiddayB &gt; SunsetB {
CurrentB = CurrentB - ((abs(MiddayB - SunsetB) / (mWorldController.TodaySunshineLength / 2) / 60) / room_speed)
} else if MiddayB = SunsetB {
CurrentB = SunsetB
}

CurrentSunColour = make_colour_rgb(CurrentR,CurrentG,CurrentB)



//Evening Twilight 1st Half
} else if mWorldController.EveningTwilightInProgress = true and mWorldController.CurrentTwilightMinute &lt;= 15 {

if SunsetR &gt; EveningTwilightMiddleR {
CurrentR = CurrentR - (((abs(SunsetR - EveningTwilightMiddleR) / 15) / 60) / room_speed)
} else if SunsetR &lt; EveningTwilightMiddleR {
CurrentR = CurrentR + (((abs(SunsetR - EveningTwilightMiddleR) / 15) / 60) / room_speed)
} else if SunsetR = EveningTwilightMiddleR {
CurrentR = SunsetR
}

if SunsetG &gt; EveningTwilightMiddleG {
CurrentG = CurrentG - (((abs(SunsetG - EveningTwilightMiddleG) / 15) / 60) / room_speed)
} else if SunsetG &lt; EveningTwilightMiddleG {
CurrentG = CurrentG + (((abs(SunsetG - EveningTwilightMiddleG) / 15) / 60) / room_speed)
} else if SunsetG = EveningTwilightMiddleG {
CurrentG = SunsetG
}

if SunsetB &gt; EveningTwilightMiddleB {
CurrentB = CurrentB - (((abs(SunsetB - EveningTwilightMiddleB) / 15) / 60) / room_speed)
} else if SunsetB &lt; EveningTwilightMiddleB {
CurrentB = CurrentB + (((abs(SunsetB - EveningTwilightMiddleB) / 15) / 60) / room_speed)
} else if SunsetB = EveningTwilightMiddleB {
CurrentB = SunsetB
}

CurrentSunColour = make_colour_rgb(CurrentR,CurrentG,CurrentB)


//Evening Twilight 2nd Half
} else if mWorldController.EveningTwilightInProgress = true and mWorldController.CurrentTwilightMinute &gt; 15 {

if EveningTwilightMiddleR &gt; EveningTwilightEndR {
CurrentR = CurrentR - (((abs(EveningTwilightMiddleR - EveningTwilightEndR) / 15) / 60) / room_speed)
} else if EveningTwilightMiddleR &lt; EveningTwilightEndR {
CurrentR = CurrentR + (((abs(EveningTwilightMiddleR - EveningTwilightEndR) / 15) / 60) / room_speed)
} else if EveningTwilightMiddleR = EveningTwilightEndR {
CurrentR = EveningTwilightMiddleR
}

if EveningTwilightMiddleG &gt; EveningTwilightEndG {
CurrentG = CurrentG - (((abs(EveningTwilightMiddleG - EveningTwilightEndG) / 15) / 60) / room_speed)
} else if EveningTwilightMiddleG &lt; EveningTwilightEndG {
CurrentG = CurrentG + (((abs(EveningTwilightMiddleG - EveningTwilightEndG) / 15) / 60) / room_speed)
} else if EveningTwilightMiddleG = EveningTwilightEndG {
CurrentG = EveningTwilightMiddleG
}

if EveningTwilightMiddleB &gt; EveningTwilightEndB {
CurrentB = CurrentB - (((abs(EveningTwilightMiddleB - EveningTwilightEndB) / 15) / 60) / room_speed)
} else if EveningTwilightMiddleB &lt; EveningTwilightEndB {
CurrentB = CurrentB + (((abs(EveningTwilightMiddleB - EveningTwilightEndB) / 15) / 60) / room_speed)
} else if EveningTwilightMiddleB = EveningTwilightEndB {
CurrentB = EveningTwilightMiddleB
}

CurrentSunColour = make_colour_rgb(CurrentR,CurrentG,CurrentB)

}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sun Alpha Change Throughout The Day

if mWorldController.InitialSunMoonSetup = true {

//Morning Twilight

if mWorldController.MorningTwilightInProgress = true {

CurrentSunAlpha = CurrentSunAlpha - (((abs(MorningTwilightStartAlpha - MorningTwilightEndAlpha) / 30) / 60) / room_speed)

//Dawn -&gt; Midmorning
} else if mWorldController.CurrentSunMinute &gt; 30 and mWorldController.CurrentSunMinute &lt;= 70 {

CurrentSunAlpha = CurrentSunAlpha - (((abs(MiddayAlpha - DawnAlpha)) / 40 / 60) / room_speed)

//Midmorning -&gt; Midday

} else if mWorldController.CurrentSunMinute &gt; 70 and mWorldController.CurrentSunMinute &lt;= (mWorldController.TodaySunshineLength / 2) {

CurrentSunAlpha = MiddayAlpha

//Midday -&gt; Midafternoon
} else if (mWorldController.CurrentSunMinute &gt; (mWorldController.TodaySunshineLength / 2)) and mWorldController.CurrentSunMinute &lt;= (mWorldController.TodayLength - 90) {

CurrentSunAlpha = MiddayAlpha

//Midafternoon -&gt; Sunset
} else if (mWorldController.CurrentSunMinute &gt; (mWorldController.TodayLength - 90)) and mWorldController.CurrentSunMinute &lt; (mWorldController.TodaySunshineLength) {

CurrentSunAlpha = CurrentSunAlpha + (((abs(MiddayAlpha - SunsetAlpha)) / 60 / 60) / room_speed)

//Evening Twilight 
} else if mWorldController.EveningTwilightInProgress = true {

CurrentSunAlpha = CurrentSunAlpha + (((abs(EveningTwilightStartAlpha - EveningTwilightEndAlpha) / 30) / 60) / room_speed)

}

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroying Self At End Of Day

if mWorldController.InitialSunMoonSetup = true {
if current_hour = mWorldController.ThisEveningTwilightEndHour and current_minute = mWorldController.ThisEveningTwilightEndMinute {
mWorldController.TodaySunCreated = false
WriteToLog("Sun destroyed at end of day.")
instance_destroy()
}

} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
