<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tracks = ds_list_create();
trackIds = ds_map_create();
trackSetVol = ds_map_create();
trackActualVol = ds_map_create();

trackSolo = ds_map_create();
trackMute = ds_map_create();

event_user(0); //add custom tracks
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clean up
for(var i=0; i&lt;ds_list_size(tracks); i++)
{
    var SOUND_INDEX = ds_list_find_value(tracks,i);
    var SOUND_ID = ds_map_find_value(trackIds, SOUND_INDEX);
    audio_stop_sound(SOUND_ID);
}

ds_list_destroy(tracks);

ds_map_destroy(trackIds);
ds_map_destroy(trackActualVol);
ds_map_destroy(trackSetVol);
ds_map_destroy(trackSolo);
ds_map_destroy(trackMute);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///apply trackSetVol values
for(var i=0; i&lt;ds_list_size(tracks); i++)
{
    var SOUND_INDEX = ds_list_find_value(tracks, i);
    var VOLUME = ds_map_find_value(trackActualVol, SOUND_INDEX);
    var LEVEL = ds_map_find_value(trackSetVol, SOUND_INDEX);
    
    VOLUME += (LEVEL - VOLUME) * 0.05;
    ds_map_replace(trackActualVol,SOUND_INDEX,VOLUME);
    
    var SOUND_ID = ds_map_find_value(trackIds, SOUND_INDEX);
    
    if(trackdog_track_is_muted(SOUND_INDEX))
        VOLUME = 0;
    else if(trackdog_any_track_is_soloed() 
     and not trackdog_track_is_soloed(SOUND_INDEX))
        VOLUME = 0;
    
    audio_sound_gain(SOUND_ID, VOLUME, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy event
event_perform(ev_destroy,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw mixer

var i, X, Y, C, H;
var W = 400;
var H = 140;
var Y = room_height/2 + 32;
var METER_WIDTH = 7;

var METER_FILL = make_color_hsv(120,240,160);
var METER_OUTLINE = c_black;
var MUTE_FILL = c_red;

for(i=0; i&lt;ds_list_size(tracks); i++)
{
    var SOUND_INDEX = ds_list_find_value(tracks,i);
    X = room_width/2 -W*0.5 + (i+0.5)/ds_list_size(tracks) * W;
    
    //C = merge_colour(background_color, c_black, 0.6);
    //draw_rectangle_colour(0,0,room_width,room_height,background_colour,background_colour,C,C,0);
    
    C = METER_OUTLINE;
    draw_rectangle_color(X-METER_WIDTH,Y-H,X+METER_WIDTH,Y,C,C,C,C,1);
    
    var TOP = Y-(H*ds_map_find_value(trackActualVol,SOUND_INDEX));
    C = METER_FILL;
    if(trackdog_any_track_is_soloed())
        C = MUTE_FILL;
    if(trackdog_track_is_muted(SOUND_INDEX))
        C = MUTE_FILL;
    if(trackdog_track_is_soloed(SOUND_INDEX))
        C = METER_FILL;
    draw_rectangle_color(X-METER_WIDTH,TOP,X+METER_WIDTH,Y,C,C,C,C,0);
    
    draw_set_halign(fa_right);
    draw_set_valign(fa_middle);
    draw_text_ext_transformed_color(X,Y+25, audio_get_name(SOUND_INDEX),-1,200,1,1,45,C,C,C,C,1);
    
    
    TOP = Y-(H*ds_map_find_value(trackSetVol,SOUND_INDEX));
    C = METER_OUTLINE;
    draw_rectangle_color(X-METER_WIDTH,TOP-2,X+METER_WIDTH,TOP+2,C,C,C,C,0);
    
    if(trackdog_track_is_muted(SOUND_INDEX))
    {
        C = MUTE_FILL;
        draw_set_halign(fa_center);
        draw_text_colour(X - 7,Y + 13,"M",C,C,C,C,1);
    }
    
    if(trackdog_track_is_soloed(SOUND_INDEX))
    {
        C = METER_FILL;
        draw_set_halign(fa_center);
        draw_text_colour(X + 7,Y + 13,"S",C,C,C,C,1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,4</point>
    <point>4,4</point>
  </PhysicsShapePoints>
</object>
