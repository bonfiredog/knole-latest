<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

// @version: 1.0.0

// properties
_ex_audio_sounds       = -1;
_ex_audio_classes      = -1;

_ex_audio_listener[0]  = 0;
_ex_audio_listener[1]  = 0;
_ex_audio_listener[2]  = 0;
_ex_audio_listener[3]  = 0;
_ex_audio_listener[4]  = 0;
_ex_audio_listener[5]  = 0;
_ex_audio_listener[6]  = 0;
_ex_audio_listener[7]  = 0;
_ex_audio_listener[8]  = 0;
_ex_audio_listener[9]  = 0;
_ex_audio_listener[10] = 0;
_ex_audio_listener[11] = 0;

_ex_audio_channel_number = 128;
_ex_audio_debug_mode     = 0;
_ex_audio_falloff_model  = 0;

_ex_audio_debug_mode = false;
_suspended           = false;

// extension database
enum _ex_audio {
    _name                  = 0,
    _resource              = 1,
    _emitter               = 2,
    _duration              = 3,
    _priority              = 4,
    _volume                = 5,
    _pitch                 = 6,
    _x                     = 7,
    _y                     = 8,
    _z                     = 9,
    _falloff_ref           = 10,
    _falloff_max           = 11,
    _falloff_factor        = 12,
    _suspended             = 13,
    _paused                = 14,
    _looping               = 15,
    _velocity_x            = 16,
    _velocity_y            = 17,
    _velocity_z            = 18,
    _last_started          = 19,
    _channel               = 20,
    _audio_group           = 21,
    _external              = 22,
    _playing               = 23,
    _position              = 24,
    _position_previous     = 25,
    _fade_volume_start     = 26,
    _fade_volume_end       = 27,
    _fade_volume_position  = 28,
    _fade_volume_duration  = 29,
    _fade_volume_easing    = 30,
    _fade_pitch_start      = 31,
    _fade_pitch_end        = 32,
    _fade_pitch_position   = 33,
    _fade_pitch_duration   = 34,
    _fade_pitch_easing     = 35
}

enum _ex_audio_classes {
    _name = 0,
    _grid = 1
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update audio

if (_suspended == true) {
    exit;
}

// handle audio if any sounds exist
var _ex_sound_count = ex_audio_count();
if (_ex_sound_count &lt; 1) {
    exit;
}

// loop through sounds and update them
for (var _i=0; _i &lt; _ex_sound_count; ++_i) {

    // get current sound in the loop
    var _name = _ex_audio_sounds[# 0, _i];
    var _position = 0;
    
    var _y = ds_grid_value_y(_ex_audio_sounds, 0, 0, 1, _ex_sound_count, _name);
    if (_y &lt; 0) {
        continue;
    }
    
    // handle volume fade
    if (
        _ex_audio_sounds[# _ex_audio._fade_volume_duration, _y] &gt; -1 and 
        _ex_audio_sounds[# _ex_audio._fade_volume_end, _y] != _ex_audio_sounds[# _ex_audio._volume, _y]
    ) {
        
        var _value          =  _ex_audio_sounds[# _ex_audio._volume,               _y];
        var _value_start    =  _ex_audio_sounds[# _ex_audio._fade_volume_start,    _y];
        var _value_end      =  _ex_audio_sounds[# _ex_audio._fade_volume_end,      _y];
        var _value_position =  _ex_audio_sounds[# _ex_audio._fade_volume_position, _y];
        var _value_duration =  _ex_audio_sounds[# _ex_audio._fade_volume_duration, _y];
        var _value_easing   =  _ex_audio_sounds[# _ex_audio._fade_volume_easing,   _y];
        
        _value_position += 1;
        
        if (_value_easing == -1) {
            _value = lerp(_value_start, _value_end, ex_audio_math_smoothstep(0, 1, _value_position / _value_duration));
        } else {
            _value = lerp(_value_start, _value_end, script_execute(_value_easing, _value_position, 0, clamp(_value_position * _value_duration, 0, 1), _value_duration));
        } 
        
        // update volume
        audio_emitter_gain(_ex_audio_sounds[# _ex_audio._emitter, _y], _value);
        _ex_audio_sounds[# _ex_audio._volume, _y] = _value;
        
        // update fade volume position
        _ex_audio_sounds[# _ex_audio._fade_volume_position, _y] = _value_position;
        
        // if over duration, stop fading
        if (_value_position &gt;= _value_duration) {
            _ex_audio_sounds[# _ex_audio._fade_volume_duration, _y] = -1;
            if (ex_audio_get_debug_mode()) {
                show_debug_message('exAudio: sound "'+_name+'" has ended fading its volume to '+string( _value_end ));
            }
        }
        
    }

    // handle pitch fade
    if (
        _ex_audio_sounds[# _ex_audio._fade_pitch_duration, _y] &gt; -1 and 
        _ex_audio_sounds[# _ex_audio._fade_pitch_end, _y] != _ex_audio_sounds[# _ex_audio._pitch, _y]
    ) {
        
        var _value          =  _ex_audio_sounds[# _ex_audio._pitch,               _y];
        var _value_start    =  _ex_audio_sounds[# _ex_audio._fade_pitch_start,    _y];
        var _value_end      =  _ex_audio_sounds[# _ex_audio._fade_pitch_end,      _y];
        var _value_position =  _ex_audio_sounds[# _ex_audio._fade_pitch_position, _y];
        var _value_duration =  _ex_audio_sounds[# _ex_audio._fade_pitch_duration, _y];
        var _value_easing   =  _ex_audio_sounds[# _ex_audio._fade_pitch_easing,   _y];
        
        _value_position += 1;
        
        if (_value_easing == -1) {
            _value = lerp(_value_start, _value_end, ex_audio_math_smoothstep(0, 1, _value_position / _value_duration));
        } else {
            _value = lerp(_value_start, _value_end, script_execute(_value_easing, _value_position, 0, clamp(_value_position * _value_duration, 0, 1), _value_duration));
        } 
        
        // update volume
        audio_emitter_pitch(_ex_audio_sounds[# _ex_audio._emitter, _y], _value);
        _ex_audio_sounds[# _ex_audio._pitch, _y] = _value;
        
        // update fade volume position
        _ex_audio_sounds[# _ex_audio._fade_pitch_position, _y] = _value_position;
        
        // if over duration, stop fading
        if (_value_position &gt;= _value_duration) {
            _ex_audio_sounds[# _ex_audio._fade_pitch_duration, _y] = -1;
            if (ex_audio_get_debug_mode()) {
                show_debug_message('exAudio: sound "'+_name+'" has ended fading its pitch to '+string( _value_end ));
            }
        }
        
    }
    
    // if a sound is paused or not playing, exit
    if (_ex_audio_sounds[# _ex_audio._playing, _y] == false or _ex_audio_sounds[# _ex_audio._paused, _y] == true) {
        continue;
    }
    
    // update position
    _position = audio_sound_get_track_position(_ex_audio_sounds[# _ex_audio._channel, _y]);
    _ex_audio_sounds[# _ex_audio._position, _y] = _position;
    
    // ended
    if (_position == 0 and _ex_audio_sounds[# _ex_audio._position_previous, _y] &gt; 0 and _ex_audio_sounds[# _ex_audio._looping, _y] == false) {
        _ex_audio_sounds[# _ex_audio._playing, _y] = false;
        if (ex_audio_get_debug_mode()) {
            show_debug_message('exAudio: sound "'+_name+'" has ended its playback');
        }
    }
    
    // update previous track position
    _ex_audio_sounds[# _ex_audio._position_previous, _y] = _position;
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
