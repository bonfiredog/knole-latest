<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creating The Basic Vocal Engine

Vocalising = false

//Create the values for emission: x,y and z values, position, velocity, falloff.

VX = oMouth.x
VY = oMouth.y
VZ = 1
VVelX = 0
VVelY = 0
VVelZ = 0
VFRefDist = 200
VFMaxDist =  300
VFFactor = 1


//Set up the classes...
ex_audio_initialize()

ex_audio_class_create("initial")

ex_audio_class_create("scream")
ex_audio_class_create("alarm")
ex_audio_class_create("question")
ex_audio_class_create("yes")
ex_audio_class_create("no")
ex_audio_class_create("giggle")
ex_audio_class_create("laugh")
ex_audio_class_create("shout")
ex_audio_class_create("sing")
ex_audio_class_create("moan")


//Load the individual sounds into their classes, set their volume and pitch to default,
//and their falloff and velocity and position to the mouth defaults.

ex_audio_load("clack1",aClack,"initial",1,0)
ex_audio_load("alarmvoice1",aVoiceShort,"alarm",1,0)
ex_audio_load("questionvoice1",aVoiceShort,"question",1,0)
ex_audio_load("novoice1",aVoiceShort,"no",1,0)
ex_audio_load("yesvoice1",aVoiceShort,"yes",1,0)
ex_audio_load("moanvoice1",aVoice,"moan",1,0)
ex_audio_load("screamvoice1",aVoiceShort,"scream",1,0)

PlayedClack = false
CloseRate = 4 
BendEndRate = 4
Stopping = false
VolumeRate = 0.06
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop Vocalising

ex_audio_stop(Sound)
Vocalising = false
PlayedClack = false
Sound = "none"
Clack = "none"
Mode = "none"
Reps = 0
Intensity = 0
ComeToInitialVol = false
StartedThisVocal = false
Stopping = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Maintain The Position Of The Emitter

VX = oMouth.x
VY = oMouth.y

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vocalising

if Vocalising = true {

CurrentVolume = VolumeLower + (((VolumeHigher - VolumeLower) / 100) * oMouth.PercentageOpen)
CurrentPitch = PitchLower + (((PitchHigher - PitchLower) / 200) * (oMouthLeft.BendPercentage + 100))


if Reps &gt; 0 {

//Repeating up until the last time
if PlayedClack = false {
if oMouth.PercentageOpen &lt; 15 {
ex_audio_set_position(Clack,VX,VY,0)
ex_audio_play(Clack,false)
}
ex_audio_set_position(Sound,VX,VY,0)
ex_audio_set_volume(Sound,0,0)
ex_audio_play(Sound,false)
PlayedClack = true
} else if PlayedClack = true {
if ComeToInitialVol = false {
ex_audio_set_pitch(Sound,CurrentPitch,0)
if ex_audio_get_volume(Sound) &lt; InitialVolume {
ex_audio_set_volume(Sound,ex_audio_get_volume(Sound) + VolumeRate,0)
} else {
ComeToInitialVol = true
}
} else if ComeToInitialVol = true {
if ex_audio_is_playing(Sound) {
ex_audio_set_position(Sound,VX,VY,0)
ex_audio_set_volume(Sound,CurrentVolume,0)
ex_audio_set_pitch(Sound,CurrentPitch,0)
Steps += 1

Modulating()

} else if ex_audio_is_playing(Sound) = false {
if oMouth.PercentageOpen != ClosingMouth and oMouthLeft.BendPercentage != ClosingBend {
if oMouth.PercentageOpen &gt; ClosingMouth {
oMouth.PercentageOpen -= CloseRate
} else if oMouth.PercentageOpen &lt; ClosingMouth {
oMouth.PercentageOpen += CloseRate
}
if oMouthLeft.BendPercentage &gt; ClosingBend {
oMouthLeft.BendPercentage -= BendEndRate
} else if oMouthLeft.BendPercentage &lt; ClosingBend {
oMouthLeft.BendPercentage += BendEndRate
}
} else {
oMouth.PercentageOpen = ClosingMouth
oMouthLeft.BendPercentage = ClosingBend
PlayedClack = false
ComeToInitialVol = false
StartedThisVocal = false
Reps -= 1
}
}
}
}

} else if Reps = 0 {
//The last time
if PlayedClack = false {
if oMouth.PercentageOpen &lt; 15 {
ex_audio_set_position(Clack,VX,VY,0)
ex_audio_play(Clack,false)
}
ex_audio_set_position(Sound,VX,VY,0)
ex_audio_set_volume(Sound,0,0)
ex_audio_play(Sound,false)
PlayedClack = true
} else if PlayedClack = true {
if ComeToInitialVol = false {
ex_audio_set_pitch(Sound,CurrentPitch,0)
if ex_audio_get_volume(Sound) &lt; InitialVolume {
ex_audio_set_volume(Sound,ex_audio_get_volume(Sound) + VolumeRate,0)
} else {
ComeToInitialVol = true
}
} else if ComeToInitialVol = true {
if ex_audio_is_playing(Sound) {

ex_audio_set_position(Sound,VX,VY,0)
ex_audio_set_volume(Sound,CurrentVolume,0)
ex_audio_set_pitch(Sound,CurrentPitch,0)
Steps += 1

Modulating()

//When Finished
} else if ex_audio_is_playing(Sound) = false {
//Start breathing again.
if oMouth.PercentageOpen != ClosingMouth and oMouthLeft.BendPercentage != ClosingBend {
if oMouth.PercentageOpen &gt; ClosingMouth {
oMouth.PercentageOpen -= CloseRate
} else if oMouth.PercentageOpen &lt; ClosingMouth {
oMouth.PercentageOpen += CloseRate
}
if oMouthLeft.BendPercentage &gt; ClosingBend {
oMouthLeft.BendPercentage -= BendEndRate
} else if oMouthLeft.BendPercentage &lt; ClosingBend {
oMouthLeft.BendPercentage += BendEndRate
}
} else {
oMouth.PercentageOpen = ClosingMouth
oMouthLeft.BendPercentage = ClosingBend
PlayedClack = false
Sound = "none"
Clack = "none"
Mode = "none"
Reps = 0
ClosingMouth = 0
ClosingBend = 0
Intensity = 0
ComeToInitialVol = false
Stopping = false
StartedThisVocal = false
Vocalising = false
}
}
}
}
}

CurrentVolume = clamp(CurrentVolume,VolumeLower,VolumeHigher)
CurrentPitch = clamp(CurrentPitch,PitchLower,PitchHigher)
TargetPitch = clamp(TargetPitch,-100,100)
TargetOpen = clamp(TargetOpen,0,100)
}

//Stopping
if Stopping = true {
if oMouth.PercentageOpen != ClosingMouth and oMouthLeft.BendPercentage != ClosingBend {
if oMouth.PercentageOpen &gt; ClosingMouth {
oMouth.PercentageOpen -= CloseRate
} else if oMouth.PercentageOpen &lt; ClosingMouth {
oMouth.PercentageOpen += CloseRate
}
if oMouthLeft.BendPercentage &gt; ClosingBend {
oMouthLeft.BendPercentage -= BendEndRate
} else if oMouthLeft.BendPercentage &lt; ClosingBend {
oMouthLeft.BendPercentage += BendEndRate
}
} else {
ClosingMouth = 0
ClosingBend = 0
Stopping = false
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test Controls

if keyboard_check_pressed(ord('V')) {
StartVocal("scream",0,0,1,0)
}

if keyboard_check_pressed(ord('S')) {
StopVocal()
}

if keyboard_check_pressed(ord('R')) {
oMouth.PercentageOpen = 0
oMouthLeft.BendPercentage = 0
oMouthRight.BendPercentage = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
