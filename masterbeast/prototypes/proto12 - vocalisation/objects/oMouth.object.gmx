<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sMouth</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

SmallestScale = image_xscale
LargestScale = SmallestScale * 2
PercentageOpen = 0
OriginalX = x
OriginalY = y
VibrateDir = "left"
VibrateTimer = 1

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manual Open And Close

if keyboard_check(vk_up) {
PercentageOpen += 1
}

if keyboard_check(vk_down) {
PercentageOpen -= 1
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Back And Forth If Vocalising

if mCreatureController.Vocalising = true and ex_audio_get_volume(mCreatureController.Sound) &gt; 0 {
if VibrateTimer &gt; 0 {
VibrateTimer -= 1
if VibrateDir = "left" {
x -= (2 * mCreatureController.Intensity)
} else if VibrateDir = "right" {
x += (2 * mCreatureController.Intensity)
}
} else if VibrateTimer &lt;= 0 {
if VibrateDir = "left" {
VibrateDir = "right" 
} else if VibrateDir = "right" {
VibrateDir = "left"
}
VibrateTimer = 1
}

XDifference = x - OriginalX

} else {
x = OriginalX
y = OriginalY
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Maintaining Size

image_xscale = SmallestScale + (((LargestScale - SmallestScale) / 100) * PercentageOpen)
image_yscale = image_xscale

PercentageOpen = ((image_xscale - SmallestScale) / (LargestScale - SmallestScale)) * 100

PercentageOpen = clamp(PercentageOpen,0,100)
image_xscale = clamp(image_xscale,SmallestScale,LargestScale)


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing Self And Stats

draw_self()
PosX = 20
PosY = room_height - 20
draw_set_font(fStats)
draw_set_color(c_red)
draw_set_halign(fa_left)
draw_set_valign(fa_center)
draw_text(PosX,PosY,"VOCALS PROTOTYPE")
PosY -= 20
if mCreatureController.Vocalising = false {
draw_text(PosX, PosY, "Press V to start vocalisation with code-set mode.")
} else {
draw_text(PosX, PosY, "Vocalising... " + string(ex_audio_get_volume(mCreatureController.Sound)))
}
PosY -= 20
draw_text(PosX,PosY, "Press S to stop any current vocalisation.")
PosY -= 20
draw_text(PosX,PosY, "Press up or down to open or close mouth.")
PosY -= 20
draw_text(PosX,PosY, "Press U or H to bend the mouth up or down.")
PosY -= 20
draw_text(PosX,PosY, "Press R to reset the mouth.")
PosY -= 20
draw_line(PosX,PosY,PosX + 300,PosY)
PosY -= 20
draw_text(PosX,PosY,"% Opened: " + string(PercentageOpen))
PosY -= 20
draw_text(PosX,PosY,"Bend %: " + string(oMouthLeft.BendPercentage))

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
