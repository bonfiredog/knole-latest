<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sFur1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = choose(sFur1,sFur2,sFur3)
SetMoveValues = false
MarkedForMovement = false



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if GeneratedValues = true and SetMoveValues = false {
if point_distance(OriginalX,OriginalY,oListener.x,oListener.y) &lt;= oListener.sprite_width {
MarkedForMovement = true
StartingX = x
StartingY = y
DistanceToTravel = oListener.sprite_width / 2
DirectionOfTravel = point_direction(oListener.x, oListener.y,OriginalX,OriginalY)
ReverseDirectionOfTravel = DirectionOfTravel - 180
SpeedOfTravel = 300 / room_speed
}
SetMoveValues = true
}


if GeneratedValues = true and SetMoveValues = true {
x = OriginalX
y = OriginalY - mForeheadFurArea.Difference 
}

if MarkedForMovement = true {
if (
mouse_x &gt; (oListener.x - (oListener.sprite_width / 2)) 
and mouse_x &lt; (oListener.x + (oListener.sprite_width / 2)) 
and mouse_y &gt; (oListener.y - (oListener.sprite_height / 2))
and mouse_y &lt; (oListener.y + (oListener.sprite_height / 2))
)
or oListener.Selected = true {


if point_distance(StartingX,StartingY,OriginalX,OriginalY) &lt; DistanceToTravel {
OriginalX = OriginalX + lengthdir_x(SpeedOfTravel, DirectionOfTravel)
OriginalY = OriginalY + lengthdir_y(SpeedOfTravel, DirectionOfTravel)
}

} else {

if point_distance(StartingX,StartingY,OriginalX,OriginalY) &gt; 0 {
OriginalX = OriginalX + lengthdir_x(SpeedOfTravel, ReverseDirectionOfTravel)
OriginalY = OriginalY + lengthdir_y(SpeedOfTravel, ReverseDirectionOfTravel)
}

}

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
