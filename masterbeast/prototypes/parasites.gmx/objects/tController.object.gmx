<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sMoon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

CurrentView = "out"
TopMoleNumber = 100
Spawnable = true
LonelyChangeRate = 0.0005
HungerChangeRate = 0.0005
EnergyChangeRate = 0.0005
Knife = false
KnifeSpeed = 0
LastX = 0
LastY = 0
Temperature = "cold"
ChosenMole = noone
TimeOfDay = "morning"
DayAlpha = 0.4  
DayColour = c_orange
MaxClusters = 4
Clusters = 0
CandidateFound = false
ScentMarkerMax = 20
BruiseMax = 10
PickupMax = 10
Destroyed = false

alarm[0] = 20000
MaxRetries = 10
MoonDirBottom = 0
MoonDirTop = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start a random clustering

if instance_exists(tMole) {
if Clusters &lt; MaxClusters {
while CandidateFound = false {
for (i = 0; i &lt; MaxRetries; i++) {
if CandidateFound = false {
CandidateCluster = instance_find(tMole,random(instance_number(tMole)))
if CandidateCluster.SeedClusterer = false
and CandidateCluster.State != "clustering" 
and CandidateCluster.Loneliness &lt; 20
and CandidateCluster.Hunger &lt; 20
and CandidateCluster.Energy &gt; 0 
{
CandidateFound = true 
CandidateCluster.SeedClusterer = true 
CandidateCluster.State = "clustering"
CandidateCluster.BabyTimer = random_range(CandidateCluster.BabyCreateLower,CandidateCluster.BabyCreateHigher)
Clusters += 1
}
}
}
CandidateFound = true
}
}

CandidateFound = false
}
alarm[0] = random_range(15000,20000) * ClusterMod
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Last Mouse X &amp; Y

LastX = mouse_x
LastY = mouse_y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Changing View And Panning

if keyboard_check_pressed(ord('Z')) {
if CurrentView = "out" {
view_visible[0] = false
view_visible[1] = true
view_xview[1] = mouse_x - (view_wview[1] / 2)
view_yview[1] = mouse_y - (view_hview[1] / 2)
CurrentView = "in"
} else if CurrentView = "in" {
view_visible[1] = false
view_visible[0] = true
view_xview[0] = 0
view_xview[0] = 0
CurrentView = "out"
}
}

if CurrentView = "in" {
if mouse_check_button_pressed(mb_right) {
DragX = mouse_x
DragY = mouse_y
}

if mouse_check_button(mb_right) {
view_xview[1] = DragX - (mouse_x - view_xview[1])
view_yview[1] = DragY - (mouse_y - view_yview[1])

view_xview[1] = max(0, min(view_xview[1], room_width - view_wview[1]))
view_yview[1] = max(0, min(view_yview[1], room_height - view_hview[1]))
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Placing Wounds And Scent Markers

if position_meeting(mouse_x,mouse_y,tHead) and 
keyboard_check(ord('W'))
and mouse_check_button_pressed(mb_left) {
instance_create(mouse_x,mouse_y,tWound)
}

if position_meeting(mouse_x,mouse_y,tHead) 
and mouse_check_button_pressed(mb_left)
and keyboard_check(vk_nokey)
and position_meeting(mouse_x,mouse_y,tMole) = false
{
if instance_number(tScentMarker) &lt; ScentMarkerMax {
instance_create(mouse_x,mouse_y,tScentMarker)
} else {
with tScentMarker.id { instance_destroy() }
instance_create(mouse_x,mouse_y,tScentMarker)
} 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Capping Mole Numbers

if instance_number(tMole) &lt; TopMoleNumber {
Spawnable = true 
} else {
Spawnable = false
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setting Knife &amp; Speed

if Knife = false {
if keyboard_check(ord('K')) and mouse_check_button_pressed(mb_any) {
Knife = true
}
}

if Knife = true {
if mouse_check_button_released(mb_any) {
Knife = false
}

KnifeSpeed = point_distance(LastX,LastY,mouse_x,mouse_y)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Changing Temperature

if keyboard_check_pressed(ord('T')) {
switch Temperature {
case "cold":
Temperature = "warm";
break;
case "warm":
Temperature = "hot";
break;
case "hot":
Temperature = "cold";
break;
}
}

if Temperature = "cold" {
ClusterMod = 2
} else {
ClusterMod = 1
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Place Mole

if keyboard_check(ord('M')) and mouse_check_button_pressed(mb_any) {
instance_create(mouse_x,mouse_y,tMole)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select Mole Or Shepherd

if place_meeting(tMousePointer.x,tMousePointer.y,tMole) and mouse_check_button_pressed(mb_any) {
ChosenMole = instance_nearest(mouse_x,mouse_y,tMole)
} 

if place_meeting(tMousePointer.x,tMousePointer.y,oShepherdBody) and mouse_check_button_pressed(mb_any) {
ChosenMole = instance_nearest(mouse_x,mouse_y,oShepherdParent)
} 

if place_meeting(tMousePointer.x,tMousePointer.y,tMole) = false
and place_meeting(tMousePointer.x,tMousePointer.y,oShepherdBody) = false
and mouse_check_button_pressed(mb_any) {
ChosenMole = noone
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Changing Time Of Day

if keyboard_check_pressed(ord('Y')) {

switch TimeOfDay {
case "morning":
TimeOfDay = "afternoon";
DayAlpha = 0.0;
DayColour = c_white;
break;

case "afternoon":
TimeOfDay = "evening";
DayAlpha = 0.4;
DayColour = c_orange;
break;

case "evening":
TimeOfDay = "night";
DayAlpha = 0.6
DayColour = c_black
break;


case "night":
TimeOfDay = "morning";
DayAlpha = 0.2
DayColour = c_orange
break;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing Moles

if view_current = 0 {

with tMole {
if x &lt; view_xview[0] or x &gt; (view_xview[0] + view_wview[0])
or y &lt; view_yview[0] or y &gt; (view_yview[0] + view_hview[0])
{
Drawing = false
} else {
Drawing = true
}
}
} else if view_current = 1 {
with tMole {
if x &lt; view_xview[1] or x &gt; (view_xview[1] + view_wview[1])
or y &lt; view_yview[1] or y &gt; (view_yview[1] + view_hview[1])
{
Drawing = false
} else {
Drawing = true
}
}


}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Time Of Day Changes

if TimeOfDay = "morning" or TimeOfDay = "afternoon" {
LonelyChangeRate = 0.00005
} else if TimeOfDay = "evening" or TimeOfDay = "night" {
LonelyChangeRate = 0.01
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Place Bruise

if position_meeting(mouse_x,mouse_y,tHead)
and keyboard_check(ord('B'))
and mouse_check_button_pressed(mb_any)
{

if instance_number(tBruise) &lt; BruiseMax {
instance_create(mouse_x,mouse_y,tBruise)
} else {
with tBruise.id { instance_destroy() }
instance_create(mouse_x,mouse_y,tBruise)
} 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Simplify Direction Of Moon

if tTestMoon.x &lt; (room_width / 2) {
MoonDirBottom = 100
MoonDirTop = 260
} else {
MoonDirBottom = -80
MoonDirTop = 80
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Place Taboo

if keyboard_check(ord('I')) and mouse_check_button_pressed(mb_any) {
instance_create(mouse_x,mouse_y, tTabooParent)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create &amp; Destroy Pickups

if keyboard_check(ord('P')) and position_meeting(mouse_x,mouse_y,tHead)
and mouse_check_button_pressed(mb_any) {
if instance_number(tPickup) &lt; PickupMax {
instance_create(mouse_x,mouse_y,tPickup)
} else {
with tPickup.id { instance_destroy() }
instance_create(mouse_x,mouse_y,tPickup)
} 
}

if position_meeting(mouse_x,mouse_y,tPickup) and keyboard_check(ord('D'))
and mouse_check_button_pressed(mb_any) {
ToDelete = instance_place(mouse_x,mouse_y,tPickup)
with ToDelete {
instance_destroy()
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Creature Shout

if keyboard_check_pressed(ord('G')) {
audio_play_sound(aCreatureRoar,1,false)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw UI

draw_set_alpha(DayAlpha)
draw_set_colour(DayColour)
draw_rectangle(0,0,room_width,room_height,false)
draw_set_alpha(1)
draw_set_colour(c_white)

if CurrentView = "out" {
draw_set_alpha(1)
draw_set_font(fController)
draw_set_colour(c_red)
draw_set_halign(fa_left)
draw_set_valign(fa_center)
PosX = 15
PosY = room_height - 15
draw_text(PosX,PosY,"PROTOTYPE")
PosY -= 40
draw_text(PosX,PosY,"Press P to create and D to destroy pick-ups.")
PosY -= 20
draw_text(PosX,PosY,"Press Z to change view.")
PosY -= 20
draw_text(PosX,PosY,"Hold 'W' and click to wound.")
PosY -= 20
draw_text(PosX,PosY,"Hold 'M' and click to place mole.")
PosY -= 20
draw_text(PosX,PosY,"Press 'G' to make creature speak.")
PosY -= 20
draw_text(PosX,PosY,"Press 'T' to change temperature.")
PosY -= 20
draw_text(PosX,PosY,"Press 'B' and click to place bruise.")
PosY -= 20
draw_text(PosX,PosY,"Press 'I' and click to place taboo.")
PosY -= 20
draw_text(PosX,PosY,"Press 'B' without clicking to birth the Moleherd.")
PosY -= 20
draw_text(PosX,PosY,"Press Y to change T.O.D.")
PosY -= 20
draw_text(PosX,PosY,"Drag moon with mouse.")
PosY -= 20
if Knife = true {
draw_text(PosX,PosY,"Knife Active (Let go of mouse to deactivate.)")
PosY -= 20
draw_text(PosX,PosY,"Knife Speed: " + string(KnifeSpeed))
} else if Knife = false {
draw_text(PosX,PosY,"Knife Inactive (Press K and click to activate.)")
PosY -= 20
draw_text(PosX,PosY,"Knife Speed: 0")
}
PosY -= 20
draw_text(PosX,PosY,"Temperature: " + Temperature)
PosY -= 20
draw_text(PosX,PosY,"Time Of Day: " + TimeOfDay)
PosY -= 20
draw_text(PosX,PosY,"Number Of Clusters: " + string(Clusters))
PosY -= 20
draw_text(PosX,PosY,"Clustering Timer: " + string(alarm[0]))
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
