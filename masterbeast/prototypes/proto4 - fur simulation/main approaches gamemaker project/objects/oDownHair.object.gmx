<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sDownHair</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = global.DownHairLayer
direction = global.HairDirection
image_angle = direction
//Direction that the hair generally goes
NaturalDirection = direction
//Interactive Brushing Variables
LateralLimit = 20
VerticalLimit = 160
SpringSpeed = 600 / room_speed
ReturnSpeed = 600 / room_speed
CollidingLeft = false
CollidingRight = false
CollidingTop = false
CollidingBottom = false

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Keep the image angle aligned with the direction at all times.
image_angle = direction 

//If the mouse is touching the hair, the left mouse button is pressed and no other collision is in progress...
if place_meeting(x,y,mMouseTouchDown) and mMouseTouchDown.ButtonPressed = true and CollidingTop = false and CollidingBottom = false and CollidingLeft = false and CollidingRight = false{

//Define direction of collision.
if collision_rectangle((x - (sprite_width / 2)),(sprite_height-sprite_height),(x + (sprite_width / 2 )),y,mMouseTouchDown, true, false) {
CollidingTop = true
}

if collision_rectangle((x - (sprite_width / 2)),y,x,y + 18,mMouseTouchDown, true, false) {
CollidingLeft = true
}

if collision_rectangle((x - (sprite_width / 2)),(y + 18),(x + (sprite_width / 2 )),sprite_height,mMouseTouchDown, true, false) {
CollidingBottom = true
}

if collision_rectangle(x,y,(x + (sprite_width / 2 )),y + 18,mMouseTouchDown, true, false) {
CollidingRight = true
}
}

//Move in a particular direction (based on the direction of the collision, up to a predefined limit.

if CollidingLeft = true {

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
